--------------------------------------------------------------------------------
Profile data file 'callgrind.out.44878' (creator: callgrind-3.21.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 108555522
Trigger: Program termination
Profiled target:  ./trietest (PID 44878, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
635,335,138 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
29,498,085 ( 4.64%)  /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
23,949,801 ( 3.77%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
22,959,764 ( 3.61%)  /usr/include/c++/13.2.1/typeinfo:std::type_info::operator==(std::type_info const&) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
14,305,489 ( 2.25%)  ???:0x000000000009b500 [/usr/lib/libc.so.6]
13,073,391 ( 2.06%)  ???:0x000000000009a870 [/usr/lib/libc.so.6]
13,011,975 ( 2.05%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:bool reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::startOp<InsertDescNode>(int, void* const*, int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
12,676,852 ( 2.00%)  ???:malloc [/usr/lib/libc.so.6]
 9,805,185 ( 1.54%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 8,454,191 ( 1.33%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:bool reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::startOp<RU_ALL_INS_DescNode, NotifyDescNode>(int, void* const*, int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 8,314,150 ( 1.31%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<UpdateNode*>::operator UpdateNode*() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 7,786,592 ( 1.23%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__cmpexch_failure_order(std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 6,718,144 ( 1.06%)  ???:free [/usr/lib/libc.so.6]
 6,267,043 ( 0.99%)  trie.h:Trie::traverseBinaryTrie(long, long&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,798,299 ( 0.91%)  trie.h:Trie::interpretedBit(TrieNode*, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,739,515 ( 0.90%)  FomitchevRuppert/../common.h:threadID(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,507,971 ( 0.87%)  /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::load(std::memory_order) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,481,600 ( 0.86%)  trie.h:Trie::findLatest(long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,439,489 ( 0.86%)  trie.h:Trie::predHelper(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,408,764 ( 0.85%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:bool reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::startOp<DelNode, InsNode, PredecessorNode, NotifyNode>(int, void* const*, int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,290,974 ( 0.83%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<DelNode*>::operator DelNode*() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 5,261,925 ( 0.83%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::get<InsertDescNode>(InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 4,969,360 ( 0.78%)  ???:0x000000000015a650 [/usr/lib/libc.so.6]
 4,240,000 ( 0.67%)  /usr/include/c++/13.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 4,050,213 ( 0.64%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::startOp(int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,893,296 ( 0.61%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__cmpexch_failure_order2(std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,579,258 ( 0.56%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::startOp(int, bool, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,543,786 ( 0.56%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<RU_ALL_INS_DescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::get<RU_ALL_INS_DescNode>(RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,543,454 ( 0.56%)  FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::next(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,296,685 ( 0.52%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,295,116 ( 0.52%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::operator[](unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,185,424 ( 0.50%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator|(std::memory_order, std::__memory_order_modifier) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 3,004,008 ( 0.47%)  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) [/usr/lib/libstdc++.so.6.0.32]
 2,981,616 ( 0.47%)  /usr/include/c++/13.2.1/typeinfo:std::type_info::name() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,949,430 ( 0.46%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::__deque_buf_size(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,919,921 ( 0.46%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,877,975 ( 0.45%)  /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,791,852 ( 0.44%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,720,396 ( 0.43%)  /usr/include/c++/13.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,677,902 ( 0.42%)  /usr/include/c++/13.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,640,116 ( 0.42%)  trietest.cpp:randomNum(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,601,586 ( 0.41%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::startOp(int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,547,235 ( 0.40%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_initialize_map(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,536,731 ( 0.40%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::next(PredecessorNode*, RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,448,966 ( 0.39%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,420,673 ( 0.38%)  /usr/include/c++/13.2.1/bits/atomic_base.h:bool reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::startOp<InsertDescNode>(int, void* const*, int, bool)
 2,394,770 ( 0.38%)  /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::operator STATUS() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,354,775 ( 0.37%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::MemoryReclamationGuard::MemoryReclamationGuard(int, record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>*, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,299,076 ( 0.36%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::startOp(int, bool, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,266,878 ( 0.36%)  trie.h:Trie::traverseUALL(long, std::vector<InsNode*, std::allocator<InsNode*> >&, std::vector<DelNode*, std::allocator<DelNode*> >&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,260,584 ( 0.36%)  /usr/include/c++/13.2.1/bits/atomic_base.h:reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::endOp(int)
 2,193,554 ( 0.35%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,166,393 ( 0.34%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,162,659 ( 0.34%)  trie.h:Trie::notifyPredOps(UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,154,767 ( 0.34%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<DelNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::get<DelNode>(DelNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,117,570 ( 0.33%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,102,178 ( 0.33%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::operator int() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,064,601 ( 0.32%)  trie.h:Trie::traverseAndInsertPALL(PredecessorNode*, std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,043,805 ( 0.32%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 2,006,408 ( 0.32%)  trie.h:Trie::remove(long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,978,011 ( 0.31%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:void record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::startOp<InsertDescNode>(int, void* const*, int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,930,536 ( 0.30%)  /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,930,536 ( 0.30%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_M_set_node(PredecessorNode***) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,920,930 ( 0.30%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::__normal_iterator(InsNode** const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,875,562 ( 0.30%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,831,491 ( 0.29%)  /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,828,980 ( 0.29%)  /usr/include/c++/13.2.1/bits/atomic_base.h:MinReg64::minRead()
 1,772,628 ( 0.28%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >::__normal_iterator(DelNode** const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,772,136 ( 0.28%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::~_Vector_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,772,136 ( 0.28%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::~_Vector_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,744,600 ( 0.27%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<NotifyNode*>::operator NotifyNode*() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,720,086 ( 0.27%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::startOp(int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,695,562 ( 0.27%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::initThread(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,658,985 ( 0.26%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::end() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,622,929 ( 0.26%)  FomitchevRuppert/P_ALL.h:P_ALL_TYPE::remove(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,617,120 ( 0.25%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::insert(RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,617,120 ( 0.25%)  FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::insert(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,601,247 ( 0.25%)  /usr/include/c++/13.2.1/bits/atomic_base.h:reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::isQuiescent(int)
 1,601,247 ( 0.25%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::getGuard(int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,601,247 ( 0.25%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,600,000 ( 0.25%)  /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::param_type(int, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,600,000 ( 0.25%)  /usr/include/c++/13.2.1/bits/uniform_int_dist.h:unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,581,971 ( 0.25%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<PredecessorNode*> std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_insert_<PredecessorNode* const&, std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, PredecessorNode* const&, std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,573,052 ( 0.25%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, NotifyDescNode>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,573,052 ( 0.25%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,555,154 ( 0.24%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_insert_unique_pos(PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,554,864 ( 0.24%)  /usr/include/c++/13.2.1/bits/atomic_base.h:bool reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::startOp<RU_ALL_INS_DescNode, NotifyDescNode>(int, void* const*, int, bool)
 1,546,930 ( 0.24%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >::quiescenceIsPerRecordType() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,530,906 ( 0.24%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::end() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,528,341 ( 0.24%)  FomitchevRuppert/P_ALL.h:P_ALL_TYPE::helpRemove(ListNode*, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,524,150 ( 0.24%)  FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::minRead() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,520,076 ( 0.24%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::startOp(int, bool, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,512,550 ( 0.24%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::MemoryReclamationGuard::MemoryReclamationGuard(int, record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>*, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,490,693 ( 0.23%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<ListNode*>::operator=(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,476,780 ( 0.23%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::~vector() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,476,780 ( 0.23%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::~vector() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,474,715 ( 0.23%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<PredecessorNode*>, bool> std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_insert_unique<PredecessorNode* const&>(PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,469,776 ( 0.23%)  trie.h:Trie::firstActivated(UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,468,666 ( 0.23%)  /usr/include/c++/13.2.1/bits/vector.tcc:void std::vector<DelNode*, std::allocator<DelNode*> >::_M_realloc_insert<DelNode*>(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >, DelNode*&&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,452,048 ( 0.23%)  /usr/include/c++/13.2.1/bits/atomic_base.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::endOp(int)
 1,450,368 ( 0.23%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::begin() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,447,902 ( 0.23%)  /usr/include/c++/13.2.1/bits/deque.tcc:void std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_push_front_aux<PredecessorNode* const&>(PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,436,862 ( 0.23%)  /usr/include/c++/13.2.1/bits/move.h:STATUS const* std::__addressof<STATUS const>(STATUS const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,429,668 ( 0.23%)  trie.h:Trie::insert(long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,422,540 ( 0.22%)  /usr/include/c++/13.2.1/bit:int std::__countr_zero<unsigned long>(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,402,903 ( 0.22%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >(__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&, __gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,400,070 ( 0.22%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,397,505 ( 0.22%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<RU_ALL_INS_DescNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,392,237 ( 0.22%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,391,546 ( 0.22%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,342,000 ( 0.21%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::get<NotifyDescNode>(NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,318,674 ( 0.21%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,318,674 ( 0.21%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,299,291 ( 0.20%)  trie.h:Trie::deleteBinaryTrie(DelNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,287,024 ( 0.20%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<PredecessorNode*>::allocate(unsigned long, void const*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,270,542 ( 0.20%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:void record_manager_single_type<RU_ALL_INS_DescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::startOp<RU_ALL_INS_DescNode, NotifyDescNode>(int, void* const*, int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,240,062 ( 0.20%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,237,216 ( 0.19%)  FomitchevRuppert/P_ALL.h:P_ALL_TYPE::next(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,233,398 ( 0.19%)  /usr/include/c++/13.2.1/bits/atomic_base.h:P_ALL_TYPE::helpRemove(ListNode*, ListNode*)
 1,233,398 ( 0.19%)  /usr/include/c++/13.2.1/bits/atomic_base.h:Trie::traverseAndInsertPALL(PredecessorNode*, std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >&)
 1,233,398 ( 0.19%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_Deque_iterator(std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,224,483 ( 0.19%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,212,840 ( 0.19%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::remove(RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,212,840 ( 0.19%)  FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::remove(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,210,100 ( 0.19%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<void, pool_interface<void, allocator_interface<void> > >::supportsCrashRecovery() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,207,800 ( 0.19%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::begin() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,200,000 ( 0.19%)  /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::uniform_int_distribution(int, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,187,589 ( 0.19%)  trie.h:Trie::traverseRUALL(PredecessorNode*, std::unordered_set<InsNode*, std::hash<InsNode*>, std::equal_to<InsNode*>, std::allocator<InsNode*> >&, std::unordered_set<DelNode*, std::hash<DelNode*>, std::equal_to<DelNode*>, std::allocator<DelNode*> >&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,146,897 ( 0.18%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&, __gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,140,700 ( 0.18%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, NotifyDescNode>::get<NotifyDescNode>(NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,140,700 ( 0.18%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::retire<NotifyDescNode>(int, NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,120,000 ( 0.18%)  /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::a() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,107,150 ( 0.17%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:NotifyDescNode* record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::allocate<NotifyDescNode, PredecessorNode*>(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,104,327 ( 0.17%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsertDescNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,089,160 ( 0.17%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::initThread(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,072,520 ( 0.17%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::operator-(std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**> const&, std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,047,780 ( 0.16%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::base() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,047,732 ( 0.16%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >::base() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,041,287 ( 0.16%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_M_deallocate(DelNode**, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,040,052 ( 0.16%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,040,052 ( 0.16%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, InsNode, PredecessorNode, NotifyNode>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,040,052 ( 0.16%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, NotifyNode>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,040,052 ( 0.16%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, PredecessorNode, NotifyNode>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,040,000 ( 0.16%)  /usr/include/c++/13.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,033,746 ( 0.16%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_Vector_impl::_Vector_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,033,746 ( 0.16%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_Vector_impl::_Vector_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,028,534 ( 0.16%)  /usr/include/c++/13.2.1/bits/atomic_base.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::isQuiescent(int)
 1,028,534 ( 0.16%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::getGuard(int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,028,534 ( 0.16%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,028,048 ( 0.16%)  /usr/include/c++/13.2.1/bits/atomic_base.h:bool reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::startOp<DelNode, InsNode, PredecessorNode, NotifyNode>(int, void* const*, int, bool)
 1,018,894 ( 0.16%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::~deque() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,016,100 ( 0.16%)  /usr/include/c++/13.2.1/bit:int std::__countr_one<unsigned long>(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
 1,000,025 ( 0.16%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::MemoryReclamationGuard::MemoryReclamationGuard(int, record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>*, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   992,081 ( 0.16%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator=(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   965,268 ( 0.15%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_destroy_nodes(PredecessorNode***, PredecessorNode***) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   960,048 ( 0.15%)  /usr/include/c++/13.2.1/bits/atomic_base.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::endOp(int)
   959,907 ( 0.15%)  /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Destroy<DelNode**>(DelNode**, DelNode**) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   959,907 ( 0.15%)  /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Destroy<InsNode**>(InsNode**, InsNode**) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   949,087 ( 0.15%)  trie.h:Trie::insertBinaryTrie(UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   937,780 ( 0.15%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<PredecessorNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::get<PredecessorNode>(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   937,780 ( 0.15%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<PredecessorNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, InsNode, PredecessorNode, NotifyNode>::get<PredecessorNode>(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   926,792 ( 0.15%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_M_deallocate(InsNode**, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   920,046 ( 0.14%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   911,642 ( 0.14%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_map_allocator() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   911,642 ( 0.14%)  FomitchevRuppert/P_ALL.h:P_ALL_TYPE::helpMarked(ListNode*, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   907,052 ( 0.14%)  trie.h:Trie::predecessor(long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   901,063 ( 0.14%)  /usr/include/c++/13.2.1/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   892,570 ( 0.14%)  /usr/include/c++/13.2.1/new:operator new(unsigned long, void*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   889,284 ( 0.14%)  trie.h:Trie::sendNotification(NotifyNode*, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   886,068 ( 0.14%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_Vector_impl_data::_Vector_impl_data() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   886,068 ( 0.14%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_Vector_impl_data::_Vector_impl_data() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   884,829 ( 0.14%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   884,829 ( 0.14%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   884,829 ( 0.14%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_erase(std::_Rb_tree_node<PredecessorNode*>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   884,829 ( 0.14%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:PredecessorNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<PredecessorNode, long>(int, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   880,116 ( 0.14%)  ???:0x0000000000099320 [/usr/lib/libc.so.6]
   873,240 ( 0.14%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<long, pool_interface<long, allocator_interface<long> > >::supportsCrashRecovery() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   872,300 ( 0.14%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyDescNode>::push(NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   858,016 ( 0.14%)  /usr/include/c++/13.2.1/bits/stl_tree.h:void std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_construct_node<PredecessorNode* const&>(std::_Rb_tree_node<PredecessorNode*>*, PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   847,028 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   847,028 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<RU_ALL_INS_DescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   840,042 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:void record_manager_single_type<DelNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::startOp<DelNode, InsNode, PredecessorNode, NotifyNode>(int, void* const*, int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   839,741 ( 0.13%)  trietest.cpp:randomTask2(Trie*, int, int, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   838,750 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<NotifyDescNode, pool_none<NotifyDescNode, allocator_new<NotifyDescNode> > >::retire(int, NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   835,388 ( 0.13%)  /usr/include/c++/13.2.1/bits/stl_uninitialized.h:DelNode** std::__relocate_a<DelNode**, DelNode**, std::allocator<DelNode*> >(DelNode**, DelNode**, DelNode**, std::allocator<DelNode*>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   831,348 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyDescNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   831,203 ( 0.13%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::~_Deque_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   822,651 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyDescNode>::remove() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   822,036 ( 0.13%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpRemove(RU_ALL_Node*, RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   804,390 ( 0.13%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<PredecessorNode*>::deallocate(PredecessorNode**, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   804,390 ( 0.13%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_deallocate_node(PredecessorNode**) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   804,390 ( 0.13%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::push_back(PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   804,390 ( 0.13%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<PredecessorNode*>::_Rb_tree_iterator(std::_Rb_tree_node_base*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   800,040 ( 0.13%)  trie.h:Trie::threadInit() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   797,679 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<RU_ALL_INS_DescNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   797,113 ( 0.13%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<PredecessorNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, PredecessorNode, NotifyNode>::get<PredecessorNode>(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   795,084 ( 0.13%)  FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpRemove(ListNode*, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   786,968 ( 0.12%)  /usr/include/c++/13.2.1/atomic:std::atomic<unsigned long>::atomic(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   786,526 ( 0.12%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<RU_ALL_INS_DescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   781,608 ( 0.12%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpInsert(RU_ALL_Node*, RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   781,608 ( 0.12%)  FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpInsert(ListNode*, InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   777,577 ( 0.12%)  /usr/include/c++/13.2.1/bits/stl_set.h:std::set<PredecessorNode*, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::insert(PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   774,847 ( 0.12%)  /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::compare_exchange_strong(UpdateNode*&, UpdateNode*, std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   771,650 ( 0.12%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyDescNode>::pop() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   770,184 ( 0.12%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<DelNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   768,018 ( 0.12%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::_M_check_len(unsigned long, char const*) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   762,347 ( 0.12%)  /usr/src/debug/glibc/glibc/elf/dl-lookup.c:do_lookup_x [/usr/lib/ld-linux-x86-64.so.2]
   754,656 ( 0.12%)  /usr/include/c++/13.2.1/bits/atomic_base.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpInsert(ListNode*, InsertDescNode*)
   754,656 ( 0.12%)  /usr/include/c++/13.2.1/bits/atomic_base.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpInsert(RU_ALL_Node*, RU_ALL_INS_DescNode*)
   750,768 ( 0.12%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   750,764 ( 0.12%)  /usr/include/c++/13.2.1/bits/atomic_base.h:P_ALL_TYPE::helpMarked(ListNode*, ListNode*)
   750,764 ( 0.12%)  /usr/include/c++/13.2.1/bits/atomic_base.h:P_ALL_TYPE::remove(ListNode*)
   750,764 ( 0.12%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   750,764 ( 0.12%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_Deque_iterator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   747,870 ( 0.12%)  /usr/src/debug/glibc/glibc/elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x
   747,807 ( 0.12%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:NotifyNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<NotifyNode, UpdateNode*, InsNode*, long>(int, UpdateNode*, InsNode*, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   738,390 ( 0.12%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_Vector_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   738,390 ( 0.12%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_Vector_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   738,390 ( 0.12%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::vector() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   738,390 ( 0.12%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::vector() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   734,551 ( 0.12%)  /usr/include/c++/13.2.1/bits/vector.tcc:void std::vector<InsNode*, std::allocator<InsNode*> >::_M_realloc_insert<InsNode*>(__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >, InsNode*&&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   727,596 ( 0.11%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::_S_max_size(std::allocator<DelNode*> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   723,951 ( 0.11%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<PredecessorNode*> >::allocate(unsigned long, void const*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   723,951 ( 0.11%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_S_max_size(std::allocator<PredecessorNode*> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   720,160 ( 0.11%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::initThread(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   697,138 ( 0.11%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_create_nodes(PredecessorNode***, PredecessorNode***) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   697,138 ( 0.11%)  ???:0x0000000000158ac0 [/usr/lib/libc.so.6]
   684,296 ( 0.11%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyDescNode>::add(NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   682,584 ( 0.11%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::retire<PredecessorNode>(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   680,034 ( 0.11%)  /usr/include/c++/13.2.1/bits/atomic_base.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::isQuiescent(int)
   680,034 ( 0.11%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   680,017 ( 0.11%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::getGuard(int, bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   671,000 ( 0.11%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<NotifyDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::retire(int, NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   670,325 ( 0.11%)  FomitchevRuppert/../trieNodeTypes.h:PredecessorNode::PredecessorNode(long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   664,551 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_Vector_impl::~_Vector_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   664,551 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_Vector_impl::~_Vector_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   660,814 ( 0.10%)  FomitchevRuppert/../trieNodeTypes.h:UpdateNode::UpdateNode(long, UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   646,752 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::size() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   644,848 ( 0.10%)  FomitchevRuppert/ListNode.h:ListNode::ListNode() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::atomic<UpdateNode*>::store(UpdateNode*, std::memory_order)
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<PredecessorNode**>::allocate(unsigned long, void const*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_allocate_map(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_deallocate_map(PredecessorNode***, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_S_buffer_size() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_pair.h:std::pair<std::_Rb_tree_const_iterator<PredecessorNode*>, bool>::pair<std::_Rb_tree_iterator<PredecessorNode*>&, bool&, true>(std::_Rb_tree_iterator<PredecessorNode*>&, bool&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   643,512 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_Node_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   637,450 ( 0.10%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:NotifyDescNode* allocator_new<NotifyDescNode>::allocate<PredecessorNode*>(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   637,450 ( 0.10%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:NotifyDescNode* record_manager_single_type<NotifyDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::allocate<PredecessorNode*>(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   631,591 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   619,896 ( 0.10%)  /usr/include/c++/13.2.1/bits/atomic_base.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpRemove(ListNode*, ListNode*)
   619,896 ( 0.10%)  /usr/include/c++/13.2.1/bits/atomic_base.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpRemove(RU_ALL_Node*, RU_ALL_Node*)
   616,699 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_destroy_node(std::_Rb_tree_node<PredecessorNode*>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   605,360 ( 0.10%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::__atomic_base(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   604,722 ( 0.10%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_M_get_Tp_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   603,900 ( 0.10%)  /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::operator NotifyNode*() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   589,886 ( 0.09%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_allocate_node() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   564,312 ( 0.09%)  FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::first() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   563,073 ( 0.09%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::push_front(PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   563,073 ( 0.09%)  /usr/include/c++/13.2.1/bits/stl_pair.h:std::pair<std::_Rb_tree_iterator<PredecessorNode*>, bool>::pair<std::_Rb_tree_iterator<PredecessorNode*>, bool, true>(std::_Rb_tree_iterator<PredecessorNode*>&&, bool&&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   563,073 ( 0.09%)  /usr/include/c++/13.2.1/bits/stl_pair.h:std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<PredecessorNode*>*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node<PredecessorNode*>*&, std::_Rb_tree_node_base*&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   563,073 ( 0.09%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_node<PredecessorNode*>* std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_create_node<PredecessorNode* const&>(PredecessorNode* const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   562,668 ( 0.09%)  FomitchevRuppert/../trieNodeTypes.h:PredecessorNode::retire(record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   560,028 ( 0.09%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<DelNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::endOp(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   560,014 ( 0.09%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::MemoryReclamationGuard::~MemoryReclamationGuard() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   560,000 ( 0.09%)  /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::b() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   538,960 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::get<NotifyNode>(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   538,960 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, InsNode, PredecessorNode, NotifyNode>::get<NotifyNode>(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   538,960 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, PredecessorNode, NotifyNode>::get<NotifyNode>(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   537,072 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<NotifyDescNode>::deallocateAndClear(int, blockbag<NotifyDescNode>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   536,800 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<NotifyDescNode>::deallocate(int, NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   536,260 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_node<PredecessorNode*>::_M_valptr() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   523,939 ( 0.08%)  /usr/include/c++/13.2.1/atomic:std::atomic<ListNode*>::atomic(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   523,902 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_M_get_Tp_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   523,887 ( 0.08%)  /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::atomic(UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   521,976 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<PredecessorNode>::push(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   520,026 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<DelNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::isQuiescent(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   516,873 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Destroy_aux<true>::__destroy<DelNode**>(DelNode**, DelNode**) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   516,873 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Destroy_aux<true>::__destroy<InsNode**>(InsNode**, InsNode**) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   512,012 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<DelNode*, void>::value, DelNode**>::type std::__relocate_a_1<DelNode*, DelNode*>(DelNode**, DelNode**, DelNode**, std::allocator<DelNode*>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   509,447 ( 0.08%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<PredecessorNode*> >::deallocate(std::_Rb_tree_node<PredecessorNode*>*, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   509,447 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_impl_data::_Deque_impl_data() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   509,447 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::begin() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   509,447 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:PredecessorNode* allocator_new<PredecessorNode>::allocate<long>(int, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   509,447 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:PredecessorNode* record_manager_single_type<PredecessorNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::allocate<long>(int, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   505,335 ( 0.08%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::atomic<UpdateNode*>::compare_exchange_strong(UpdateNode*&, UpdateNode*, std::memory_order)
   503,250 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:NotifyDescNode* pool_none<NotifyDescNode, allocator_new<NotifyDescNode> >::get<PredecessorNode*>(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   501,900 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<PredecessorNode, pool_none<PredecessorNode, allocator_new<PredecessorNode> > >::retire(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   501,383 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   498,908 ( 0.08%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<UpdateNode*>::operator=(UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   498,612 ( 0.08%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<RU_ALL_Node*>::operator=(RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   492,261 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::remove() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   486,432 ( 0.08%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyDescNode>::computeSizeInBlocks() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   485,064 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_algobase.h:DelNode** std::__niter_base<DelNode**>(DelNode**) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   485,064 ( 0.08%)  FomitchevRuppert/../trieNodeTypes.h:NotifyNode::NotifyNode(UpdateNode*, InsNode*, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   483,468 ( 0.08%)  /usr/include/c++/13.2.1/atomic:std::atomic<ListNode*>::operator=(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   482,634 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_Tp_allocator() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   482,634 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_begin() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   482,634 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_drop_node(std::_Rb_tree_node<PredecessorNode*>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   482,634 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Rb_tree_impl<std::less<PredecessorNode*>, true>::_Rb_tree_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   482,634 ( 0.08%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::~_Rb_tree() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   482,634 ( 0.08%)  /usr/include/c++/13.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<PredecessorNode*>::_M_ptr() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   464,853 ( 0.07%)  /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::compare_exchange_strong(NotifyNode*&, NotifyNode*, std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   464,853 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:NotifyNode* allocator_new<NotifyNode>::allocate<UpdateNode*, InsNode*, long>(int, UpdateNode*, InsNode*, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   464,853 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:NotifyNode* record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::allocate<UpdateNode*, InsNode*, long>(int, UpdateNode*, InsNode*, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   461,748 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<PredecessorNode>::pop() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   458,184 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::retire<InsertDescNode>(int, InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   458,184 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::retire<RU_ALL_INS_DescNode>(int, RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   458,184 ( 0.07%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpMarked(RU_ALL_Node*, RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   458,184 ( 0.07%)  FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpMarked(ListNode*, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   458,116 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, NotifyNode>::get<NotifyNode>(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   458,116 ( 0.07%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpNotify(RU_ALL_Node*, NotifyDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   455,821 ( 0.07%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_reserve_map_at_front(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   455,821 ( 0.07%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_node<PredecessorNode*>* std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node::operator()<PredecessorNode* const&>(PredecessorNode* const&) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   444,708 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:InsertDescNode* record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::allocate<InsertDescNode, ListNode*>(int, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   444,708 ( 0.07%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RU_ALL_INS_DescNode* record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::allocate<RU_ALL_INS_DescNode, RU_ALL_Node*>(int, RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   443,034 ( 0.07%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::vector<DelNode*, std::allocator<DelNode*> >::~vector()
   443,034 ( 0.07%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::vector<InsNode*, std::allocator<InsNode*> >::~vector()
   443,034 ( 0.07%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<DelNode*>::~__new_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   443,034 ( 0.07%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<InsNode*>::~__new_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   433,278 ( 0.07%)  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_op.cc:operator delete(void*) [/usr/lib/libstdc++.so.6.0.32]
   433,260 ( 0.07%)  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) [/usr/lib/libstdc++.so.6.0.32]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_destroy_data(std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>, std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>, std::allocator<PredecessorNode*> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_header::_M_reset() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   429,008 ( 0.07%)  /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++98/tree.cc:std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) [/usr/lib/libstdc++.so.6.0.32]
   417,818 ( 0.07%)  /usr/include/c++/13.2.1/bits/stl_uninitialized.h:InsNode** std::__relocate_a<InsNode**, InsNode**, std::allocator<InsNode*> >(InsNode**, InsNode**, InsNode**, std::allocator<InsNode*>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   417,694 ( 0.07%)  /usr/include/c++/13.2.1/bits/vector.tcc:DelNode*& std::vector<DelNode*, std::allocator<DelNode*> >::emplace_back<DelNode*>(DelNode*&&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   409,472 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::add(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   404,376 ( 0.06%)  /usr/include/c++/13.2.1/bits/move.h:STATUS* std::__addressof<STATUS>(STATUS&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   404,220 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::_S_relocate(DelNode**, DelNode**, DelNode**, std::allocator<DelNode*>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   403,030 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<ListNode*>::__atomic_base(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,990 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<UpdateNode*>::__atomic_base(UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,600 ( 0.06%)  FomitchevRuppert/RU_ALL.h:NotifyDescNode::NotifyDescNode(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,195 ( 0.06%)  /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::store(UpdateNode*, std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,195 ( 0.06%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,195 ( 0.06%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,195 ( 0.06%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<PredecessorNode**>::deallocate(PredecessorNode***, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,195 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_put_node(std::_Rb_tree_node<PredecessorNode*>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   402,195 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:PredecessorNode* pool_none<PredecessorNode, allocator_new<PredecessorNode> >::get<long>(int, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   401,520 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<PredecessorNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::retire(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   400,020 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >::quiescenceIsPerRecordType() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   387,032 ( 0.06%)  ???:0x00000000000989c0 [/usr/lib/libc.so.6]
   384,123 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::_M_check_len(unsigned long, char const*) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   384,009 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:NotifyNode* pool_none<NotifyNode, allocator_new<NotifyNode> >::get<UpdateNode*, InsNode*, long>(int, UpdateNode*, InsNode*, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   381,444 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<PredecessorNode>::deallocate(int, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   377,328 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpMarked(ListNode*, ListNode*)
   377,328 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::insert(ListNode*)
   377,328 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::remove(ListNode*)
   377,328 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpMarked(RU_ALL_Node*, RU_ALL_Node*)
   377,328 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::insert(RU_ALL_Node*)
   377,328 ( 0.06%)  /usr/include/c++/13.2.1/bits/atomic_base.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::remove(RU_ALL_Node*)
   375,382 ( 0.06%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_allocate_node()
   375,382 ( 0.06%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_deallocate_node(PredecessorNode**)
   375,382 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_impl::_Deque_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   375,382 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::begin() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   375,382 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::end() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   375,382 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_end() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   375,382 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_mbegin() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   375,382 ( 0.06%)  FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::first(PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   365,112 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<DelNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   363,906 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::_S_max_size(std::allocator<InsNode*> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   360,018 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >>::getReclaimers(int, void**, int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   350,376 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsertDescNode>::push(InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   350,376 ( 0.06%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<RU_ALL_INS_DescNode>::push(RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   350,324 ( 0.06%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >::operator-(long) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   348,569 ( 0.05%)  /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::atomic(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   348,569 ( 0.05%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   348,569 ( 0.05%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   348,569 ( 0.05%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<DelNode*, DelNode*, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   348,569 ( 0.05%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<InsNode*, InsNode*, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   348,569 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::size() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   336,900 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::retire(int, InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   336,900 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::retire(int, RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   330,375 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<RU_ALL_INS_DescNode>::remove() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   330,333 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::remove() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   323,472 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::size() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   323,424 ( 0.05%)  /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::compare_exchange_strong(STATUS&, STATUS, std::memory_order, std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   323,424 ( 0.05%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::atomic<STATUS>::compare_exchange_strong(STATUS&, STATUS, std::memory_order, std::memory_order)
   323,376 ( 0.05%)  /usr/include/c++/13.2.1/bits/move.h:DelNode*&& std::forward<DelNode*>(std::remove_reference<DelNode*>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   323,376 ( 0.05%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<DelNode*>::allocate(unsigned long, void const*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   323,376 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::back() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   322,299 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyDescNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,756 ( 0.05%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<DelNode*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<DelNode*, false>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,756 ( 0.05%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<InsNode*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<InsNode*, false>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,756 ( 0.05%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<PredecessorNode**>::~__new_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,756 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_erase(std::_Rb_tree_node<PredecessorNode*>*)'2 [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,756 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_header::_Rb_tree_header() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,756 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::operator==(std::_Rb_tree_iterator<PredecessorNode*> const&, std::_Rb_tree_iterator<PredecessorNode*> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,756 ( 0.05%)  /usr/include/c++/13.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<PredecessorNode*>::_M_addr() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   321,488 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<PredecessorNode>::deallocateAndClear(int, blockbag<PredecessorNode>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   309,948 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsertDescNode>::pop() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   309,948 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<RU_ALL_INS_DescNode>::pop() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   308,646 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyDescNode>::isFull() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   303,165 ( 0.05%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::atomic<NotifyNode*>::compare_exchange_strong(NotifyNode*&, NotifyNode*, std::memory_order)
   296,428 ( 0.05%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::find(DelNode* const&) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   296,428 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::max_size() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   295,356 ( 0.05%)  /usr/include/c++/13.2.1/bits/allocator.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_Vector_impl::~_Vector_impl()
   295,356 ( 0.05%)  /usr/include/c++/13.2.1/bits/allocator.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_Vector_impl::~_Vector_impl()
   294,943 ( 0.05%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::push_back(PredecessorNode* const&)
   294,943 ( 0.05%)  /usr/include/c++/13.2.1/bits/new_allocator.h:void std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_construct_node<PredecessorNode* const&>(std::_Rb_tree_node<PredecessorNode*>*, PredecessorNode* const&)
   294,943 ( 0.05%)  /usr/include/c++/13.2.1/bits/new_allocator.h:void std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_push_front_aux<PredecessorNode* const&>(PredecessorNode* const&)
   294,943 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::max_size() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   294,943 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_node() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   294,943 ( 0.05%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_const_iterator<PredecessorNode*>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<PredecessorNode*> const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   290,035 ( 0.05%)  FomitchevRuppert/../trieNodeTypes.h:DelNode::DelNode(long, int, UpdateNode*, long, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   289,691 ( 0.05%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:DelNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<DelNode, long, int, UpdateNode*, long, PredecessorNode*>(int, long, int, UpdateNode*, long, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   282,954 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >::difference_type __gnu_cxx::operator-<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&, __gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   274,816 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<RU_ALL_INS_DescNode>::add(RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   274,784 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::add(InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   269,520 ( 0.04%)  /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::compare_exchange_strong(STATUS&, STATUS, std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   269,520 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::retire(int, InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   269,520 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<RU_ALL_INS_DescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::retire(int, RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   269,520 ( 0.04%)  trie.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::remove(ListNode*)
   269,520 ( 0.04%)  trie.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::remove(RU_ALL_Node*)
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<NotifyNode*>::__atomic_base(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<DelNode*, DelNode*, std::__detail::_Identity, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_Hash_code_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<InsNode*, InsNode*, std::__detail::_Identity, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_Hash_code_base() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<DelNode*, false> > >::_Hashtable_alloc() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<DelNode*, false> > >::~_Hashtable_alloc() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<InsNode*, false> > >::_Hashtable_alloc() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<InsNode*, false> > >::~_Hashtable_alloc() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<DelNode*, false> >, true>::_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<InsNode*, false> >, true>::_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::deque() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_set.h:std::set<PredecessorNode*, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::set() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_set.h:std::set<PredecessorNode*, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::~set() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node::_Alloc_node(std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Rb_tree() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<DelNode*, std::hash<DelNode*>, std::equal_to<DelNode*>, std::allocator<DelNode*> >::unordered_set() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<DelNode*, std::hash<DelNode*>, std::equal_to<DelNode*>, std::allocator<DelNode*> >::~unordered_set() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<InsNode*, std::hash<InsNode*>, std::equal_to<InsNode*>, std::allocator<InsNode*> >::unordered_set() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   268,130 ( 0.04%)  /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<InsNode*, std::hash<InsNode*>, std::equal_to<InsNode*>, std::allocator<InsNode*> >::~unordered_set() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   265,171 ( 0.04%)  /usr/src/debug/glibc/glibc/elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/ld-linux-x86-64.so.2]
   263,003 ( 0.04%)  /usr/include/c++/13.2.1/atomic:std::atomic<int>::atomic(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   262,743 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<DelNode*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<DelNode*, false>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   256,082 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<InsNode*, void>::value, InsNode**>::type std::__relocate_a_1<InsNode*, InsNode*>(InsNode**, InsNode**, InsNode**, std::allocator<InsNode*>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   256,044 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:InsertDescNode* allocator_new<InsertDescNode>::allocate<ListNode*>(int, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   256,044 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:RU_ALL_INS_DescNode* allocator_new<RU_ALL_INS_DescNode>::allocate<RU_ALL_Node*>(int, RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   256,044 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:InsertDescNode* record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::allocate<ListNode*>(int, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   256,044 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:RU_ALL_INS_DescNode* record_manager_single_type<RU_ALL_INS_DescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::allocate<RU_ALL_Node*>(int, RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   242,604 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_algobase.h:InsNode** std::__niter_base<InsNode**>(InsNode**) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   242,556 ( 0.04%)  FomitchevRuppert/P_ALL.h:P_ALL_TYPE::first() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   241,317 ( 0.04%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::push_back(PredecessorNode* const&)
   241,317 ( 0.04%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:void std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_construct_node<PredecessorNode* const&>(std::_Rb_tree_node<PredecessorNode*>*, PredecessorNode* const&)
   241,317 ( 0.04%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:void std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_push_front_aux<PredecessorNode* const&>(PredecessorNode* const&)
   241,317 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<DelNode*, false> >, true>::~_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   241,317 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<InsNode*, false> >, true>::~_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   241,317 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_impl::~_Deque_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   241,317 ( 0.04%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Rb_tree_impl<std::less<PredecessorNode*>, true>::~_Rb_tree_impl() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   234,850 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   230,660 ( 0.04%)  ???:0x0000000000099240 [/usr/lib/libc.so.6]
   229,058 ( 0.04%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   229,058 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::retire<NotifyNode>(int, NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   222,387 ( 0.04%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:InsNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<InsNode, long>(int, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   215,808 ( 0.03%)  FomitchevRuppert/ListNode.h:RU_ALL_Node::RU_ALL_Node() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   215,744 ( 0.03%)  /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::store(STATUS, std::memory_order) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   215,616 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<InsertDescNode>::deallocate(int, InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   215,616 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<RU_ALL_INS_DescNode>::deallocate(int, RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   215,584 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::push_back(DelNode*&&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   214,504 ( 0.03%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_allocate_map(unsigned long)
   210,560 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<InsertDescNode, allocator_new<InsertDescNode> >::add(int, InsertDescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   208,909 ( 0.03%)  /usr/include/c++/13.2.1/bits/vector.tcc:InsNode*& std::vector<InsNode*, std::allocator<InsNode*> >::emplace_back<InsNode*>(InsNode*&&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   208,592 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> >::add(int, RU_ALL_INS_DescNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   202,310 ( 0.03%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::__atomic_base(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   202,170 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::_S_relocate(InsNode**, InsNode**, InsNode**, std::allocator<InsNode*>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   202,140 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:InsertDescNode* pool_none<InsertDescNode, allocator_new<InsertDescNode> >::get<ListNode*>(int, ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   202,140 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:RU_ALL_INS_DescNode* pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> >::get<RU_ALL_Node*>(int, RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   202,110 ( 0.03%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<DelNode*, false>::_Node_iterator_base(std::__detail::_Hash_node<DelNode*, false>*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   202,110 ( 0.03%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<DelNode*>::deallocate(DelNode**, unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   199,800 ( 0.03%)  /usr/src/debug/glibc/glibc/elf/dl-reloc.c:_dl_relocate_object [/usr/lib/ld-linux-x86-64.so.2]
   197,442 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<PredecessorNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   195,373 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:DelNode* record_manager_single_type<DelNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::allocate<long, int, UpdateNode*, long, PredecessorNode*>(int, long, int, UpdateNode*, long, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   193,512 ( 0.03%)  FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::minWrite(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   188,804 ( 0.03%)  /usr/include/c++/13.2.1/atomic:std::atomic<bool>::atomic(bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   188,776 ( 0.03%)  /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::operator=(STATUS) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   188,636 ( 0.03%)  /usr/include/c++/13.2.1/bits/atomic_base.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpNotify(RU_ALL_Node*, NotifyDescNode*)
   188,636 ( 0.03%)  /usr/include/c++/13.2.1/bits/atomic_base.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::next(PredecessorNode*, RU_ALL_Node*)
   188,636 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:DelNode* allocator_new<DelNode>::allocate<long, int, UpdateNode*, long, PredecessorNode*>(int, long, int, UpdateNode*, long, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   188,148 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::computeSizeInBlocks() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   187,691 ( 0.03%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_deallocate_map(PredecessorNode***, unsigned long)
   187,691 ( 0.03%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_node()
   187,691 ( 0.03%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_put_node(std::_Rb_tree_node<PredecessorNode*>*)
   187,691 ( 0.03%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   187,691 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_function.h:std::_Identity<PredecessorNode*>::operator()(PredecessorNode* const&) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   187,691 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_S_left(std::_Rb_tree_node_base*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   187,691 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_S_right(std::_Rb_tree_node_base*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   184,815 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<PredecessorNode>::isFull() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   180,333 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyNode>::isEmpty() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   175,344 ( 0.03%)  /usr/include/c++/13.2.1/atomic:std::atomic<RU_ALL_Node*>::atomic(RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   175,318 ( 0.03%)  /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::atomic(DelNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   175,214 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::operator-(long) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   175,162 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_M_allocate(unsigned long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   175,162 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyNode>::push(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   168,425 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:DelNode* pool_none<DelNode, allocator_new<DelNode> >::get<long, int, UpdateNode*, long, PredecessorNode*>(int, long, int, UpdateNode*, long, PredecessorNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   168,425 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<NotifyNode, pool_none<NotifyNode, allocator_new<NotifyNode> > >::retire(int, NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   165,132 ( 0.03%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyNode>::remove() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,808 ( 0.03%)  /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator=(UpdateNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,736 ( 0.03%)  /usr/include/c++/13.2.1/bits/move.h:InsNode*&& std::forward<InsNode*>(std::remove_reference<InsNode*>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,736 ( 0.03%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<InsNode*>::allocate(unsigned long, void const*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,736 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::back() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,712 ( 0.03%)  /usr/include/c++/13.2.1/atomic:std::atomic<RU_ALL_Node*>::operator=(RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,712 ( 0.03%)  FomitchevRuppert/RU_ALL.h:RU_ALL_INS_DescNode::RU_ALL_INS_DescNode(RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,712 ( 0.03%)  FomitchevRuppert/list_extension.h:InsertDescNode::InsertDescNode(ListNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,688 ( 0.03%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::count(DelNode* const&) const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   161,688 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_M_get_Tp_allocator() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<DelNode*>, true>::_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<InsNode*>, true>::_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<DelNode*>, true>::_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<InsNode*>, true>::_Hashtable_ebo_helper() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/move.h:bool& std::forward<bool&>(std::remove_reference<bool&>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/move.h:bool&& std::forward<bool>(std::remove_reference<bool>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/move.h:std::_Rb_tree_iterator<PredecessorNode*>& std::forward<std::_Rb_tree_iterator<PredecessorNode*>&>(std::remove_reference<std::_Rb_tree_iterator<PredecessorNode*>&>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/move.h:std::_Rb_tree_iterator<PredecessorNode*>&& std::forward<std::_Rb_tree_iterator<PredecessorNode*> >(std::remove_reference<std::_Rb_tree_iterator<PredecessorNode*> >::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/move.h:std::_Rb_tree_node<PredecessorNode*>*& std::forward<std::_Rb_tree_node<PredecessorNode*>*&>(std::remove_reference<std::_Rb_tree_node<PredecessorNode*>*&>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/move.h:std::_Rb_tree_node_base*& std::forward<std::_Rb_tree_node_base*&>(std::remove_reference<std::_Rb_tree_node_base*&>::type&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<PredecessorNode*>::~__new_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<PredecessorNode*> >::~__new_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<std::__detail::_Hash_node<DelNode*, false> >::~__new_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<std::__detail::_Hash_node<InsNode*, false> >::~__new_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_Tp_allocator() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   160,878 ( 0.03%)  /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_key_compare<std::less<PredecessorNode*> >::_Rb_tree_key_compare() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   155,383 ( 0.02%)  /usr/src/debug/glibc/glibc/elf/dl-lookup.c:check_match [/usr/lib/ld-linux-x86-64.so.2]
   154,951 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyNode>::pop() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   152,810 ( 0.02%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::operator=(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   149,860 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::rotateEpochBags(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   149,467 ( 0.02%)  /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
   148,346 ( 0.02%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<bool>::__atomic_base(bool) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   148,258 ( 0.02%)  /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::max_size() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   148,214 ( 0.02%)  /usr/include/c++/13.2.1/bits/new_allocator.h:void std::vector<DelNode*, std::allocator<DelNode*> >::_M_realloc_insert<DelNode*>(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >, DelNode*&&)
   141,519 ( 0.02%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::difference_type __gnu_cxx::operator-<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >(__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&, __gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   141,477 ( 0.02%)  /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   141,477 ( 0.02%)  /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >::operator*() const [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   137,364 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyNode>::add(NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   134,880 ( 0.02%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<RU_ALL_Node*>::__atomic_base(RU_ALL_Node*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   134,860 ( 0.02%)  /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::atomic(STATUS) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   134,860 ( 0.02%)  /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<DelNode*>::__atomic_base(DelNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   134,780 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<InsNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::get<InsNode>(InsNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   134,740 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::retire(int, NotifyNode*) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   134,740 ( 0.02%)  FomitchevRuppert/../trieNodeTypes.h:NotifyNode::retire(record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>&) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   131,951 ( 0.02%)  /usr/src/debug/glibc/glibc/elf/do-rel.h:_dl_relocate_object
   128,155 ( 0.02%)  FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::MinReg64(int) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   128,041 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:InsNode* allocator_new<InsNode>::allocate<long>(int, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   128,041 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:InsNode* record_manager_single_type<InsNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::allocate<long>(int, long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   124,258 ( 0.02%)  ???:0x000000000009ac70 [/usr/lib/libc.so.6]
   124,245 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsertDescNode>::isFull() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   124,218 ( 0.02%)  FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<RU_ALL_INS_DescNode>::isFull() [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   121,338 ( 0.02%)  FomitchevRuppert/../trieNodeTypes.h:InsNode::InsNode(long) [/home/jakjm/Desktop/JeremyTrie/Implementations/trietest]
   121,266 ( 0.02%)  /usr/include/c++/13.2.1/bits/alloc_traits.h:void std::vector<DelNode*, std::allocator<DelNode*> >::_M_realloc_insert<DelNode*>(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >, DelNode*&&)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
Ir               

-- line 105 ----------------------------------------
      .           // should be too.
      .           # define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
      .               __is_trivial(T) && __is_assignable(T&, U)
      .           #endif
      .           
      .             template<typename _InputIterator, typename _ForwardIterator>
      .               _GLIBCXX20_CONSTEXPR
      .               _ForwardIterator
     28 ( 0.00%)      __do_uninit_copy(_InputIterator __first, _InputIterator __last,
      .           		     _ForwardIterator __result)
      .               {
      8 ( 0.00%)        _ForwardIterator __cur = __result;
      .                 __try
      .           	{
    197 ( 0.00%)  	  for (; __first != __last; ++__first, (void)++__cur)
    589 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >(__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > > const&, __gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > > const&) (19x)
    165 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >::operator++() (15x)
    150 ( 0.00%)  	    std::_Construct(std::__addressof(*__cur), *__first);
  2,670 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Construct<TrieNode, TrieNode const&>(TrieNode*, TrieNode const&) (15x)
    105 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >::operator*() const (15x)
     90 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:TrieNode* std::__addressof<TrieNode>(TrieNode&) (15x)
      4 ( 0.00%)  	  return __cur;
      .           	}
      .                 __catch(...)
      .           	{
      .           	  std::_Destroy(__result, __cur);
      .           	  __throw_exception_again;
      .           	}
     12 ( 0.00%)      }
      .           
      .             template<bool _TrivialValueTypes>
      .               struct __uninitialized_copy
      .               {
      .                 template<typename _InputIterator, typename _ForwardIterator>
      .                   static _ForwardIterator
     24 ( 0.00%)          __uninit_copy(_InputIterator __first, _InputIterator __last,
      .           		      _ForwardIterator __result)
     32 ( 0.00%)  	{ return std::__do_uninit_copy(__first, __last, __result); }
  4,018 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:TrieNode* std::__do_uninit_copy<__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*>(__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, __gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*) (4x)
      .               };
      .           
      .             template<>
      .               struct __uninitialized_copy<true>
      .               {
      .                 template<typename _InputIterator, typename _ForwardIterator>
      .                   static _ForwardIterator
      .                   __uninit_copy(_InputIterator __first, _InputIterator __last,
-- line 145 ----------------------------------------
-- line 155 ----------------------------------------
      .              *  @param  __last   An input iterator.
      .              *  @param  __result An output iterator.
      .              *  @return   __result + (__first - __last)
      .              *
      .              *  Like copy(), but does not require an initialized output range.
      .             */
      .             template<typename _InputIterator, typename _ForwardIterator>
      .               inline _ForwardIterator
     24 ( 0.00%)      uninitialized_copy(_InputIterator __first, _InputIterator __last,
      .           		       _ForwardIterator __result)
      .               {
      .                 typedef typename iterator_traits<_InputIterator>::value_type
      .           	_ValueType1;
      .                 typedef typename iterator_traits<_ForwardIterator>::value_type
      .           	_ValueType2;
      .           
      .                 // _ValueType1 must be trivially-copyable to use memmove, so don't
      .                 // bother optimizing to std::copy if it isn't.
      .                 // XXX Unnecessary because std::copy would check it anyway?
      4 ( 0.00%)        const bool __can_memmove = __is_trivial(_ValueType1);
      .           
      .           #if __cplusplus < 201103L
      .                 typedef typename iterator_traits<_InputIterator>::reference _From;
      .           #else
      .                 using _From = decltype(*__first);
      .           #endif
      4 ( 0.00%)        const bool __assignable
      .           	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
      .           
      .                 return std::__uninitialized_copy<__can_memmove && __assignable>::
     24 ( 0.00%)  	__uninit_copy(__first, __last, __result);
  4,074 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:TrieNode* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*>(__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, __gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*) (4x)
      8 ( 0.00%)      }
      .           
      .             /// @cond undocumented
      .           
      .             template<typename _ForwardIterator, typename _Tp>
      .               _GLIBCXX20_CONSTEXPR void
      .               __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
      .           		     const _Tp& __x)
      .               {
-- line 194 ----------------------------------------
-- line 358 ----------------------------------------
      .           	  __throw_exception_again;
      .           	}
      .               }
      .           
      .           #if _GLIBCXX_HOSTED
      .             template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
     28 ( 0.00%)      __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      .           			   _ForwardIterator __result, allocator<_Tp>&)
      .               {
      .           #ifdef __cpp_lib_is_constant_evaluated
      .                 if (std::is_constant_evaluated())
      .           	return std::__do_uninit_copy(__first, __last, __result);
      .           #endif
     24 ( 0.00%)        return std::uninitialized_copy(__first, __last, __result);
  4,138 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:TrieNode* std::uninitialized_copy<__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*>(__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, __gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*) (4x)
      8 ( 0.00%)      }
      .           #endif
      .           
      .             template<typename _InputIterator, typename _ForwardIterator,
      .           	   typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
      .               __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      .           			   _ForwardIterator __result, _Allocator& __alloc)
-- line 382 ----------------------------------------
-- line 629 ----------------------------------------
      .               };
      .           
      .             template<bool _TrivialValueType>
      .               struct __uninitialized_default_n_1
      .               {
      .                 template<typename _ForwardIterator, typename _Size>
      .           	_GLIBCXX20_CONSTEXPR
      .                   static _ForwardIterator
     25 ( 0.00%)          __uninit_default_n(_ForwardIterator __first, _Size __n)
      .                   {
     10 ( 0.00%)  	  _ForwardIterator __cur = __first;
      .           	  __try
      .           	    {
    107 ( 0.00%)  	      for (; __n > 0; --__n, (void) ++__cur)
    115 ( 0.00%)  		std::_Construct(std::__addressof(*__cur));
    390 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Construct<TrieNode>(TrieNode*) (15x)
     90 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:TrieNode* std::__addressof<TrieNode>(TrieNode&) (15x)
      5 ( 0.00%)  	      return __cur;
      .           	    }
      .           	  __catch(...)
      .           	    {
      .           	      std::_Destroy(__first, __cur);
      .           	      __throw_exception_again;
      .           	    }
     10 ( 0.00%)  	}
      .               };
      .           
      .             template<>
      .               struct __uninitialized_default_n_1<true>
      .               {
      .                 template<typename _ForwardIterator, typename _Size>
      .           	_GLIBCXX20_CONSTEXPR
      .                   static _ForwardIterator
-- line 659 ----------------------------------------
-- line 688 ----------------------------------------
      .           	__uninit_default(__first, __last);
      .               }
      .           
      .             // __uninitialized_default_n
      .             // Fills [first, first + n) with value-initialized value_types.
      .             template<typename _ForwardIterator, typename _Size>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
     25 ( 0.00%)      __uninitialized_default_n(_ForwardIterator __first, _Size __n)
      .               {
      .           #ifdef __cpp_lib_is_constant_evaluated
      .                 if (std::is_constant_evaluated())
      .           	return __uninitialized_default_n_1<false>::
      .           		 __uninit_default_n(__first, __n);
      .           #endif
      .           
      .                 typedef typename iterator_traits<_ForwardIterator>::value_type
      .           	_ValueType;
      .                 // See uninitialized_fill_n for the conditions for using std::fill_n.
      5 ( 0.00%)        constexpr bool __can_fill
      .           	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
      .           
      .                 return __uninitialized_default_n_1<__is_trivial(_ValueType)
      .           					 && __can_fill>::
     25 ( 0.00%)  	__uninit_default_n(__first, __n);
    285 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:LatestList* std::__uninitialized_default_n_1<false>::__uninit_default_n<LatestList*, unsigned long>(LatestList*, unsigned long) (1x)
     10 ( 0.00%)      }
      .           
      .           
      .             // __uninitialized_default_a
      .             // Fills [first, last) with value_types constructed by the allocator
      .             // alloc, with no arguments passed to the construct call.
      .             template<typename _ForwardIterator, typename _Allocator>
      .               void
      .               __uninitialized_default_a(_ForwardIterator __first,
-- line 721 ----------------------------------------
-- line 769 ----------------------------------------
      .               }
      .           
      .           #if _GLIBCXX_HOSTED
      .             // __uninitialized_default_n_a specialization for std::allocator,
      .             // which ignores the allocator and value-initializes the elements.
      .             template<typename _ForwardIterator, typename _Size, typename _Tp>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
     30 ( 0.00%)      __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
      .           				allocator<_Tp>&)
     35 ( 0.00%)      { return std::__uninitialized_default_n(__first, __n); }
    719 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:TrieNode* std::__uninitialized_default_n<TrieNode*, unsigned long>(TrieNode*, unsigned long) (4x)
      .           #endif
      .           
      .             template<bool _TrivialValueType>
      .               struct __uninitialized_default_novalue_1
      .               {
      .                 template<typename _ForwardIterator>
      .           	static void
      .           	__uninit_default_novalue(_ForwardIterator __first,
-- line 787 ----------------------------------------
-- line 1062 ----------------------------------------
      .           #endif // C++17
      .           
      .           #if __cplusplus >= 201103L
      .             /// @cond undocumented
      .           
      .             template<typename _Tp, typename _Up, typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline void
     21 ( 0.00%)      __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
      .           			_Allocator& __alloc)
      .               noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
      .           			 __dest, std::move(*__orig)))
      .           	     && noexcept(std::allocator_traits<_Allocator>::destroy(
      .           			    __alloc, std::__addressof(*__orig))))
      .               {
      .                 typedef std::allocator_traits<_Allocator> __traits;
     24 ( 0.00%)        __traits::construct(__alloc, __dest, std::move(*__orig));
     18 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:std::remove_reference<std::vector<TrieNode, std::allocator<TrieNode> >&>::type&& std::move<std::vector<TrieNode, std::allocator<TrieNode> >&>(std::vector<TrieNode, std::allocator<TrieNode> >&) (3x)
     30 ( 0.00%)        __traits::destroy(__alloc, std::__addressof(*__orig));
     18 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:std::vector<TrieNode, std::allocator<TrieNode> >* std::__addressof<std::vector<TrieNode, std::allocator<TrieNode> > >(std::vector<TrieNode, std::allocator<TrieNode> >&) (3x)
     12 ( 0.00%)      }
      .           
      .             // This class may be specialized for specific types.
      .             // Also known as is_trivially_relocatable.
      .             template<typename _Tp, typename = void>
      .               struct __is_bitwise_relocatable
      .               : is_trivial<_Tp> { };
      .           
      .             template <typename _InputIterator, typename _ForwardIterator,
      .           	    typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
     48 ( 0.00%)      __relocate_a_1(_InputIterator __first, _InputIterator __last,
      .           		   _ForwardIterator __result, _Allocator& __alloc)
      .               noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
      .           					       std::addressof(*__first),
      .           					       __alloc)))
      .               {
      .                 typedef typename iterator_traits<_InputIterator>::value_type
      .           	_ValueType;
      .                 typedef typename iterator_traits<_ForwardIterator>::value_type
      .           	_ValueType2;
      .                 static_assert(std::is_same<_ValueType, _ValueType2>::value,
      .           	  "relocation is only possible for values of the same type");
     12 ( 0.00%)        _ForwardIterator __cur = __result;
     39 ( 0.00%)        for (; __first != __last; ++__first, (void)++__cur)
     39 ( 0.00%)  	std::__relocate_object_a(std::__addressof(*__cur),
    864 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:void std::__relocate_object_a<std::vector<TrieNode, std::allocator<TrieNode> >, std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >(std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > >&) (3x)
     36 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:std::vector<TrieNode, std::allocator<TrieNode> >* std::__addressof<std::vector<TrieNode, std::allocator<TrieNode> > >(std::vector<TrieNode, std::allocator<TrieNode> >&) (6x)
      .           				 std::__addressof(*__first), __alloc);
      6 ( 0.00%)        return __cur;
     18 ( 0.00%)      }
      .           
      .           #if _GLIBCXX_HOSTED
      .             template <typename _Tp, typename _Up>
      .               _GLIBCXX20_CONSTEXPR
      .               inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
282,982 ( 0.04%)      __relocate_a_1(_Tp* __first, _Tp* __last,
      .           		   _Tp* __result,
      .           		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
      .               {
161,704 ( 0.03%)        ptrdiff_t __count = __last - __first;
 80,852 ( 0.01%)        if (__count > 0)
      .           	{
      .           #ifdef __cpp_lib_is_constant_evaluated
      .           	  if (std::is_constant_evaluated())
      .           	    {
      .           	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
      .           	      // resolves to the non-trivial overload above.
      .           	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
      .           	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
      .           	      return __out.base();
      .           	    }
      .           #endif
      .           	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
      .           	}
161,704 ( 0.03%)        return __result + __count;
 80,852 ( 0.01%)      }
      .           #endif
      .           
      .             template <typename _InputIterator, typename _ForwardIterator,
      .           	    typename _Allocator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _ForwardIterator
363,888 ( 0.06%)      __relocate_a(_InputIterator __first, _InputIterator __last,
      .           		 _ForwardIterator __result, _Allocator& __alloc)
      .               noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
      .           				     std::__niter_base(__last),
      .           				     std::__niter_base(__result), __alloc)))
      .               {
687,344 ( 0.11%)        return std::__relocate_a_1(std::__niter_base(__first),
512,012 ( 0.08%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:std::enable_if<std::__is_bitwise_relocatable<DelNode*, void>::value, DelNode**>::type std::__relocate_a_1<DelNode*, DelNode*>(DelNode**, DelNode**, DelNode**, std::allocator<DelNode*>&) (26,948x)
485,064 ( 0.08%)  => /usr/include/c++/13.2.1/bits/stl_algobase.h:DelNode** std::__niter_base<DelNode**>(DelNode**) (80,844x)
      .           				 std::__niter_base(__last),
      .           				 std::__niter_base(__result), __alloc);
202,160 ( 0.03%)      }
      .           
      .             /// @endcond
      .           #endif // C++11
      .           
      .             /// @} group memory
      .           
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace
-- line 1159 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_construct.h
--------------------------------------------------------------------------------
Ir                 

-- line 101 ----------------------------------------
        .             /**
        .              * Constructs an object in existing memory by invoking an allocated
        .              * object's constructor with an initializer.
        .              */
        .           #if __cplusplus >= 201103L
        .             template<typename _Tp, typename... _Args>
        .               _GLIBCXX20_CONSTEXPR
        .               inline void
      182 ( 0.00%)      _Construct(_Tp* __p, _Args&&... __args)
        .               {
        .           #if __cplusplus >= 202002L
        .                 if (std::__is_constant_evaluated())
        .           	{
        .           	  // Allow std::_Construct to be used in constant expressions.
        .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
        .           	  return;
        .           	}
        .           #endif
      295 ( 0.00%)        ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
      105 ( 0.00%)  => /usr/include/c++/13.2.1/new:operator new(unsigned long, void*) (15x)
       90 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../trieNodeTypes.h:TrieNode::TrieNode() (15x)
      129 ( 0.00%)      }
        .           #else
        .             template<typename _T1, typename _T2>
        .               inline void
        .               _Construct(_T1* __p, const _T2& __value)
        .               {
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 402. wrong new expression in [some_]allocator::construct
        .                 ::new(static_cast<void*>(__p)) _T1(__value);
-- line 128 ----------------------------------------
-- line 138 ----------------------------------------
        .               _GLIBCXX20_CONSTEXPR void
        .               _Destroy(_ForwardIterator __first, _ForwardIterator __last);
        .           
        .             /**
        .              * Destroy the object pointed to by a pointer type.
        .              */
        .             template<typename _Tp>
        .               _GLIBCXX14_CONSTEXPR inline void
       16 ( 0.00%)      _Destroy(_Tp* __pointer)
        .               {
        .           #if __cplusplus > 201703L
        .                 std::destroy_at(__pointer);
        .           #else
       12 ( 0.00%)        __pointer->~_Tp();
      972 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::~vector() (4x)
        .           #endif
       12 ( 0.00%)      }
        .           
        .             template<bool>
        .               struct _Destroy_aux
        .               {
        .                 template<typename _ForwardIterator>
        .           	static _GLIBCXX20_CONSTEXPR void
        5 ( 0.00%)  	__destroy(_ForwardIterator __first, _ForwardIterator __last)
        .           	{
       20 ( 0.00%)  	  for (; __first != __last; ++__first)
       20 ( 0.00%)  	    std::_Destroy(std::__addressof(*__first));
    1,012 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Destroy<std::vector<TrieNode, std::allocator<TrieNode> > >(std::vector<TrieNode, std::allocator<TrieNode> >*) (4x)
       24 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:std::vector<TrieNode, std::allocator<TrieNode> >* std::__addressof<std::vector<TrieNode, std::allocator<TrieNode> > >(std::vector<TrieNode, std::allocator<TrieNode> >&) (4x)
        4 ( 0.00%)  	}
        .               };
        .           
        .             template<>
        .               struct _Destroy_aux<true>
        .               {
        .                 template<typename _ForwardIterator>
        .                   static void
1,033,830 ( 0.16%)          __destroy(_ForwardIterator, _ForwardIterator) { }
        .               };
        .           
        .             /**
        .              * Destroy a range of objects.  If the value_type of the object has
        .              * a trivial destructor, the compiler should optimize all of this
        .              * away, otherwise the objects' destructors must be invoked.
        .              */
        .             template<typename _ForwardIterator>
        .               _GLIBCXX20_CONSTEXPR inline void
  738,455 ( 0.12%)      _Destroy(_ForwardIterator __first, _ForwardIterator __last)
        .               {
        .                 typedef typename iterator_traits<_ForwardIterator>::value_type
        .                                  _Value_type;
        .           #if __cplusplus >= 201103L
        .                 // A deleted destructor is trivial, this ensures we reject such types:
        .                 static_assert(is_destructible<_Value_type>::value,
        .           		    "value type is destructible");
        .           #endif
        .           #if __cplusplus >= 202002L
        .                 if (std::__is_constant_evaluated())
        .           	return std::_Destroy_aux<false>::__destroy(__first, __last);
        .           #endif
        .                 std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  738,455 ( 0.12%)  	__destroy(__first, __last);
  516,873 ( 0.08%)  => /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Destroy_aux<true>::__destroy<InsNode**>(InsNode**, InsNode**) (73,839x)
  443,073 ( 0.07%)      }
        .           
        .             template<bool>
        .               struct _Destroy_n_aux
        .               {
        .                 template<typename _ForwardIterator, typename _Size>
        .           	static _GLIBCXX20_CONSTEXPR _ForwardIterator
        .           	__destroy_n(_ForwardIterator __first, _Size __count)
        .           	{
-- line 205 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/P_ALL.h
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           #pragma once
      .           using std::string;
      .           //An implementation of Eric Ruppert and Michhail Fomitchev's Lock-Free Linked List
      .           //Specifically made for the P_ALL which is an unsorted linked list
      .           class P_ALL_TYPE{
      .               public:
      .                   ListNode tail, head; //Head, tail of the linked list. 
      .               public:
     11 ( 0.00%)          P_ALL_TYPE() : tail(), head(){
    124 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/ListNode.h:ListNode::ListNode() (2x)
      6 ( 0.00%)              head.successor.store((uintptr_t)&tail);
      3 ( 0.00%)          }
      3 ( 0.00%)          ~P_ALL_TYPE(){ 
      3 ( 0.00%)          }
      .                   //Precondition: prev.successor was <delNode, DelFlag> at an earlier point, and delNode is Marked.
241,317 ( 0.04%)          uintptr_t helpMarked(ListNode *prev, ListNode *delNode){
134,065 ( 0.02%)              ListNode *next = (ListNode*)((uintptr_t)delNode->successor & NEXT_MASK);
1,233,398 ( 0.19%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (26,813x)
 80,439 ( 0.01%)              uintptr_t expected = (uintptr_t)delNode + DelFlag;
 53,626 ( 0.01%)              uintptr_t result = expected;
134,065 ( 0.02%)              prev->successor.compare_exchange_strong(result, (uintptr_t)next);
      .                       
134,065 ( 0.02%)              if(result == expected)return (uintptr_t)next;
      .                       else return result;
134,065 ( 0.02%)          }
      .                   //Precondition: prev.successor was <delNode, DelFlag> at an earlier point.
241,317 ( 0.04%)          uintptr_t helpRemove(ListNode *prev, ListNode *delNode){
160,878 ( 0.03%)              delNode->backlink = prev;
1,957,349 ( 0.31%)  => /usr/include/c++/13.2.1/atomic:std::atomic<ListNode*>::operator=(ListNode*) (26,813x)
107,252 ( 0.02%)              uintptr_t succ = delNode->successor.load(); //The value of delNode's successor pointer
 80,439 ( 0.01%)              uintptr_t state = succ & STATUS_MASK;
 80,439 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
      .           
 80,439 ( 0.01%)              while(state != Marked){ //While delNode is not marked...
 53,626 ( 0.01%)                  if(state == DelFlag){ //Help with deletion of its successor, if it is flagged....
      .                               succ = helpRemove(delNode, (ListNode*)next);
      .                           }
      .                           else{ //Attempt to mark the node if the status was normal...
 80,439 ( 0.01%)                      uintptr_t markedSuccessor = (uintptr_t)next + Marked;
 53,626 ( 0.01%)                      succ = next;
134,065 ( 0.02%)                      delNode->successor.compare_exchange_strong(succ, markedSuccessor); //Try to update from <next, Normal> to <next, Marked>
107,252 ( 0.02%)                      if(succ == next)break; //The CAS succeeded!
      .                           }
      .                           state = succ & STATUS_MASK;
      .                           next = succ & NEXT_MASK;
      .                       }
187,691 ( 0.03%)              succ = helpMarked(prev, delNode);
4,638,649 ( 0.73%)  => FomitchevRuppert/P_ALL.h:P_ALL_TYPE::helpMarked(ListNode*, ListNode*) (26,813x)
 26,813 ( 0.00%)              return succ;
134,065 ( 0.02%)          }
      .           
      .                   
214,504 ( 0.03%)          void remove(ListNode *node){
 80,439 ( 0.01%)              ListNode *curr = &head;
107,252 ( 0.02%)              uintptr_t succ = curr->successor;
1,233,398 ( 0.19%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (26,813x)
 80,439 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
 80,439 ( 0.01%)              uint64_t state = succ & STATUS_MASK;
161,013 ( 0.03%)              while((ListNode*)next != &tail){
 67,100 ( 0.01%)                  if(state == Normal){
100,650 ( 0.02%)                      if((ListNode*)next != node){ //Advance...
 13,474 ( 0.00%)                          curr = (ListNode*)next;
 26,948 ( 0.00%)                          succ = curr->successor;
309,902 ( 0.05%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (6,737x)
 20,211 ( 0.00%)                          next = succ & NEXT_MASK;
 26,948 ( 0.00%)                          state = succ & STATUS_MASK;
      .                               }
      .                               else{
 53,626 ( 0.01%)                          succ = (uintptr_t)node;
160,878 ( 0.03%)                          curr->successor.compare_exchange_strong(succ, (uintptr_t)node + DelFlag);
107,252 ( 0.02%)                          if(succ == (uintptr_t)node){
160,878 ( 0.03%)                              helpRemove(curr, node);
11,610,029 ( 1.83%)  => FomitchevRuppert/P_ALL.h:P_ALL_TYPE::helpRemove(ListNode*, ListNode*) (26,813x)
 26,813 ( 0.00%)                              return;
      .                                   }
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                           }
      .                           else if(state == DelFlag){
      .                               succ = helpRemove(curr, (ListNode*)next);
      .                               if((ListNode*)next == node)return;
-- line 86 ----------------------------------------
-- line 95 ----------------------------------------
      .                               if(next == (uintptr_t)curr){ //Help remove curr from the list.
      .                                   succ = helpMarked(prev, curr);
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                               curr = prev;
      .                           }
      .                       }
134,065 ( 0.02%)          }
      .           
      .                   //List traversal algorithms here: 
      .                   //Returns the head of the linked list, or null if the list is empty...
 80,852 ( 0.01%)          ListNode *first(){
121,278 ( 0.02%)              return next(&head);
1,300,371 ( 0.20%)  => FomitchevRuppert/P_ALL.h:P_ALL_TYPE::next(ListNode*) (20,213x)
 40,426 ( 0.01%)          }
336,185 ( 0.05%)          ListNode *next(ListNode *node){            
268,948 ( 0.04%)              uintptr_t succ = node->successor;
3,092,902 ( 0.49%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (67,237x)
201,711 ( 0.03%)              ListNode *next = (ListNode*)(succ & NEXT_MASK);
201,711 ( 0.03%)              if(next == &tail){
 53,900 ( 0.01%)                  return nullptr;
      .                       }
 40,287 ( 0.01%)              else return (ListNode*)next;
134,474 ( 0.02%)          }
      .                   ListNode *next(ListNode *node, uint64_t &state){            
      .                       uintptr_t succ = node->successor;
      .                       ListNode *next = (ListNode*)(succ & NEXT_MASK);
      .                       state = succ & STATUS_MASK;
      .                       if(next == &tail){
      .                           return nullptr;
      .                       }
      .                       else return (ListNode*)next;
-- line 125 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/atomic
--------------------------------------------------------------------------------
Ir                 

-- line 68 ----------------------------------------
        .           
        .             public:
        .               atomic() noexcept = default;
        .               ~atomic() noexcept = default;
        .               atomic(const atomic&) = delete;
        .               atomic& operator=(const atomic&) = delete;
        .               atomic& operator=(const atomic&) volatile = delete;
        .           
  188,804 ( 0.03%)      constexpr atomic(bool __i) noexcept : _M_base(__i) { }
  148,346 ( 0.02%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<bool>::__atomic_base(bool) (13,486x)
        .           
        .               bool
   10,980 ( 0.00%)      operator=(bool __i) noexcept
   12,810 ( 0.00%)      { return _M_base.operator=(__i); }
  115,290 ( 0.02%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<bool>::operator=(bool) (1,830x)
        .           
        .               bool
        .               operator=(bool __i) volatile noexcept
        .               { return _M_base.operator=(__i); }
        .           
   16,488 ( 0.00%)      operator bool() const noexcept
   20,610 ( 0.00%)      { return _M_base.load(); }
        .           
        .               operator bool() const volatile noexcept
        .               { return _M_base.load(); }
        .           
        .               bool
        .               is_lock_free() const noexcept { return _M_base.is_lock_free(); }
        .           
        .               bool
-- line 95 ----------------------------------------
-- line 225 ----------------------------------------
        .           
        .               public:
        .                 atomic() = default;
        .                 ~atomic() noexcept = default;
        .                 atomic(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) volatile = delete;
        .           
   94,402 ( 0.01%)        constexpr atomic(_Tp __i) noexcept : _M_i(__i)
        .                 {
        .           #if __cplusplus >= 201402L && __has_builtin(__builtin_clear_padding)
        .           	if _GLIBCXX17_CONSTEXPR (__atomic_impl::__maybe_has_padding<_Tp>())
        .           	  __builtin_clear_padding(std::__addressof(_M_i));
        .           #endif
   40,458 ( 0.01%)        }
        .           
  957,908 ( 0.15%)        operator _Tp() const noexcept
1,436,862 ( 0.23%)        { return load(); }
6,944,833 ( 1.09%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::load(std::memory_order) const (239,477x)
        .           
        .                 operator _Tp() const volatile noexcept
        .                 { return load(); }
        .           
        .                 _Tp
   67,420 ( 0.01%)        operator=(_Tp __i) noexcept
  121,356 ( 0.02%)        { store(__i); return __i; }
  444,972 ( 0.07%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::store(STATUS, std::memory_order) (13,484x)
        .           
        .                 _Tp
        .                 operator=(_Tp __i) volatile noexcept
        .                 { store(__i); return __i; }
        .           
        .                 bool
        .                 is_lock_free() const noexcept
        .                 {
-- line 257 ----------------------------------------
-- line 269 ----------------------------------------
        .                 }
        .           
        .           #if __cplusplus >= 201703L
        .                 static constexpr bool is_always_lock_free
        .           	= __atomic_always_lock_free(sizeof(_M_i), 0);
        .           #endif
        .           
        .                 void
   94,388 ( 0.01%)        store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
        .                 {
   67,420 ( 0.01%)  	__atomic_store(std::__addressof(_M_i),
   80,904 ( 0.01%)  => /usr/include/c++/13.2.1/bits/move.h:STATUS* std::__addressof<STATUS>(STATUS&) (13,484x)
        .           		       __atomic_impl::__clear_padding(__i),
        .           		       int(__m));
   53,936 ( 0.01%)        }
        .           
        .                 void
        .                 store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
        .                 {
        .           	__atomic_store(std::__addressof(_M_i),
        .           		       __atomic_impl::__clear_padding(__i),
        .           		       int(__m));
        .                 }
        .           
        .                 _Tp
1,915,816 ( 0.30%)        load(memory_order __m = memory_order_seq_cst) const noexcept
        .                 {
        .           	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
  478,954 ( 0.08%)  	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
1,436,862 ( 0.23%)  	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
1,436,862 ( 0.23%)  => /usr/include/c++/13.2.1/bits/move.h:STATUS const* std::__addressof<STATUS const>(STATUS const&) (239,477x)
  478,954 ( 0.08%)  	return *__ptr;
1,197,385 ( 0.19%)        }
        .           
        .                 _Tp
        .                 load(memory_order __m = memory_order_seq_cst) const volatile noexcept
        .                 {
        .                   alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
        .           	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
        .           	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
        .           	return *__ptr;
-- line 307 ----------------------------------------
-- line 354 ----------------------------------------
        .           
        .                 bool
        .                 compare_exchange_weak(_Tp& __e, _Tp __i,
        .           		     memory_order __m = memory_order_seq_cst) volatile noexcept
        .                 { return compare_exchange_weak(__e, __i, __m,
        .                                                __cmpexch_failure_order(__m)); }
        .           
        .                 bool
  134,760 ( 0.02%)        compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
        .           			      memory_order __f) noexcept
        .                 {
  121,284 ( 0.02%)  	return __atomic_impl::__compare_exchange(_M_i, __e, __i, false,
        .           						 __s, __f);
   67,380 ( 0.01%)        }
        .           
        .                 bool
        .                 compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
        .           			      memory_order __f) volatile noexcept
        .                 {
        .           	return __atomic_impl::__compare_exchange(_M_i, __e, __i, false,
        .           						 __s, __f);
        .                 }
        .           
        .                 bool
   94,332 ( 0.01%)        compare_exchange_strong(_Tp& __e, _Tp __i,
        .           			       memory_order __m = memory_order_seq_cst) noexcept
  148,236 ( 0.02%)        { return compare_exchange_strong(__e, __i, __m,
  956,796 ( 0.15%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::compare_exchange_strong(STATUS&, STATUS, std::memory_order, std::memory_order) (13,476x)
  808,560 ( 0.13%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__cmpexch_failure_order(std::memory_order) (13,476x)
   26,952 ( 0.00%)                                         __cmpexch_failure_order(__m)); }
        .           
        .                 bool
        .                 compare_exchange_strong(_Tp& __e, _Tp __i,
        .           		     memory_order __m = memory_order_seq_cst) volatile noexcept
        .                 { return compare_exchange_strong(__e, __i, __m,
        .                                                  __cmpexch_failure_order(__m)); }
        .           
        .           #if __cpp_lib_atomic_wait
-- line 389 ----------------------------------------
-- line 420 ----------------------------------------
        .                 __base_type			_M_b;
        .           
        .                 atomic() noexcept = default;
        .                 ~atomic() noexcept = default;
        .                 atomic(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) volatile = delete;
        .           
1,747,057 ( 0.27%)        constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { }
  403,030 ( 0.06%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<ListNode*>::__atomic_base(ListNode*) (40,303x)
        .           
2,361,496 ( 0.37%)        operator __pointer_type() const noexcept
2,951,870 ( 0.46%)        { return __pointer_type(_M_b); }
14,389,875 ( 2.26%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<UpdateNode*>::operator UpdateNode*() const (319,775x)
        .           
        .                 operator __pointer_type() const volatile noexcept
        .                 { return __pointer_type(_M_b); }
        .           
        .                 __pointer_type
  346,650 ( 0.05%)        operator=(__pointer_type __p) noexcept
  485,310 ( 0.08%)        { return _M_b.operator=(__p); }
  126,941 ( 0.02%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<DelNode*>::operator=(DelNode*) (2,081x)
        .           
        .                 __pointer_type
        .                 operator=(__pointer_type __p) volatile noexcept
        .                 { return _M_b.operator=(__p); }
        .           
        .                 __pointer_type
        .                 operator++(int) noexcept
        .                 {
-- line 446 ----------------------------------------
-- line 558 ----------------------------------------
        .                 { return _M_b.is_lock_free(); }
        .           
        .           #if __cplusplus >= 201703L
        .                 static constexpr bool is_always_lock_free
        .           	= ATOMIC_POINTER_LOCK_FREE == 2;
        .           #endif
        .           
        .                 void
  160,878 ( 0.03%)        store(__pointer_type __p,
        .           	    memory_order __m = memory_order_seq_cst) noexcept
  241,317 ( 0.04%)        { return _M_b.store(__p, __m); }
        .           
        .                 void
        .                 store(__pointer_type __p,
        .           	    memory_order __m = memory_order_seq_cst) volatile noexcept
        .                 { return _M_b.store(__p, __m); }
        .           
        .                 __pointer_type
        .                 load(memory_order __m = memory_order_seq_cst) const noexcept
-- line 576 ----------------------------------------
-- line 624 ----------------------------------------
        .           
        .                 bool
        .                 compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
        .           			      memory_order __m1,
        .           			      memory_order __m2) volatile noexcept
        .                 { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }
        .           
        .                 bool
  464,176 ( 0.07%)        compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
        .           			      memory_order __m = memory_order_seq_cst) noexcept
        .                 {
  696,264 ( 0.11%)  	return _M_b.compare_exchange_strong(__p1, __p2, __m,
1,212,660 ( 0.19%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__cmpexch_failure_order(std::memory_order) (20,211x)
        .           					    __cmpexch_failure_order(__m));
  174,066 ( 0.03%)        }
        .           
        .                 bool
        .                 compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
        .           		    memory_order __m = memory_order_seq_cst) volatile noexcept
        .                 {
        .           	return _M_b.compare_exchange_strong(__p1, __p2, __m,
        .           					    __cmpexch_failure_order(__m));
        .                 }
-- line 645 ----------------------------------------
-- line 825 ----------------------------------------
        .                 typedef __atomic_base<int> 		__base_type;
        .           
        .                 atomic() noexcept = default;
        .                 ~atomic() noexcept = default;
        .                 atomic(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) volatile = delete;
        .           
  263,003 ( 0.04%)        constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
  202,310 ( 0.03%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::__atomic_base(int) (20,231x)
        .           
        .                 using __base_type::operator __integral_type;
        .                 using __base_type::operator=;
        .           
        .           #if __cplusplus >= 201703L
        .                 static constexpr bool is_always_lock_free = ATOMIC_INT_LOCK_FREE == 2;
        .           #endif
        .               };
-- line 841 ----------------------------------------
-- line 894 ----------------------------------------
        .                 typedef __atomic_base<unsigned long> 	__base_type;
        .           
        .                 atomic() noexcept = default;
        .                 ~atomic() noexcept = default;
        .                 atomic(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) = delete;
        .                 atomic& operator=(const atomic&) volatile = delete;
        .           
  786,968 ( 0.12%)        constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }
  605,360 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::__atomic_base(unsigned long) (60,536x)
        .           
        .                 using __base_type::operator __integral_type;
        .                 using __base_type::operator=;
        .           
        .           #if __cplusplus >= 201703L
        .                 static constexpr bool is_always_lock_free = ATOMIC_LONG_LOCK_FREE == 2;
        .           #endif
        .               };
-- line 910 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_deque.h
--------------------------------------------------------------------------------
Ir                 

-- line 89 ----------------------------------------
        .             */
        .           
        .           #ifndef _GLIBCXX_DEQUE_BUF_SIZE
        .           #define _GLIBCXX_DEQUE_BUF_SIZE 512
        .           #endif
        .           
        .             _GLIBCXX_CONSTEXPR inline size_t
        .             __deque_buf_size(size_t __size)
  804,390 ( 0.13%)    { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
2,145,040 ( 0.34%)  	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
        .           
        .           
        .             /**
        .              *  @brief A deque::iterator.
        .              *
        .              *  Quite a bit of intelligence here.  Much of the functionality of
        .              *  deque is actually passed off to this class.  A deque holds two
        .              *  of these internally, marking its valid range.  Access to
-- line 106 ----------------------------------------
-- line 123 ----------------------------------------
        .           	using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;
        .               public:
        .                 typedef __iter<_Tp>				   iterator;
        .                 typedef __iter<const _Tp>				   const_iterator;
        .                 typedef __ptr_rebind<_Ptr, _Tp>			   _Elt_pointer;
        .                 typedef __ptr_rebind<_Ptr, _Elt_pointer>		   _Map_pointer;
        .           #endif
        .           
  214,504 ( 0.03%)        static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
  429,008 ( 0.07%)        { return __deque_buf_size(sizeof(_Tp)); }
1,179,772 ( 0.19%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (107,252x)
        .           
        .                 typedef std::random_access_iterator_tag	iterator_category;
        .                 typedef _Tp				value_type;
        .                 typedef _Ptr				pointer;
        .                 typedef _Ref				reference;
        .                 typedef size_t				size_type;
        .                 typedef ptrdiff_t				difference_type;
        .                 typedef _Deque_iterator			_Self;
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .                 _Elt_pointer _M_first;
        .                 _Elt_pointer _M_last;
        .                 _Map_pointer _M_node;
        .           
        .                 _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
        .                 : _M_cur(__x), _M_first(*__y),
        .           	_M_last(*__y + _S_buffer_size()), _M_node(__y) { }
        .           
  160,878 ( 0.03%)        _Deque_iterator() _GLIBCXX_NOEXCEPT
  589,886 ( 0.09%)        : _M_cur(), _M_first(), _M_last(), _M_node() { }
        .           
        .           #if __cplusplus < 201103L
        .                 // Conversion from iterator to const_iterator.
        .                 _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
        .                 : _M_cur(__x._M_cur), _M_first(__x._M_first),
        .           	_M_last(__x._M_last), _M_node(__x._M_node) { }
        .           #else
        .                 // Conversion from iterator to const_iterator.
        .                 template<typename _Iter,
        .           	       typename = _Require<is_same<_Self, const_iterator>,
        .           				   is_same<_Iter, iterator>>>
        .                  _Deque_iterator(const _Iter& __x) noexcept
        .                  : _M_cur(__x._M_cur), _M_first(__x._M_first),
        .           	 _M_last(__x._M_last), _M_node(__x._M_node) { }
        .           
  214,504 ( 0.03%)        _Deque_iterator(const _Deque_iterator& __x) noexcept
  429,008 ( 0.07%)         : _M_cur(__x._M_cur), _M_first(__x._M_first),
  589,886 ( 0.09%)  	 _M_last(__x._M_last), _M_node(__x._M_node) { }
        .           
        .                 _Deque_iterator& operator=(const _Deque_iterator&) = default;
        .           #endif
        .           
        .                 iterator
        .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
        .                 { return iterator(_M_cur, _M_node); }
        .           
-- line 178 ----------------------------------------
-- line 255 ----------------------------------------
        .                 { return *(*this + __n); }
        .           
        .                 /**
        .                  *  Prepares to traverse new_node.  Sets everything except
        .                  *  _M_cur, which should therefore be set by the caller
        .                  *  immediately afterwards, based on _M_first and _M_last.
        .                  */
        .                 void
  482,634 ( 0.08%)        _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
        .                 {
  241,317 ( 0.04%)  	_M_node = __new_node;
  321,756 ( 0.05%)  	_M_first = *__new_node;
  563,073 ( 0.09%)  	_M_last = _M_first + difference_type(_S_buffer_size());
1,367,463 ( 0.22%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_S_buffer_size() (80,439x)
  321,756 ( 0.05%)        }
        .           
        .                 _GLIBCXX_NODISCARD
        .                 friend bool
        .                 operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        .                 { return __x._M_cur == __y._M_cur; }
        .           
        .                 // Note: we also provide overloads whose operands are of the same type in
        .                 // order to avoid ambiguous overload resolution when std::rel_ops
-- line 276 ----------------------------------------
-- line 362 ----------------------------------------
        .           	operator>=(const _Self& __x,
        .           		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        .           	_GLIBCXX_NOEXCEPT
        .           	{ return !(__x < __y); }
        .           #endif // three-way comparison
        .           
        .                 _GLIBCXX_NODISCARD
        .                 friend difference_type
  134,065 ( 0.02%)        operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        .                 {
   53,626 ( 0.01%)  	return difference_type(_S_buffer_size())
  455,821 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_S_buffer_size() (26,813x)
  402,195 ( 0.06%)  	  * (__x._M_node - __y._M_node - bool(__x._M_node))
  214,504 ( 0.03%)  	  + (__x._M_cur - __x._M_first)
  214,504 ( 0.03%)  	  + (__y._M_last - __y._M_cur);
   53,626 ( 0.01%)        }
        .           
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // According to the resolution of DR179 not only the various comparison
        .                 // operators but also operator- must accept mixed iterator/const_iterator
        .                 // parameters.
        .                 template<typename _RefR, typename _PtrR>
        .           	_GLIBCXX_NODISCARD
        .           	friend difference_type
-- line 384 ----------------------------------------
-- line 450 ----------------------------------------
        .           
        .                 allocator_type
        .                 get_allocator() const _GLIBCXX_NOEXCEPT
        .                 { return allocator_type(_M_get_Tp_allocator()); }
        .           
        .                 typedef _Deque_iterator<_Tp, _Tp&, _Ptr>	  iterator;
        .                 typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;
        .           
  134,065 ( 0.02%)        _Deque_base()
   80,439 ( 0.01%)        : _M_impl()
1,689,219 ( 0.27%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_impl::_Deque_impl() (26,813x)
  214,504 ( 0.03%)        { _M_initialize_map(0); }
13,139,440 ( 2.07%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_initialize_map(unsigned long) (26,813x)
        .           
        .                 _Deque_base(size_t __num_elements)
        .                 : _M_impl()
        .                 { _M_initialize_map(__num_elements); }
        .           
        .                 _Deque_base(const allocator_type& __a, size_t __num_elements)
        .                 : _M_impl(__a)
        .                 { _M_initialize_map(__num_elements); }
-- line 468 ----------------------------------------
-- line 508 ----------------------------------------
        .           
        .                 struct _Deque_impl_data
        .                 {
        .           	_Map_pointer _M_map;
        .           	size_t _M_map_size;
        .           	iterator _M_start;
        .           	iterator _M_finish;
        .           
  107,252 ( 0.02%)  	_Deque_impl_data() _GLIBCXX_NOEXCEPT
  321,756 ( 0.05%)  	: _M_map(), _M_map_size(), _M_start(), _M_finish()
  750,764 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_Deque_iterator() (53,626x)
   80,439 ( 0.01%)  	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	_Deque_impl_data(const _Deque_impl_data&) = default;
        .           	_Deque_impl_data&
        .           	operator=(const _Deque_impl_data&) = default;
        .           
        .           	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
        .           	: _Deque_impl_data(__x)
-- line 526 ----------------------------------------
-- line 534 ----------------------------------------
        .           	  // information used by TBAA.
        .           	  std::swap(*this, __x);
        .           	}
        .                 };
        .           
        .                 // This struct encapsulates the implementation of the std::deque
        .                 // standard container and at the same time makes use of the EBO
        .                 // for empty allocators.
  241,317 ( 0.04%)        struct _Deque_impl
        .                 : public _Tp_alloc_type, public _Deque_impl_data
        .                 {
  214,504 ( 0.03%)  	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
        .           	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
   80,439 ( 0.01%)  	: _Tp_alloc_type()
1,260,211 ( 0.20%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_impl_data::_Deque_impl_data() (26,813x)
   80,439 ( 0.01%)  	{ }
        .           
        .           	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        .           	: _Tp_alloc_type(__a)
        .           	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	_Deque_impl(_Deque_impl&&) = default;
        .           
-- line 556 ----------------------------------------
-- line 560 ----------------------------------------
        .           
        .           	_Deque_impl(_Deque_impl&& __d, _Tp_alloc_type&& __a)
        .           	: _Tp_alloc_type(std::move(__a)), _Deque_impl_data(std::move(__d))
        .           	{ }
        .           #endif
        .                 };
        .           
        .                 _Tp_alloc_type&
   80,439 ( 0.01%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   80,439 ( 0.01%)        { return this->_M_impl; }
        .           
        .                 const _Tp_alloc_type&
  241,317 ( 0.04%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  241,317 ( 0.04%)        { return this->_M_impl; }
        .           
        .                 _Map_alloc_type
  268,130 ( 0.04%)        _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
  643,512 ( 0.10%)        { return _Map_alloc_type(_M_get_Tp_allocator()); }
  321,756 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_Tp_allocator() const (53,626x)
        .           
        .                 _Ptr
  214,504 ( 0.03%)        _M_allocate_node()
        .                 {
        .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
  268,130 ( 0.04%)  	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
  589,886 ( 0.09%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (53,626x)
  107,252 ( 0.02%)        }
        .           
        .                 void
  268,130 ( 0.04%)        _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
        .                 {
        .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
  375,382 ( 0.06%)  	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
  589,886 ( 0.09%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (53,626x)
  160,878 ( 0.03%)        }
        .           
        .                 _Map_pointer
  241,317 ( 0.04%)        _M_allocate_map(size_t __n)
        .                 {
  187,691 ( 0.03%)  	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  670,325 ( 0.11%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_map_allocator() const (26,813x)
   53,626 ( 0.01%)  	return _Map_alloc_traits::allocate(__map_alloc, __n);
  160,878 ( 0.03%)        }
        .           
        .                 void
  241,317 ( 0.04%)        _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
        .                 {
  241,317 ( 0.04%)  	_Map_alloc_type __map_alloc = _M_get_map_allocator();
  670,325 ( 0.11%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_map_allocator() const (26,813x)
        .           	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
  160,878 ( 0.03%)        }
        .           
        .                 void _M_initialize_map(size_t);
        .                 void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
        .                 void _M_destroy_nodes(_Map_pointer __nstart,
        .           			    _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT;
        .                 enum { _S_initial_map_size = 8 };
        .           
        .                 _Deque_impl _M_impl;
        .               };
        .           
        .             template<typename _Tp, typename _Alloc>
  107,252 ( 0.02%)      _Deque_base<_Tp, _Alloc>::
        .               ~_Deque_base() _GLIBCXX_NOEXCEPT
        .               {
  107,252 ( 0.02%)        if (this->_M_impl._M_map)
        .           	{
  187,691 ( 0.03%)  	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
8,151,012 ( 1.28%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_destroy_nodes(PredecessorNode***, PredecessorNode***) (26,813x)
   53,626 ( 0.01%)  			   this->_M_impl._M_finish._M_node + 1);
  214,504 ( 0.03%)  	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
4,477,701 ( 0.70%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_deallocate_map(PredecessorNode***, unsigned long) (26,813x)
        .           	}
  160,878 ( 0.03%)      }
  509,447 ( 0.08%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_impl::~_Deque_impl() (26,813x)
        .           
        .             /**
        .              *  @brief Layout storage.
        .              *  @param  __num_elements  The count of T's for which to allocate space
        .              *                          at first.
        .              *  @return   Nothing.
        .              *
        .              *  The initial underlying memory layout is a bit complicated...
        .             */
        .             template<typename _Tp, typename _Alloc>
        .               void
  241,317 ( 0.04%)      _Deque_base<_Tp, _Alloc>::
        .               _M_initialize_map(size_t __num_elements)
        .               {
  214,504 ( 0.03%)        const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
  294,943 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (26,813x)
        .           				  + 1);
        .           
  241,317 ( 0.04%)        this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
  348,569 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (26,813x)
   80,439 ( 0.01%)  					   size_t(__num_nodes + 2));
  214,504 ( 0.03%)        this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
3,888,316 ( 0.61%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_allocate_map(unsigned long) (26,813x)
        .           
        .                 // For "small" maps (needing less than _M_map_size nodes), allocation
        .                 // starts in the middle elements and grows outwards.  So nstart may be
        .                 // the beginning of _M_map, but for small maps it may be as far in as
        .                 // _M_map+3.
        .           
  107,252 ( 0.02%)        _Map_pointer __nstart = (this->_M_impl._M_map
  134,065 ( 0.02%)  			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
  134,065 ( 0.02%)        _Map_pointer __nfinish = __nstart + __num_nodes;
        .           
        .                 __try
  160,878 ( 0.03%)  	{ _M_create_nodes(__nstart, __nfinish); }
3,566,768 ( 0.56%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_create_nodes(PredecessorNode***, PredecessorNode***) (26,813x)
        .                 __catch(...)
        .           	{
        .           	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
        .           	  this->_M_impl._M_map = _Map_pointer();
        .           	  this->_M_impl._M_map_size = 0;
        .           	  __throw_exception_again;
        .           	}
        .           
  160,878 ( 0.03%)        this->_M_impl._M_start._M_set_node(__nstart);
1,099,333 ( 0.17%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_M_set_node(PredecessorNode***) (26,813x)
  187,691 ( 0.03%)        this->_M_impl._M_finish._M_set_node(__nfinish - 1);
1,099,333 ( 0.17%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_M_set_node(PredecessorNode***) (26,813x)
  107,252 ( 0.02%)        this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
  107,252 ( 0.02%)        this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   53,626 ( 0.01%)  					+ __num_elements
  214,504 ( 0.03%)  					% __deque_buf_size(sizeof(_Tp)));
  294,943 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::__deque_buf_size(unsigned long) (26,813x)
  187,691 ( 0.03%)      }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               void
  187,691 ( 0.03%)      _Deque_base<_Tp, _Alloc>::
        .               _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
        .               {
        .                 _Map_pointer __cur;
        .                 __try
        .           	{
  268,130 ( 0.04%)  	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
  134,065 ( 0.02%)  	    *__cur = this->_M_allocate_node();
2,869,630 ( 0.45%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_allocate_node() (26,813x)
        .           	}
        .                 __catch(...)
        .           	{
        .           	  _M_destroy_nodes(__nstart, __cur);
        .           	  __throw_exception_again;
        .           	}
  107,252 ( 0.02%)      }
        .           
        .             template<typename _Tp, typename _Alloc>
        .               void
  160,878 ( 0.03%)      _Deque_base<_Tp, _Alloc>::
        .               _M_destroy_nodes(_Map_pointer __nstart,
        .           		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
        .               {
  375,382 ( 0.06%)        for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
  321,756 ( 0.05%)  	_M_deallocate_node(*__n);
7,185,744 ( 1.13%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_deallocate_node(PredecessorNode**) (53,626x)
  107,252 ( 0.02%)      }
        .           
        .             /**
        .              *  @brief  A standard container using fixed-size memory allocation and
        .              *  constant-time manipulation of elements at either end.
        .              *
        .              *  @ingroup sequences
        .              *
        .              *  @tparam _Tp  Type of element.
-- line 709 ----------------------------------------
-- line 847 ----------------------------------------
        .               public:
        .                 // [23.2.1.1] construct/copy/destroy
        .                 // (assign() and get_allocator() are also listed in this section)
        .           
        .                 /**
        .                  *  @brief  Creates a %deque with no elements.
        .                  */
        .           #if __cplusplus >= 201103L
  268,130 ( 0.04%)        deque() = default;
15,257,667 ( 2.40%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_Deque_base() (26,813x)
        .           #else
        .                 deque() { }
        .           #endif
        .           
        .                 /**
        .                  *  @brief  Creates a %deque with no elements.
        .                  *  @param  __a  An allocator object.
        .                  */
-- line 863 ----------------------------------------
-- line 1019 ----------------------------------------
        .           	}
        .           #endif
        .           
        .                 /**
        .                  *  The dtor only erases the elements, and note that if the elements
        .                  *  themselves are pointers, the pointed-to memory is not touched in any
        .                  *  way.  Managing the pointer is the user's responsibility.
        .                  */
  214,504 ( 0.03%)        ~deque()
  804,390 ( 0.13%)        { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
13,969,363 ( 2.20%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::~_Deque_base() (26,813x)
  992,081 ( 0.16%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::begin() (26,813x)
  992,081 ( 0.16%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::end() (26,813x)
  429,008 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_destroy_data(std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>, std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>, std::allocator<PredecessorNode*> const&) (26,813x)
  160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_Tp_allocator() (26,813x)
        .           
        .                 /**
        .                  *  @brief  %Deque assignment operator.
        .                  *  @param  __x  A %deque of identical element and allocator types.
        .                  *
        .                  *  All the elements of @a x are copied.
        .                  *
        .                  *  The newly-created %deque uses a copy of the allocator object used
-- line 1036 ----------------------------------------
-- line 1143 ----------------------------------------
        .           
        .                 // iterators
        .                 /**
        .                  *  Returns a read/write iterator that points to the first element in the
        .                  *  %deque.  Iteration is done in ordinary element order.
        .                  */
        .                 _GLIBCXX_NODISCARD
        .                 iterator
  134,065 ( 0.02%)        begin() _GLIBCXX_NOEXCEPT
  241,317 ( 0.04%)        { return this->_M_impl._M_start; }
  616,699 ( 0.10%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_Deque_iterator(std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**> const&) (26,813x)
        .           
        .                 /**
        .                  *  Returns a read-only (constant) iterator that points to the first
        .                  *  element in the %deque.  Iteration is done in ordinary element order.
        .                  */
        .                 _GLIBCXX_NODISCARD
        .                 const_iterator
        .                 begin() const _GLIBCXX_NOEXCEPT
-- line 1160 ----------------------------------------
-- line 1162 ----------------------------------------
        .           
        .                 /**
        .                  *  Returns a read/write iterator that points one past the last
        .                  *  element in the %deque.  Iteration is done in ordinary
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD
        .                 iterator
  134,065 ( 0.02%)        end() _GLIBCXX_NOEXCEPT
  241,317 ( 0.04%)        { return this->_M_impl._M_finish; }
  616,699 ( 0.10%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_Deque_iterator(std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**> const&) (26,813x)
        .           
        .                 /**
        .                  *  Returns a read-only (constant) iterator that points one past
        .                  *  the last element in the %deque.  Iteration is done in
        .                  *  ordinary element order.
        .                  */
        .                 _GLIBCXX_NODISCARD
        .                 const_iterator
-- line 1179 ----------------------------------------
-- line 1260 ----------------------------------------
        .                 crend() const noexcept
        .                 { return const_reverse_iterator(this->_M_impl._M_start); }
        .           #endif
        .           
        .                 // [23.2.1.2] capacity
        .                 /**  Returns the number of elements in the %deque.  */
        .                 _GLIBCXX_NODISCARD
        .                 size_type
  107,252 ( 0.02%)        size() const _GLIBCXX_NOEXCEPT
  241,317 ( 0.04%)        { return this->_M_impl._M_finish - this->_M_impl._M_start; }
1,528,341 ( 0.24%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::operator-(std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**> const&, std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**> const&) (26,813x)
        .           
        .                 /**  Returns the size() of the largest possible %deque.  */
        .                 _GLIBCXX_NODISCARD
        .                 size_type
  107,252 ( 0.02%)        max_size() const _GLIBCXX_NOEXCEPT
  187,691 ( 0.03%)        { return _S_max_size(_M_get_Tp_allocator()); }
1,179,772 ( 0.19%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_S_max_size(std::allocator<PredecessorNode*> const&) (26,813x)
  160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_get_Tp_allocator() const (26,813x)
        .           
        .           #if __cplusplus >= 201103L
        .                 /**
        .                  *  @brief  Resizes the %deque to the specified number of elements.
        .                  *  @param  __new_size  Number of elements the %deque should contain.
        .                  *
        .                  *  This function will %resize the %deque to the specified
        .                  *  number of elements.  If the number is smaller than the
-- line 1283 ----------------------------------------
-- line 1493 ----------------------------------------
        .                  *  @param  __x  Data to be added.
        .                  *
        .                  *  This is a typical stack operation.  The function creates an
        .                  *  element at the front of the %deque and assigns the given
        .                  *  data to it.  Due to the nature of a %deque this operation
        .                  *  can be done in constant time.
        .                  */
        .                 void
  160,878 ( 0.03%)        push_front(const value_type& __x)
        .                 {
  160,878 ( 0.03%)  	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
        .           	  {
        .           	    _Alloc_traits::construct(this->_M_impl,
        .           				     this->_M_impl._M_start._M_cur - 1,
        .           				     __x);
        .           	    --this->_M_impl._M_start._M_cur;
        .           	  }
        .           	else
  134,065 ( 0.02%)  	  _M_push_front_aux(__x);
10,591,895 ( 1.67%)  => /usr/include/c++/13.2.1/bits/deque.tcc:void std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_push_front_aux<PredecessorNode* const&>(PredecessorNode* const&) (26,813x)
  107,252 ( 0.02%)        }
        .           
        .           #if __cplusplus >= 201103L
        .                 void
        .                 push_front(value_type&& __x)
        .                 { emplace_front(std::move(__x)); }
        .           
        .                 template<typename... _Args>
        .           #if __cplusplus > 201402L
-- line 1520 ----------------------------------------
-- line 1530 ----------------------------------------
        .                  *  @param  __x  Data to be added.
        .                  *
        .                  *  This is a typical stack operation.  The function creates an
        .                  *  element at the end of the %deque and assigns the given data
        .                  *  to it.  Due to the nature of a %deque this operation can be
        .                  *  done in constant time.
        .                  */
        .                 void
  160,878 ( 0.03%)        push_back(const value_type& __x)
        .                 {
  107,252 ( 0.02%)  	if (this->_M_impl._M_finish._M_cur
   80,439 ( 0.01%)  	    != this->_M_impl._M_finish._M_last - 1)
        .           	  {
  187,691 ( 0.03%)  	    _Alloc_traits::construct(this->_M_impl,
        .           				     this->_M_impl._M_finish._M_cur, __x);
  134,065 ( 0.02%)  	    ++this->_M_impl._M_finish._M_cur;
        .           	  }
        .           	else
        .           	  _M_push_back_aux(__x);
  134,065 ( 0.02%)        }
        .           
        .           #if __cplusplus >= 201103L
        .                 void
        .                 push_back(value_type&& __x)
        .                 { emplace_back(std::move(__x)); }
        .           
        .                 template<typename... _Args>
        .           #if __cplusplus > 201402L
-- line 1557 ----------------------------------------
-- line 1868 ----------------------------------------
        .                 {
        .           	if (__n > _S_max_size(__a))
        .           	  __throw_length_error(
        .           	      __N("cannot create std::deque larger than max_size()"));
        .           	return __n;
        .                 }
        .           
        .                 static size_type
  187,691 ( 0.03%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        .                 {
  214,504 ( 0.03%)  	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
   26,813 ( 0.00%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
  160,878 ( 0.03%)  	return (std::min)(__diffmax, __allocmax);
  375,382 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (26,813x)
  134,065 ( 0.02%)        }
        .           
        .                 // called by the second initialize_dispatch above
        .                 ///@{
        .                 /**
        .                  *  @brief Fills the deque with whatever is in [first,last).
        .                  *  @param  __first  An input iterator.
        .                  *  @param  __last  An input iterator.
        .                  *  @return   Nothing.
-- line 1889 ----------------------------------------
-- line 2079 ----------------------------------------
        .                 // Called by ~deque().
        .                 // NB: Doesn't deallocate the nodes.
        .                 template<typename _Alloc1>
        .           	void
        .           	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
        .           	{ _M_destroy_data_aux(__first, __last); }
        .           
        .                 void
  268,130 ( 0.04%)        _M_destroy_data(iterator __first, iterator __last,
        .           		      const std::allocator<_Tp>&)
        .                 {
        .           	if (!__has_trivial_destructor(value_type))
        .           	  _M_destroy_data_aux(__first, __last);
  160,878 ( 0.03%)        }
        .           
        .                 // Called by erase(q1, q2).
        .                 void
        .                 _M_erase_at_begin(iterator __pos)
        .                 {
        .           	_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
        .           	_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
        .           	this->_M_impl._M_start = __pos;
-- line 2100 ----------------------------------------
-- line 2168 ----------------------------------------
        .                 _M_reserve_map_at_back(size_type __nodes_to_add = 1)
        .                 {
        .           	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
        .           	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
        .           	  _M_reallocate_map(__nodes_to_add, false);
        .                 }
        .           
        .                 void
  134,065 ( 0.02%)        _M_reserve_map_at_front(size_type __nodes_to_add = 1)
        .                 {
  107,252 ( 0.02%)  	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
  134,065 ( 0.02%)  				       - this->_M_impl._M_map))
        .           	  _M_reallocate_map(__nodes_to_add, true);
   80,439 ( 0.01%)        }
        .           
        .                 void
        .                 _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);
        .                 ///@}
        .           
        .           #if __cplusplus >= 201103L
        .                 // Constant-time, nothrow move assignment when source object's memory
        .                 // can be moved because the allocators are equal.
-- line 2189 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../setbench/common/recordmgr/pool_none.h
--------------------------------------------------------------------------------
Ir               

-- line 35 ----------------------------------------
      .               
      .               std::string getSizeString() { return "no pool"; }
      .               /**
      .                * if the freebag contains any object, then remove one from the freebag
      .                * and return a pointer to it.
      .                * if not, then retrieve a new object from Alloc
      .                */
      .               template <typename ...Types>
786,709 ( 0.12%)      inline T* get(const int tid, Types ...args) {
      .                   MEMORY_STATS2 this->alloc->debug->addFromPool(tid, 1);
934,659 ( 0.15%)          return this->alloc->allocate(tid, args...);
2,165,791 ( 0.34%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:InsertDescNode* allocator_new<InsertDescNode>::allocate<ListNode*>(int, ListNode*) (13,476x)
242,020 ( 0.04%)      }
157,182 ( 0.02%)      inline void add(const int tid, T* ptr) {
183,379 ( 0.03%)          this->alloc->deallocate(tid, ptr);
1,452,220 ( 0.23%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<InsertDescNode>::deallocate(int, InsertDescNode*) (13,160x)
 78,591 ( 0.01%)      }
      .               inline void addMoveFullBlocks(const int tid, blockbag<T> *bag, block<T> * const predecessor) {
      .                   bag->clearWithoutFreeingElements();
      .                   // note: this will leak memory, but i believe it is only used by debraplus (which really should use a pool)
      .               }
      .               inline void addMoveFullBlocks(const int tid, blockbag<T> *bag) {
      .                   this->alloc->deallocateAndClear(tid, bag);
      .           //        T* ptr;
      .           //        while (ptr = bag->remove()) {
      .           //            add(tid, ptr);
      .           //        }
      .               }
    672 ( 0.00%)      inline void addMoveAll(const int tid, blockbag<T> *bag) {
    784 ( 0.00%)          this->alloc->deallocateAndClear(tid, bag);
    720 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<InsNode>::deallocateAndClear(int, blockbag<InsNode>*) (16x)
      .           //        T* ptr;
      .           //        while (ptr = bag->remove()) {
      .           //            add(tid, ptr);
      .           //        }
    336 ( 0.00%)      }
      .               inline int computeSize(const int tid) {
      .                   return 0;
      .               }
      .               
      .               void debugPrintStatus(const int tid) {
      .           
      .               }
      .               
    196 ( 0.00%)      void initThread(const int tid) {}
    196 ( 0.00%)      void deinitThread(const int tid) {}
      .           
     49 ( 0.00%)      pool_none(const int numProcesses, Alloc * const _alloc, debugInfo * const _debug)
     42 ( 0.00%)              : pool_interface<T, Alloc>(numProcesses, _alloc, _debug) {
  2,055 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_interface.h:pool_interface<InsertDescNode, allocator_new<InsertDescNode> >::pool_interface(int, allocator_new<InsertDescNode>*, debugInfo*) (1x)
      .                   VERBOSE DEBUG std::cout<<"constructor pool_none"<<std::endl;
     21 ( 0.00%)      }
     28 ( 0.00%)      ~pool_none() {
      .                   VERBOSE DEBUG std::cout<<"destructor pool_none"<<std::endl;
     42 ( 0.00%)      }
 31,811 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_interface.h:pool_interface<PredecessorNode, allocator_new<PredecessorNode> >::~pool_interface() (1x)
      .           };
      .           
      .           #endif
      .           

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/allocator.h
--------------------------------------------------------------------------------
Ir                 

-- line 155 ----------------------------------------
        .           	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
        .           	= true_type;
        .           #endif
        .           
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 3035. std::allocator's constructors should be constexpr
        .                 __attribute__((__always_inline__))
        .                 _GLIBCXX20_CONSTEXPR
  254,956 ( 0.04%)        allocator() _GLIBCXX_NOTHROW { }
        .           
        .                 __attribute__((__always_inline__))
        .                 _GLIBCXX20_CONSTEXPR
        .                 allocator(const allocator& __a) _GLIBCXX_NOTHROW
       21 ( 0.00%)        : __allocator_base<_Tp>(__a) { }
        .           
        .           #if __cplusplus >= 201103L
        .                 // Avoid implicit deprecation.
        .                 allocator& operator=(const allocator&) = default;
        .           #endif
        .           
        .                 template<typename _Tp1>
        .           	__attribute__((__always_inline__))
        .           	_GLIBCXX20_CONSTEXPR
   53,626 ( 0.01%)  	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
        .           
        .                 __attribute__((__always_inline__))
        .           #if __cpp_constexpr_dynamic_alloc
        .                 constexpr
        .           #endif
1,234,412 ( 0.19%)        ~allocator() _GLIBCXX_NOTHROW { }
       24 ( 0.00%)  => /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<char>::~__new_allocator() (4x)
        .           
        .           #if __cplusplus > 201703L
        .                 [[nodiscard,__gnu__::__always_inline__]]
        .                 constexpr _Tp*
        .                 allocate(size_t __n)
        .                 {
        .           	if (std::__is_constant_evaluated())
        .           	  {
-- line 192 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           public:
        .               template<typename _Tp1>
        .               struct rebind {
        .                   typedef allocator_new<_Tp1> other;
        .               };
        .               
        .               // reserve space for ONE object of type T
        .               template <typename... Types>
  907,719 ( 0.14%)      T* allocate(const int tid, Types... args) {
        .                   // allocate a new object
        .                   MEMORY_STATS {
        .                       this->debug->addAllocated(tid, 1);
        .                       VERBOSE {
        .                           if ((this->debug->getAllocated(tid) % 2000) == 0) {
        .                               debugPrintStatus(tid);
        .                           }
        .                       }
        .           //            currentAllocatedBytes += sizeof(T);
        .           //            if (currentAllocatedBytes > maxAllocatedBytes) {
        .           //                maxAllocatedBytes = currentAllocatedBytes;
        .           //            }
        .                   }
1,169,950 ( 0.18%)          return new T(args...); //(T*) malloc(sizeof(T));
2,093,113 ( 0.33%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (13,476x)
  161,712 ( 0.03%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_INS_DescNode::RU_ALL_INS_DescNode(RU_ALL_Node*) (13,476x)
  363,030 ( 0.06%)      }
  523,890 ( 0.08%)      void deallocate(const int tid, T * const p) {
        .                   // note: allocators perform the actual freeing/deleting, since
        .                   // only they know how memory was allocated.
        .                   // pools simply call deallocate() to request that it is freed.
        .                   // allocators do not invoke pool functions.
        .                   MEMORY_STATS {
        .                       this->debug->addDeallocated(tid, 1);
        .           //            currentAllocatedBytes -= sizeof(T);
        .                   }
        .           #if !defined NO_FREE
  671,433 ( 0.11%)          delete p;
1,278,290 ( 0.20%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (13,476x)
        .           #endif
  261,945 ( 0.04%)      }
      672 ( 0.00%)      void deallocateAndClear(const int tid, blockbag<T> * const bag) {
        .           #ifdef NO_FREE
        .                   bag->clearWithoutFreeingElements();
        .           #else
  367,492 ( 0.06%)          while (!bag->isEmpty()) {
  412,333 ( 0.06%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyDescNode>::isEmpty() (33,566x)
  244,472 ( 0.04%)              T* ptr = bag->remove();
2,470,018 ( 0.39%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyDescNode>::remove() (33,550x)
  366,708 ( 0.06%)              deallocate(tid, ptr);
4,428,732 ( 0.70%)  => FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<NotifyDescNode>::deallocate(int, NotifyDescNode*) (33,550x)
        .                   }
        .           #endif
      448 ( 0.00%)      }
        .               
        .               void debugPrintStatus(const int tid) {
        .           //        std::cout<</*"thread "<<tid<<" "<<*/"allocated "<<this->debug->getAllocated(tid)<<" objects of size "<<(sizeof(T));
        .           //        std::cout<<" ";
        .           ////        this->pool->debugPrintStatus(tid);
        .           //        std::cout<<std::endl;
        .               }
        .               
      196 ( 0.00%)      void initThread(const int tid) {}
      196 ( 0.00%)      void deinitThread(const int tid) {}
        .               
       42 ( 0.00%)      allocator_new(const int numProcesses, debugInfo * const _debug)
       42 ( 0.00%)              : allocator_interface<T>(numProcesses, _debug) {
       14 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_interface.h:allocator_interface<RU_ALL_INS_DescNode>::allocator_interface(int, debugInfo*) (1x)
        .                   VERBOSE DEBUG std::cout<<"constructor allocator_new"<<std::endl;
       21 ( 0.00%)      }
       28 ( 0.00%)      ~allocator_new() {
        .                   VERBOSE DEBUG std::cout<<"destructor allocator_new"<<std::endl;
       42 ( 0.00%)      }
        6 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_interface.h:allocator_interface<NotifyDescNode>::~allocator_interface() (1x)
        .           };
        .           
        .           #endif	/* ALLOC_NEW_H */
        .           

--------------------------------------------------------------------------------
-- Auto-annotated source: trietest.cpp
--------------------------------------------------------------------------------
Ir               

-- line 2 ----------------------------------------
      .           #include "common.h"
      .           #include <iostream>
      .           #include <string>
      .           #include <thread>
      .           #include <random>
      .           using std::cout;
      .           
      .           //Produces a random integer between 0 and range (inclusive).
560,000 ( 0.09%)  inline int randomNum(int range){
      .               //A random number seed that is local to this thread.
400,064 ( 0.06%)  	thread_local static std::random_device seed;
  9,963 ( 0.00%)  => /usr/include/c++/13.2.1/bits/random.h:std::random_device::random_device() (4x)
  3,543 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/atexit_thread.cc:__cxa_thread_atexit (4x)
    827 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      .           	//Random number generator using seed.
400,052 ( 0.06%)  	thread_local static std::mt19937 rng(seed());
182,124 ( 0.03%)  => /usr/include/c++/13.2.1/bits/random.h:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long) (4x)
  1,074 ( 0.00%)  => /usr/include/c++/13.2.1/bits/random.h:std::random_device::operator()() (4x)
      .           	//Ask for a distribution from this random number generator.
400,000 ( 0.06%)  	std::uniform_int_distribution<int> dist(0,range);
3,200,000 ( 0.50%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::uniform_int_distribution(int, int) (80,000x)
480,000 ( 0.08%)  	return dist(rng);
13,958,298 ( 2.20%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&) (80,000x)
400,000 ( 0.06%)  }
     28 ( 0.00%)  void randomTask2(Trie *trie, int range, int testSize, int id){
     12 ( 0.00%)      threadID(id);
     42 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (4x)
160,020 ( 0.03%)      for(int i = 0;i < testSize;++i){
160,000 ( 0.03%)          int randomN = randomNum(range);
11,435,945 ( 1.80%)  => trietest.cpp:randomNum(int) (40,000x)
120,000 ( 0.02%)          int opType = randomNum(2);
8,560,000 ( 1.35%)  => trietest.cpp:randomNum(int) (40,000x)
 80,000 ( 0.01%)          if(opType == 0){
 94,486 ( 0.01%)              trie->insert(randomN);
102,148,838 (16.08%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/trie.h:Trie::insert(long) (13,498x)
      .                   }
 53,004 ( 0.01%)          else if(opType == 1){
 92,141 ( 0.01%)              trie->remove(randomN);
329,809,808 (51.91%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/trie.h:Trie::remove(long) (13,163x)
      .                   }
      .                   else{
 80,034 ( 0.01%)              trie->predecessor(randomN);
164,069,340 (25.82%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/trie.h:Trie::predecessor(long) (13,339x)
      .                   } 
      .               }
     16 ( 0.00%)  }
     12 ( 0.00%)  void multithreadTest(int trieSize, int testSize, int numThreads){
      2 ( 0.00%)      threadID(0);
     11 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (1x)
      5 ( 0.00%)      Trie trie(trieSize);
 92,587 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/trie.h:Trie::Trie(int) (1x)
      .               std::thread *th[NUM_THREADS];
      7 ( 0.00%)      int range = (1 << trieSize) - 1; 
     47 ( 0.00%)      cout << "Random test of " << numThreads << " threads doing " << testSize << " random ops each." << std::endl;
  2,483 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (3x)
  2,092 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (3x)
  1,638 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/ostream.tcc:std::ostream::operator<<(int) (2x)
    403 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (1x)
     23 ( 0.00%)      for(int i = 1;i < numThreads;++i){
     66 ( 0.00%)          th[i] = new std::thread(randomTask2, &trie, range, testSize, i);
 11,645 ( 0.00%)  => /usr/include/c++/13.2.1/bits/std_thread.h:std::thread::thread<void (&)(Trie*, int, int, int), Trie*, int&, int&, int&, void>(void (&)(Trie*, int, int, int), Trie*&&, int&, int&, int&) (3x)
    314 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (3x)
      .               }
      6 ( 0.00%)      randomTask2(&trie, range, testSize, 0);
153,014,559 (24.08%)  => trietest.cpp:randomTask2(Trie*, int, int, int) (1x)
     17 ( 0.00%)      for(int i = 1;i < numThreads;++i){
     22 ( 0.00%)          th[i]->join();
    821 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    652 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/thread.cc:std::thread::join() (3x)
     33 ( 0.00%)          delete th[i];
    240 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (3x)
    156 ( 0.00%)  => /usr/include/c++/13.2.1/bits/std_thread.h:std::thread::~thread() (3x)
      .               }
      .           
      3 ( 0.00%)      trie.printInterpretedBits();
 26,122 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/trie.h:Trie::printInterpretedBits() (1x)
     31 ( 0.00%)      cout << "Verifying interpreted bits: " << std::to_string(trie.verifyInterpretedBits()) << std::endl;
  7,651 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/trie.h:Trie::verifyInterpretedBits(int, int) (1x)
    391 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (1x)
    486 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::ostream::operator<<(std::ostream& (*)(std::ostream&)) (1x)
    234 ( 0.00%)  => /usr/include/c++/13.2.1/bits/basic_string.h:std::__cxx11::to_string(int) (1x)
    232 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (1x)
      6 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
     12 ( 0.00%)  }
15,637,113 ( 2.46%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/trie.h:Trie::~Trie() (1x)
      .           
      .           void simpleTest(){
      .               threadID(0);
      .               Trie trie(3);
      .               cout << "Simple test." << std::endl;
      .               trie.printInterpretedBits();
      .               trie.insert(3);
      .               cout << "Inserted 3" << std::endl;
-- line 60 ----------------------------------------
-- line 78 ----------------------------------------
      .           }
      .           std::string delString(DelNode*ptr){
      .               return ptr->toString();
      .           }
      .           std::string notString(NotifyNode* ptr){
      .               return "";
      .           }
      .           
      5 ( 0.00%)  int main(int argc, char **argv){
      .               //simpleTest();
      4 ( 0.00%)      multithreadTest(3, 10000, 4);
168,800,122 (26.57%)  => trietest.cpp:multithreadTest(int, int, int) (1x)
      .               //printList();
      1 ( 0.00%)      return 0;
     12 ( 0.00%)  }  1,689 ( 0.00%)  => trietest.cpp:__static_initialization_and_destruction_0() (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir                 

-- line 1068 ----------------------------------------
        .           #if __cplusplus > 201703L && __cpp_lib_concepts
        .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
        .           #endif
        .           
        .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
        .                 : _M_current(_Iterator()) { }
        .           
        .                 explicit _GLIBCXX20_CONSTEXPR
1,343,216 ( 0.21%)        __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
2,350,628 ( 0.37%)        : _M_current(__i) { }
        .           
        .                 // Allow iterator to const_iterator conversion
        .           #if __cplusplus >= 201103L
        .                 template<typename _Iter, typename = __convertible_from<_Iter>>
        .           	_GLIBCXX20_CONSTEXPR
        .           	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
        .           	noexcept
        .           #else
-- line 1085 ----------------------------------------
-- line 1091 ----------------------------------------
        .           	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
        .           		      _Container>::__type>& __i)
        .           #endif
        .                   : _M_current(__i.base()) { }
        .           
        .                 // Forward iterator requirements
        .                 _GLIBCXX20_CONSTEXPR
        .                 reference
   80,976 ( 0.01%)        operator*() const _GLIBCXX_NOEXCEPT
  107,968 ( 0.02%)        { return *_M_current; }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 pointer
        .                 operator->() const _GLIBCXX_NOEXCEPT
        .                 { return _M_current; }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 __normal_iterator&
   20,337 ( 0.00%)        operator++() _GLIBCXX_NOEXCEPT
        .                 {
   33,895 ( 0.01%)  	++_M_current;
    6,779 ( 0.00%)  	return *this;
   13,558 ( 0.00%)        }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 __normal_iterator
        .                 operator++(int) _GLIBCXX_NOEXCEPT
        .                 { return __normal_iterator(_M_current++); }
        .           
        .                 // Bidirectional iterator requirements
        .                 _GLIBCXX20_CONSTEXPR
-- line 1121 ----------------------------------------
-- line 1149 ----------------------------------------
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 __normal_iterator&
        .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
        .                 { _M_current -= __n; return *this; }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 __normal_iterator
  161,704 ( 0.03%)        operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
  363,834 ( 0.06%)        { return __normal_iterator(_M_current - __n); }
   74,129 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::__normal_iterator(InsNode** const&) (6,739x)
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 const _Iterator&
1,048,104 ( 0.16%)        base() const _GLIBCXX_NOEXCEPT
1,048,104 ( 0.16%)        { return _M_current; }
        .               };
        .           
        .             // Note: In what follows, the left- and right-hand-side iterators are
        .             // allowed to vary in types (conceptually in cv-qualification) so that
        .             // comparison between cv-qualified and non-cv-qualified iterators be
        .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
        .             // will make overload resolution ambiguous (when in scope) if we don't
        .             // provide overloads whose operands are of the same type.  Can someone
-- line 1171 ----------------------------------------
-- line 1233 ----------------------------------------
        .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
        .               _GLIBCXX_NOEXCEPT
        .               { return __lhs.base() != __rhs.base(); }
        .           
        .             template<typename _Iterator, typename _Container>
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               inline bool
  805,512 ( 0.13%)      operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
        .               _GLIBCXX_NOEXCEPT
1,745,276 ( 0.27%)      { return __lhs.base() != __rhs.base(); }
      108 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<LatestList*, std::vector<LatestList, std::allocator<LatestList> > >::base() const (18x)
        .           
        .             // Random access iterator requirements
        .             template<typename _IteratorL, typename _IteratorR, typename _Container>
        .               _GLIBCXX_NODISCARD
        .               inline bool
        .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
        .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
        .               _GLIBCXX_NOEXCEPT
-- line 1252 ----------------------------------------
-- line 1326 ----------------------------------------
        .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
        .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
        .           #endif
        .               { return __lhs.base() - __rhs.base(); }
        .           
        .             template<typename _Iterator, typename _Container>
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
  121,296 ( 0.02%)      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
        .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
        .               _GLIBCXX_NOEXCEPT
  303,243 ( 0.05%)      { return __lhs.base() - __rhs.base(); }
   80,868 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::base() const (13,478x)
        .           
        .             template<typename _Iterator, typename _Container>
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               inline __normal_iterator<_Iterator, _Container>
        .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
        .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
        .               _GLIBCXX_NOEXCEPT
        .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_tree.h
--------------------------------------------------------------------------------
Ir               

-- line 138 ----------------------------------------
      .             };
      .           
      .             // Helper type offering value initialization guarantee on the compare functor.
      .             template<typename _Key_compare>
      .               struct _Rb_tree_key_compare
      .               {
      .                 _Key_compare		_M_key_compare;
      .           
 80,439 ( 0.01%)        _Rb_tree_key_compare()
      .                 _GLIBCXX_NOEXCEPT_IF(
      .           	is_nothrow_default_constructible<_Key_compare>::value)
      .                 : _M_key_compare()
 80,439 ( 0.01%)        { }
      .           
      .                 _Rb_tree_key_compare(const _Key_compare& __comp)
      .                 : _M_key_compare(__comp)
      .                 { }
      .           
      .           #if __cplusplus >= 201103L
      .                 // Copy constructor added for consistency with C++98 mode.
      .                 _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;
-- line 158 ----------------------------------------
-- line 165 ----------------------------------------
      .               };
      .           
      .             // Helper type to manage default initialization of node count and header.
      .             struct _Rb_tree_header
      .             {
      .               _Rb_tree_node_base	_M_header;
      .               size_t		_M_node_count; // Keeps track of size of tree.
      .           
107,252 ( 0.02%)      _Rb_tree_header() _GLIBCXX_NOEXCEPT
      .               {
 53,626 ( 0.01%)        _M_header._M_color = _S_red;
 80,439 ( 0.01%)        _M_reset();
429,008 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_header::_M_reset() (26,813x)
 80,439 ( 0.01%)      }
      .           
      .           #if __cplusplus >= 201103L
      .               _Rb_tree_header(_Rb_tree_header&& __x) noexcept
      .               {
      .                 if (__x._M_header._M_parent != nullptr)
      .           	_M_move_data(__x);
      .                 else
      .           	{
-- line 185 ----------------------------------------
-- line 198 ----------------------------------------
      .                 _M_header._M_right = __from._M_header._M_right;
      .                 _M_header._M_parent->_M_parent = &_M_header;
      .                 _M_node_count = __from._M_node_count;
      .           
      .                 __from._M_reset();
      .               }
      .           
      .               void
 80,439 ( 0.01%)      _M_reset()
      .               {
 53,626 ( 0.01%)        _M_header._M_parent = 0;
 80,439 ( 0.01%)        _M_header._M_left = &_M_header;
 80,439 ( 0.01%)        _M_header._M_right = &_M_header;
 53,626 ( 0.01%)        _M_node_count = 0;
 80,439 ( 0.01%)      }
      .             };
      .           
      .             template<typename _Val>
      .               struct _Rb_tree_node : public _Rb_tree_node_base
      .               {
      .                 typedef _Rb_tree_node<_Val>* _Link_type;
      .           
      .           #if __cplusplus < 201103L
-- line 220 ----------------------------------------
-- line 226 ----------------------------------------
      .           
      .                 const _Val*
      .                 _M_valptr() const
      .                 { return std::__addressof(_M_value_field); }
      .           #else
      .                 __gnu_cxx::__aligned_membuf<_Val> _M_storage;
      .           
      .                 _Val*
214,504 ( 0.03%)        _M_valptr()
321,756 ( 0.05%)        { return _M_storage._M_ptr(); }
804,390 ( 0.13%)  => /usr/include/c++/13.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<PredecessorNode*>::_M_ptr() (53,626x)
      .           
      .                 const _Val*
      .                 _M_valptr() const
      .                 { return _M_storage._M_ptr(); }
      .           #endif
      .               };
      .           
      .             _GLIBCXX_PURE _Rb_tree_node_base*
-- line 243 ----------------------------------------
-- line 265 ----------------------------------------
      .                 typedef _Rb_tree_iterator<_Tp>		_Self;
      .                 typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
      .                 typedef _Rb_tree_node<_Tp>*		_Link_type;
      .           
      .                 _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
      .                 : _M_node() { }
      .           
      .                 explicit
321,756 ( 0.05%)        _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
482,634 ( 0.08%)        : _M_node(__x) { }
      .           
      .                 reference
      .                 operator*() const _GLIBCXX_NOEXCEPT
      .                 { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
      .           
      .                 pointer
      .                 operator->() const _GLIBCXX_NOEXCEPT
      .                 { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
-- line 282 ----------------------------------------
-- line 307 ----------------------------------------
      .                 operator--(int) _GLIBCXX_NOEXCEPT
      .                 {
      .           	_Self __tmp = *this;
      .           	_M_node = _Rb_tree_decrement(_M_node);
      .           	return __tmp;
      .                 }
      .           
      .                 friend bool
107,252 ( 0.02%)        operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
214,504 ( 0.03%)        { return __x._M_node == __y._M_node; }
      .           
      .           #if ! __cpp_lib_three_way_comparison
      .                 friend bool
      .                 operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      .                 { return __x._M_node != __y._M_node; }
      .           #endif
      .           
      .                 _Base_ptr _M_node;
-- line 324 ----------------------------------------
-- line 342 ----------------------------------------
      .           
      .                 _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
      .                 : _M_node() { }
      .           
      .                 explicit
      .                 _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      .                 : _M_node(__x) { }
      .           
107,252 ( 0.02%)        _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
187,691 ( 0.03%)        : _M_node(__it._M_node) { }
      .           
      .                 iterator
      .                 _M_const_cast() const _GLIBCXX_NOEXCEPT
      .                 { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
      .           
      .                 reference
      .                 operator*() const _GLIBCXX_NOEXCEPT
      .                 { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
-- line 359 ----------------------------------------
-- line 517 ----------------------------------------
      .           	_Base_ptr _M_nodes;
      .           	_Rb_tree& _M_t;
      .                 };
      .           
      .                 // Functor similar to the previous one but without any pool of nodes to
      .                 // recycle.
      .                 struct _Alloc_node
      .                 {
107,252 ( 0.02%)  	_Alloc_node(_Rb_tree& __t)
160,878 ( 0.03%)  	: _M_t(__t) { }
      .           
      .           	template<typename _Arg>
      .           	  _Link_type
160,878 ( 0.03%)  	  operator()(_GLIBCXX_FWDREF(_Arg) __arg) const
294,943 ( 0.05%)  	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
11,331,091 ( 1.78%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_node<PredecessorNode*>* std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_create_node<PredecessorNode* const&>(PredecessorNode* const&) (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
      .           
      .                 private:
      .           	_Rb_tree& _M_t;
      .                 };
      .           
      .               public:
      .                 typedef _Key 				key_type;
      .                 typedef _Val 				value_type;
-- line 539 ----------------------------------------
-- line 541 ----------------------------------------
      .                 typedef const value_type* 		const_pointer;
      .                 typedef value_type& 			reference;
      .                 typedef const value_type& 		const_reference;
      .                 typedef size_t 				size_type;
      .                 typedef ptrdiff_t 			difference_type;
      .                 typedef _Alloc 				allocator_type;
      .           
      .                 _Node_allocator&
321,756 ( 0.05%)        _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
321,756 ( 0.05%)        { return this->_M_impl; }
      .           
      .                 const _Node_allocator&
      .                 _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      .                 { return this->_M_impl; }
      .           
      .                 allocator_type
      .                 get_allocator() const _GLIBCXX_NOEXCEPT
      .                 { return allocator_type(_M_get_Node_allocator()); }
      .           
      .               protected:
      .                 _Link_type
107,252 ( 0.02%)        _M_get_node()
187,691 ( 0.03%)        { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_Node_allocator() (26,813x)
      .           
      .                 void
134,065 ( 0.02%)        _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
268,130 ( 0.04%)        { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_Node_allocator() (26,813x)
      .           
      .           #if __cplusplus < 201103L
      .                 void
      .                 _M_construct_node(_Link_type __node, const value_type& __x)
      .                 {
      .           	__try
      .           	  { get_allocator().construct(__node->_M_valptr(), __x); }
      .           	__catch(...)
-- line 575 ----------------------------------------
-- line 584 ----------------------------------------
      .                 {
      .           	_Link_type __tmp = _M_get_node();
      .           	_M_construct_node(__tmp, __x);
      .           	return __tmp;
      .                 }
      .           #else
      .                 template<typename... _Args>
      .           	void
214,504 ( 0.03%)  	_M_construct_node(_Link_type __node, _Args&&... __args)
      .           	{
      .           	  __try
      .           	    {
107,252 ( 0.02%)  	      ::new(__node) _Rb_tree_node<_Val>;
187,691 ( 0.03%)  => /usr/include/c++/13.2.1/new:operator new(unsigned long, void*) (26,813x)
375,382 ( 0.06%)  	      _Alloc_traits::construct(_M_get_Node_allocator(),
670,325 ( 0.11%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_node<PredecessorNode*>::_M_valptr() (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_Node_allocator() (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
      .           				       __node->_M_valptr(),
      .           				       std::forward<_Args>(__args)...);
      .           	    }
      .           	  __catch(...)
      .           	    {
      .           	      __node->~_Rb_tree_node<_Val>();
      .           	      _M_put_node(__node);
      .           	      __throw_exception_again;
      .           	    }
160,878 ( 0.03%)  	}
      .           
      .                 template<typename... _Args>
      .           	_Link_type
134,065 ( 0.02%)  	_M_create_node(_Args&&... __args)
      .           	{
107,252 ( 0.02%)  	  _Link_type __tmp = _M_get_node();
7,523,645 ( 1.18%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_node() (26,813x)
241,317 ( 0.04%)  	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
3,083,495 ( 0.49%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:void std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_construct_node<PredecessorNode* const&>(std::_Rb_tree_node<PredecessorNode*>*, PredecessorNode* const&) (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
 26,813 ( 0.00%)  	  return __tmp;
 53,626 ( 0.01%)  	}
      .           #endif
      .           
      .                 void
160,878 ( 0.03%)        _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      .                 {
      .           #if __cplusplus < 201103L
      .           	get_allocator().destroy(__p->_M_valptr());
      .           #else
348,569 ( 0.05%)  	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
670,325 ( 0.11%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_node<PredecessorNode*>::_M_valptr() (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_Node_allocator() (26,813x)
      .           	__p->~_Rb_tree_node<_Val>();
      .           #endif
107,252 ( 0.02%)        }
      .           
      .                 void
134,065 ( 0.02%)        _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      .                 {
134,065 ( 0.02%)  	_M_destroy_node(__p);
1,501,528 ( 0.24%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_destroy_node(std::_Rb_tree_node<PredecessorNode*>*) (26,813x)
134,065 ( 0.02%)  	_M_put_node(__p);
3,566,707 ( 0.56%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_put_node(std::_Rb_tree_node<PredecessorNode*>*) (26,813x)
 80,439 ( 0.01%)        }
      .           
      .                 template<bool _MoveValue, typename _NodeGen>
      .           	_Link_type
      .           	_M_clone_node(_Link_type __x, _NodeGen& __node_gen)
      .           	{
      .           #if __cplusplus >= 201103L
      .           	  using _Vp = __conditional_t<_MoveValue,
      .           				      value_type&&,
-- line 643 ----------------------------------------
-- line 654 ----------------------------------------
      .               protected:
      .           #if _GLIBCXX_INLINE_VERSION
      .                 template<typename _Key_compare>
      .           #else
      .                 // Unused _Is_pod_comparator is kept as it is part of mangled name.
      .                 template<typename _Key_compare,
      .           	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
      .           #endif
241,317 ( 0.04%)  	struct _Rb_tree_impl
      .           	: public _Node_allocator
      .           	, public _Rb_tree_key_compare<_Key_compare>
      .           	, public _Rb_tree_header
      .           	{
      .           	  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;
      .           
214,504 ( 0.03%)  	  _Rb_tree_impl()
      .           	    _GLIBCXX_NOEXCEPT_IF(
      .           		is_nothrow_default_constructible<_Node_allocator>::value
      .           		&& is_nothrow_default_constructible<_Base_key_compare>::value )
187,691 ( 0.03%)  	  : _Node_allocator()
750,764 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_header::_Rb_tree_header() (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_key_compare<std::less<PredecessorNode*> >::_Rb_tree_key_compare() (26,813x)
 80,439 ( 0.01%)  	  { }
      .           
      .           	  _Rb_tree_impl(const _Rb_tree_impl& __x)
      .           	  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
      .           	  , _Base_key_compare(__x._M_key_compare)
      .           	  , _Rb_tree_header()
      .           	  { }
      .           
      .           #if __cplusplus < 201103L
-- line 682 ----------------------------------------
-- line 728 ----------------------------------------
      .                 _M_rightmost() _GLIBCXX_NOEXCEPT
      .                 { return this->_M_impl._M_header._M_right; }
      .           
      .                 _Const_Base_ptr
      .                 _M_rightmost() const _GLIBCXX_NOEXCEPT
      .                 { return this->_M_impl._M_header._M_right; }
      .           
      .                 _Link_type
160,878 ( 0.03%)        _M_mbegin() const _GLIBCXX_NOEXCEPT
214,504 ( 0.03%)        { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
      .           
      .                 _Link_type
214,504 ( 0.03%)        _M_begin() _GLIBCXX_NOEXCEPT
268,130 ( 0.04%)        { return _M_mbegin(); }
375,382 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_mbegin() const (53,626x)
      .           
      .                 _Const_Link_type
      .                 _M_begin() const _GLIBCXX_NOEXCEPT
      .                 {
      .           	return static_cast<_Const_Link_type>
      .           	  (this->_M_impl._M_header._M_parent);
      .                 }
      .           
      .                 _Base_ptr
160,878 ( 0.03%)        _M_end() _GLIBCXX_NOEXCEPT
214,504 ( 0.03%)        { return &this->_M_impl._M_header; }
      .           
      .                 _Const_Base_ptr
      .                 _M_end() const _GLIBCXX_NOEXCEPT
      .                 { return &this->_M_impl._M_header; }
      .           
      .                 static const _Key&
      .                 _S_key(_Const_Link_type __x)
      .                 {
-- line 760 ----------------------------------------
-- line 773 ----------------------------------------
      .           	      "comparison object must be invocable as const");
      .           # endif // C++17
      .           #endif // C++11
      .           
      .           	return _KeyOfValue()(*__x->_M_valptr());
      .                 }
      .           
      .                 static _Link_type
 80,439 ( 0.01%)        _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
107,252 ( 0.02%)        { return static_cast<_Link_type>(__x->_M_left); }
      .           
      .                 static _Const_Link_type
      .                 _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      .                 { return static_cast<_Const_Link_type>(__x->_M_left); }
      .           
      .                 static _Link_type
 80,439 ( 0.01%)        _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
107,252 ( 0.02%)        { return static_cast<_Link_type>(__x->_M_right); }
      .           
      .                 static _Const_Link_type
      .                 _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      .                 { return static_cast<_Const_Link_type>(__x->_M_right); }
      .           
      .                 static const _Key&
      .                 _S_key(_Const_Base_ptr __x)
      .                 { return _S_key(static_cast<_Const_Link_type>(__x)); }
-- line 798 ----------------------------------------
-- line 922 ----------------------------------------
      .                 _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
      .           		     const _Key& __k) const;
      .           
      .               public:
      .                 // allocation/deallocation
      .           #if __cplusplus < 201103L
      .                 _Rb_tree() { }
      .           #else
268,130 ( 0.04%)        _Rb_tree() = default;
1,447,902 ( 0.23%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Rb_tree_impl<std::less<PredecessorNode*>, true>::_Rb_tree_impl() (26,813x)
      .           #endif
      .           
      .                 _Rb_tree(const _Compare& __comp,
      .           	       const allocator_type& __a = allocator_type())
      .                 : _M_impl(__comp, _Node_allocator(__a)) { }
      .           
      .                 _Rb_tree(const _Rb_tree& __x)
      .                 : _M_impl(__x._M_impl)
-- line 938 ----------------------------------------
-- line 977 ----------------------------------------
      .                 noexcept( noexcept(
      .           	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
      .           		 std::declval<typename _Alloc_traits::is_always_equal>())) )
      .                 : _Rb_tree(std::move(__x), std::move(__a),
      .           		 typename _Alloc_traits::is_always_equal{})
      .                 { }
      .           #endif
      .           
107,252 ( 0.02%)        ~_Rb_tree() _GLIBCXX_NOEXCEPT
375,382 ( 0.06%)        { _M_erase(_M_begin()); }
7,132,836 ( 1.12%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_erase(std::_Rb_tree_node<PredecessorNode*>*) (26,813x)
509,447 ( 0.08%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Rb_tree_impl<std::less<PredecessorNode*>, true>::~_Rb_tree_impl() (26,813x)
429,008 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_begin() (26,813x)
      .           
      .                 _Rb_tree&
      .                 operator=(const _Rb_tree& __x);
      .           
      .                 // Accessors.
      .                 _Compare
      .                 key_comp() const
      .                 { return _M_impl._M_key_compare; }
      .           
      .                 iterator
187,691 ( 0.03%)        begin() _GLIBCXX_NOEXCEPT
321,756 ( 0.05%)        { return iterator(this->_M_impl._M_header._M_left); }
268,130 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<PredecessorNode*>::_Rb_tree_iterator(std::_Rb_tree_node_base*) (26,813x)
      .           
      .                 const_iterator
      .                 begin() const _GLIBCXX_NOEXCEPT
      .                 { return const_iterator(this->_M_impl._M_header._M_left); }
      .           
      .                 iterator
      .                 end() _GLIBCXX_NOEXCEPT
      .                 { return iterator(&this->_M_impl._M_header); }
-- line 1006 ----------------------------------------
-- line 1810 ----------------------------------------
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .           #if __cplusplus >= 201103L
      .               template<typename _Arg, typename _NodeGen>
      .           #else
      .               template<typename _NodeGen>
      .           #endif
      .                 typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
348,569 ( 0.05%)        _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      .                 _M_insert_(_Base_ptr __x, _Base_ptr __p,
      .           #if __cplusplus >= 201103L
      .           		 _Arg&& __v,
      .           #else
      .           		 const _Val& __v,
      .           #endif
      .           		 _NodeGen& __node_gen)
      .                 {
160,878 ( 0.03%)  	bool __insert_left = (__x != 0 || __p == _M_end()
187,691 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_end() (26,813x)
107,252 ( 0.02%)  			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
      .           							_S_key(__p)));
      .           
241,317 ( 0.04%)  	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
11,947,790 ( 1.88%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_node<PredecessorNode*>* std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node::operator()<PredecessorNode* const&>(PredecessorNode* const&) const (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
      .           
160,882 ( 0.03%)  	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
429,008 ( 0.07%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++98/tree.cc:std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) (26,813x)
  1,096 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
 53,626 ( 0.01%)  				      this->_M_impl._M_header);
134,065 ( 0.02%)  	++_M_impl._M_node_count;
160,878 ( 0.03%)  	return iterator(__z);
268,130 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<PredecessorNode*>::_Rb_tree_iterator(std::_Rb_tree_node_base*) (26,813x)
214,504 ( 0.03%)        }
      .           
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .           #if __cplusplus >= 201103L
      .               template<typename _Arg>
      .           #endif
      .               typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 1845 ----------------------------------------
-- line 1922 ----------------------------------------
      .           	    __throw_exception_again;
      .           	  }
      .           	return __top;
      .                 }
      .           
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .               void
268,130 ( 0.04%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      .               _M_erase(_Link_type __x)
      .               {
      .                 // Erase without rebalancing.
214,504 ( 0.03%)        while (__x != 0)
      .           	{
214,504 ( 0.03%)  	  _M_erase(_S_right(__x));
321,756 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_erase(std::_Rb_tree_node<PredecessorNode*>*)'2 (26,813x)
187,691 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_S_right(std::_Rb_tree_node_base*) (26,813x)
107,252 ( 0.02%)  	  _Link_type __y = _S_left(__x);
187,691 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_S_left(std::_Rb_tree_node_base*) (26,813x)
134,065 ( 0.02%)  	  _M_drop_node(__x);
5,550,869 ( 0.87%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_drop_node(std::_Rb_tree_node<PredecessorNode*>*) (26,813x)
 53,626 ( 0.01%)  	  __x = __y;
      .           	}
214,504 ( 0.03%)      }
      .           
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .               typename _Rb_tree<_Key, _Val, _KeyOfValue,
      .           		      _Compare, _Alloc>::iterator
      .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      .               _M_lower_bound(_Link_type __x, _Base_ptr __y,
      .           		   const _Key& __k)
-- line 1949 ----------------------------------------
-- line 2100 ----------------------------------------
      .               }
      .           
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      .           			   _Compare, _Alloc>::_Base_ptr,
      .           	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
      .           			   _Compare, _Alloc>::_Base_ptr>
268,130 ( 0.04%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      .               _M_get_insert_unique_pos(const key_type& __k)
      .               {
      .                 typedef pair<_Base_ptr, _Base_ptr> _Res;
107,252 ( 0.02%)        _Link_type __x = _M_begin();
429,008 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_begin() (26,813x)
107,252 ( 0.02%)        _Base_ptr __y = _M_end();
187,691 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_end() (26,813x)
 26,813 ( 0.00%)        bool __comp = true;
107,252 ( 0.02%)        while (__x != 0)
      .           	{
      .           	  __y = __x;
      .           	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
      .           	  __x = __comp ? _S_left(__x) : _S_right(__x);
      .           	}
134,065 ( 0.02%)        iterator __j = iterator(__y);
268,130 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<PredecessorNode*>::_Rb_tree_iterator(std::_Rb_tree_node_base*) (26,813x)
 53,626 ( 0.01%)        if (__comp)
      .           	{
294,943 ( 0.05%)  	  if (__j == begin())
777,577 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::begin() (26,813x)
321,756 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::operator==(std::_Rb_tree_iterator<PredecessorNode*> const&, std::_Rb_tree_iterator<PredecessorNode*> const&) (26,813x)
241,317 ( 0.04%)  	    return _Res(__x, __y);
884,829 ( 0.14%)  => /usr/include/c++/13.2.1/bits/stl_pair.h:std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<PredecessorNode*>*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node<PredecessorNode*>*&, std::_Rb_tree_node_base*&) (26,813x)
      .           	  else
      .           	    --__j;
      .           	}
      .                 if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
      .           	return _Res(__x, __y);
      .                 return _Res(__j._M_node, 0);
214,504 ( 0.03%)      }
      .           
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      .           			   _Compare, _Alloc>::_Base_ptr,
      .           	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
      .           			   _Compare, _Alloc>::_Base_ptr>
      .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 2140 ----------------------------------------
-- line 2154 ----------------------------------------
      .           
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .           #if __cplusplus >= 201103L
      .               template<typename _Arg>
      .           #endif
      .               pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      .           			   _Compare, _Alloc>::iterator, bool>
214,504 ( 0.03%)      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      .           #if __cplusplus >= 201103L
      .               _M_insert_unique(_Arg&& __v)
      .           #else
      .               _M_insert_unique(const _Val& __v)
      .           #endif
      .               {
      .                 typedef pair<iterator, bool> _Res;
      .                 pair<_Base_ptr, _Base_ptr> __res
321,756 ( 0.05%)  	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
4,424,145 ( 0.70%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_get_insert_unique_pos(PredecessorNode* const&) (26,813x)
187,691 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_function.h:std::_Identity<PredecessorNode*>::operator()(PredecessorNode* const&) const (26,813x)
      .           
 80,439 ( 0.01%)        if (__res.second)
      .           	{
134,065 ( 0.02%)  	  _Alloc_node __an(*this);
268,130 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node::_Alloc_node(std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >&) (26,813x)
509,447 ( 0.08%)  	  return _Res(_M_insert_(__res.first, __res.second,
14,576,564 ( 2.29%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_iterator<PredecessorNode*> std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_insert_<PredecessorNode* const&, std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, PredecessorNode* const&, std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Alloc_node&) (26,813x)
884,829 ( 0.14%)  => /usr/include/c++/13.2.1/bits/stl_pair.h:std::pair<std::_Rb_tree_iterator<PredecessorNode*>, bool>::pair<std::_Rb_tree_iterator<PredecessorNode*>, bool, true>(std::_Rb_tree_iterator<PredecessorNode*>&&, bool&&) (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
      .           				 _GLIBCXX_FORWARD(_Arg, __v), __an),
 80,439 ( 0.01%)  		      true);
      .           	}
      .           
      .                 return _Res(iterator(__res.first), false);
134,065 ( 0.02%)      }
      .           
      .             template<typename _Key, typename _Val, typename _KeyOfValue,
      .           	   typename _Compare, typename _Alloc>
      .           #if __cplusplus >= 201103L
      .               template<typename _Arg>
      .           #endif
      .               typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
-- line 2190 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir               

-- line 96 ----------------------------------------
      .                 /** Parameter type. */
      .                 struct param_type
      .                 {
      .           	typedef uniform_int_distribution<_IntType> distribution_type;
      .           
      .           	param_type() : param_type(0) { }
      .           
      .           	explicit
480,000 ( 0.08%)  	param_type(_IntType __a,
      .           		   _IntType __b = __gnu_cxx::__int_traits<_IntType>::__max)
480,000 ( 0.08%)  	: _M_a(__a), _M_b(__b)
      .           	{
400,000 ( 0.06%)  	  __glibcxx_assert(_M_a <= _M_b);
400,000 ( 0.06%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (80,000x)
240,000 ( 0.04%)  	}
      .           
      .           	result_type
480,000 ( 0.08%)  	a() const
640,000 ( 0.10%)  	{ return _M_a; }
      .           
      .           	result_type
240,000 ( 0.04%)  	b() const
320,000 ( 0.05%)  	{ return _M_b; }
      .           
      .           	friend bool
      .           	operator==(const param_type& __p1, const param_type& __p2)
      .           	{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }
      .           
      .           	friend bool
      .           	operator!=(const param_type& __p1, const param_type& __p2)
      .           	{ return !(__p1 == __p2); }
-- line 125 ----------------------------------------
-- line 134 ----------------------------------------
      .                  * @brief Constructs a uniform distribution object.
      .                  */
      .                 uniform_int_distribution() : uniform_int_distribution(0) { }
      .           
      .                 /**
      .                  * @brief Constructs a uniform distribution object.
      .                  */
      .                 explicit
480,000 ( 0.08%)        uniform_int_distribution(_IntType __a,
      .           			       _IntType __b
      .           				 = __gnu_cxx::__int_traits<_IntType>::__max)
480,000 ( 0.08%)        : _M_param(__a, __b)
2,000,000 ( 0.31%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::param_type(int, int) (80,000x)
240,000 ( 0.04%)        { }
      .           
      .                 explicit
      .                 uniform_int_distribution(const param_type& __p)
      .                 : _M_param(__p)
      .                 { }
      .           
      .                 /**
      .                  * @brief Resets the distribution state.
-- line 154 ----------------------------------------
-- line 195 ----------------------------------------
      .                 max() const
      .                 { return this->b(); }
      .           
      .                 /**
      .                  * @brief Generating functions.
      .                  */
      .                 template<typename _UniformRandomBitGenerator>
      .           	result_type
400,000 ( 0.06%)  	operator()(_UniformRandomBitGenerator& __urng)
640,000 ( 0.10%)          { return this->operator()(__urng, _M_param); }
12,918,298 ( 2.03%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&) (80,000x)
      .           
      .                 template<typename _UniformRandomBitGenerator>
      .           	result_type
      .           	operator()(_UniformRandomBitGenerator& __urng,
      .           		   const param_type& __p);
      .           
      .                 template<typename _ForwardIterator,
      .           	       typename _UniformRandomBitGenerator>
-- line 212 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .                 param_type _M_param;
      .           
      .                 // Lemire's nearly divisionless algorithm.
      .                 // Returns an unbiased random number from __g downscaled to [0,__range)
      .                 // using an unsigned type _Wp twice as wide as unsigned type _Up.
      .                 template<typename _Wp, typename _Urbg, typename _Up>
      .           	static _Up
400,000 ( 0.06%)  	_S_nd(_Urbg& __g, _Up __range)
      .           	{
      .           	  using _Up_traits = __gnu_cxx::__int_traits<_Up>;
      .           	  using _Wp_traits = __gnu_cxx::__int_traits<_Wp>;
      .           	  static_assert(!_Up_traits::__is_signed, "U must be unsigned");
      .           	  static_assert(!_Wp_traits::__is_signed, "W must be unsigned");
      .           	  static_assert(_Wp_traits::__digits == (2 * _Up_traits::__digits),
      .           			"W must be twice as wide as U");
      .           
      .           	  // reference: Fast Random Integer Generation in an Interval
      .           	  // ACM Transactions on Modeling and Computer Simulation 29 (1), 2019
      .           	  // https://arxiv.org/abs/1805.10941
480,000 ( 0.08%)  	  _Wp __product = _Wp(__g()) * _Wp(__range);
5,398,298 ( 0.85%)  => /usr/include/c++/13.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()() (80,000x)
160,000 ( 0.03%)  	  _Up __low = _Up(__product);
240,000 ( 0.04%)  	  if (__low < __range)
      .           	    {
      .           	      _Up __threshold = -__range % __range;
      .           	      while (__low < __threshold)
      .           		{
      .           		  __product = _Wp(__g()) * _Wp(__range);
      .           		  __low = _Up(__product);
      .           		}
      .           	    }
160,000 ( 0.03%)  	  return __product >> _Up_traits::__digits;
160,000 ( 0.03%)  	}
      .               };
      .           
      .             template<typename _IntType>
      .               template<typename _UniformRandomBitGenerator>
      .                 typename uniform_int_distribution<_IntType>::result_type
800,000 ( 0.13%)        uniform_int_distribution<_IntType>::
      .                 operator()(_UniformRandomBitGenerator& __urng,
      .           		 const param_type& __param)
      .                 {
      .           	typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
      .           	typedef typename make_unsigned<result_type>::type __utype;
      .           	typedef typename common_type<_Gresult_type, __utype>::type __uctype;
      .           
 80,000 ( 0.01%)  	constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
160,000 ( 0.03%)  	constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
      .           	static_assert( __urngmin < __urngmax,
      .           	    "Uniform random bit generator must define min() < max()");
 80,000 ( 0.01%)  	constexpr __uctype __urngrange = __urngmax - __urngmin;
      .           
240,000 ( 0.04%)  	const __uctype __urange
640,000 ( 0.10%)  	  = __uctype(__param.b()) - __uctype(__param.a());
560,000 ( 0.09%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::a() const (80,000x)
560,000 ( 0.09%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::b() const (80,000x)
      .           
      .           	__uctype __ret;
240,000 ( 0.04%)  	if (__urngrange > __urange)
      .           	  {
      .           	    // downscaling
      .           
240,000 ( 0.04%)  	    const __uctype __uerange = __urange + 1; // __urange can be zero
      .           
      .           #if defined __UINT64_TYPE__ && defined __UINT32_TYPE__
      .           #if __SIZEOF_INT128__
      .           	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)
      .           	      {
      .           		// __urng produces values that use exactly 64-bits,
      .           		// so use 128-bit integers to downscale to desired range.
      .           		__UINT64_TYPE__ __u64erange = __uerange;
-- line 317 ----------------------------------------
-- line 319 ----------------------------------------
      .           							       __u64erange);
      .           	      }
      .           	    else
      .           #endif
      .           	    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)
      .           	      {
      .           		// __urng produces values that use exactly 32-bits,
      .           		// so use 64-bit integers to downscale to desired range.
160,000 ( 0.03%)  		__UINT32_TYPE__ __u32erange = __uerange;
640,000 ( 0.10%)  		__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);
6,998,298 ( 1.10%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:unsigned int std::uniform_int_distribution<int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int) (80,000x)
      .           	      }
      .           	    else
      .           #endif
      .           	      {
      .           		// fallback case (2 divisions)
      .           		const __uctype __scaling = __urngrange / __uerange;
      .           		const __uctype __past = __uerange * __scaling;
      .           		do
-- line 336 ----------------------------------------
-- line 364 ----------------------------------------
      .           			 (__urng, param_type(0, __urange / __uerngrange)));
      .           		__ret = __tmp + (__uctype(__urng()) - __urngmin);
      .           	      }
      .           	    while (__ret > __urange || __ret < __tmp);
      .           	  }
      .           	else
      .           	  __ret = __uctype(__urng()) - __urngmin;
      .           
480,000 ( 0.08%)  	return __ret + __param.a();
560,000 ( 0.09%)  => /usr/include/c++/13.2.1/bits/uniform_int_dist.h:std::uniform_int_distribution<int>::param_type::a() const (80,000x)
480,000 ( 0.08%)        }
      .           
      .           
      .             template<typename _IntType>
      .               template<typename _ForwardIterator,
      .           	     typename _UniformRandomBitGenerator>
      .                 void
      .                 uniform_int_distribution<_IntType>::
      .                 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/atomic_base.h
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .                 __memory_order_modifier_mask = 0xffff0000,
         .                 __memory_order_hle_acquire   = 0x10000,
         .                 __memory_order_hle_release   = 0x20000
         .               };
         .             /// @endcond
         .           
         .             constexpr memory_order
         .             operator|(memory_order __m, __memory_order_modifier __mod)
 1,415,744 ( 0.22%)    {
 1,061,808 ( 0.17%)      return memory_order(int(__m) | int(__mod));
   707,872 ( 0.11%)    }
         .           
         .             constexpr memory_order
         .             operator&(memory_order __m, __memory_order_modifier __mod)
10,644,356 ( 1.68%)    {
 7,983,267 ( 1.26%)      return memory_order(int(__m) & int(__mod));
 5,322,178 ( 0.84%)    }
         .           
         .             /// @cond undocumented
         .           
         .             // Drop release ordering as per [atomics.types.operations.req]/21
         .             constexpr memory_order
         .             __cmpexch_failure_order2(memory_order __m) noexcept
 1,061,808 ( 0.17%)    {
   707,872 ( 0.11%)      return __m == memory_order_acq_rel ? memory_order_acquire
 1,415,744 ( 0.22%)        : __m == memory_order_release ? memory_order_relaxed : __m;
   707,872 ( 0.11%)    }
         .           
         .             constexpr memory_order
         .             __cmpexch_failure_order(memory_order __m) noexcept
 1,769,680 ( 0.28%)    {
         .               return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
 4,955,104 ( 0.78%)        | __memory_order_modifier(__m & __memory_order_modifier_mask));
 6,370,848 ( 1.00%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (707,872x)
 3,893,296 ( 0.61%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__cmpexch_failure_order2(std::memory_order) (353,936x)
 3,185,424 ( 0.50%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator|(std::memory_order, std::__memory_order_modifier) (353,936x)
 1,061,808 ( 0.17%)    }
         .           
         .             constexpr bool
         .             __is_valid_cmpexch_failure_order(memory_order __m) noexcept
         .             {
         .               return (__m & __memory_order_mask) != memory_order_release
         .           	&& (__m & __memory_order_mask) != memory_order_acq_rel;
         .             }
         .           
-- line 135 ----------------------------------------
-- line 354 ----------------------------------------
         .               public:
         .                 __atomic_base() noexcept = default;
         .                 ~__atomic_base() noexcept = default;
         .                 __atomic_base(const __atomic_base&) = delete;
         .                 __atomic_base& operator=(const __atomic_base&) = delete;
         .                 __atomic_base& operator=(const __atomic_base&) volatile = delete;
         .           
         .                 // Requires __int_type convertible to _M_i.
   956,016 ( 0.15%)        constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
         .           
 3,108,056 ( 0.49%)        operator __int_type() const noexcept
   888,016 ( 0.14%)        { return load(); }
         .           
         .                 operator __int_type() const volatile noexcept
         .                 { return load(); }
         .           
         .                 __int_type
   320,410 ( 0.05%)        operator=(__int_type __i) noexcept
         .                 {
    10,980 ( 0.00%)  	store(__i);
    32,773 ( 0.01%)  	return __i;
    65,546 ( 0.01%)        }
         .           
         .                 __int_type
         .                 operator=(__int_type __i) volatile noexcept
         .                 {
         .           	store(__i);
         .           	return __i;
         .                 }
         .           
-- line 383 ----------------------------------------
-- line 468 ----------------------------------------
         .           	return __atomic_is_lock_free(sizeof(_M_i),
         .           	    reinterpret_cast<void *>(-_S_alignment));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE void
         .                 store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
 2,111,110 ( 0.33%)  	  = __m & __memory_order_mask;
   241,317 ( 0.04%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (26,813x)
 2,111,110 ( 0.33%)  	__glibcxx_assert(__b != memory_order_acquire);
   134,065 ( 0.02%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (26,813x)
 2,111,110 ( 0.33%)  	__glibcxx_assert(__b != memory_order_acq_rel);
   134,065 ( 0.02%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (26,813x)
 2,111,110 ( 0.33%)  	__glibcxx_assert(__b != memory_order_consume);
   134,065 ( 0.02%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (26,813x)
         .           
 1,266,666 ( 0.20%)  	__atomic_store_n(&_M_i, __i, int(__m));
   422,222 ( 0.07%)        }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE void
         .                 store(__int_type __i,
         .           	    memory_order __m = memory_order_seq_cst) volatile noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
         .           	  = __m & __memory_order_mask;
         .           	__glibcxx_assert(__b != memory_order_acquire);
-- line 490 ----------------------------------------
-- line 493 ----------------------------------------
         .           
         .           	__atomic_store_n(&_M_i, __i, int(__m));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                 load(memory_order __m = memory_order_seq_cst) const noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
 4,222,390 ( 0.66%)  	  = __m & __memory_order_mask;
 3,268,395 ( 0.51%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (363,155x)
 4,222,390 ( 0.66%)  	__glibcxx_assert(__b != memory_order_release);
 1,815,775 ( 0.29%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (363,155x)
 4,222,390 ( 0.66%)  	__glibcxx_assert(__b != memory_order_acq_rel);
 1,815,775 ( 0.29%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (363,155x)
         .           
 2,242,543 ( 0.35%)  	return __atomic_load_n(&_M_i, int(__m));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                 load(memory_order __m = memory_order_seq_cst) const volatile noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
         .           	  = __m & __memory_order_mask;
         .           	__glibcxx_assert(__b != memory_order_release);
-- line 513 ----------------------------------------
-- line 567 ----------------------------------------
         .           	return compare_exchange_weak(__i1, __i2, __m,
         .           				     __cmpexch_failure_order(__m));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE bool
         .                 compare_exchange_strong(__int_type& __i1, __int_type __i2,
         .           			      memory_order __m1, memory_order __m2) noexcept
         .                 {
 1,412,190 ( 0.22%)  	__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));
    67,380 ( 0.01%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (13,476x)
         .           
 2,541,942 ( 0.40%)  	return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
   282,438 ( 0.04%)  					   int(__m1), int(__m2));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE bool
         .                 compare_exchange_strong(__int_type& __i1, __int_type __i2,
         .           			      memory_order __m1,
         .           			      memory_order __m2) volatile noexcept
         .                 {
         .           	__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));
-- line 586 ----------------------------------------
-- line 588 ----------------------------------------
         .           	return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
         .           					   int(__m1), int(__m2));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE bool
         .                 compare_exchange_strong(__int_type& __i1, __int_type __i2,
         .           			      memory_order __m = memory_order_seq_cst) noexcept
         .                 {
 3,389,256 ( 0.53%)  	return compare_exchange_strong(__i1, __i2, __m,
   808,560 ( 0.13%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__cmpexch_failure_order(std::memory_order) (13,476x)
   282,438 ( 0.04%)  				       __cmpexch_failure_order(__m));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE bool
         .                 compare_exchange_strong(__int_type& __i1, __int_type __i2,
         .           		 memory_order __m = memory_order_seq_cst) volatile noexcept
         .                 {
         .           	return compare_exchange_strong(__i1, __i2, __m,
         .           				       __cmpexch_failure_order(__m));
-- line 605 ----------------------------------------
-- line 647 ----------------------------------------
         .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                 fetch_sub(__int_type __i,
         .           		memory_order __m = memory_order_seq_cst) volatile noexcept
         .                 { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                 fetch_and(__int_type __i,
         .           		memory_order __m = memory_order_seq_cst) noexcept
    70,368 ( 0.01%)        { return __atomic_fetch_and(&_M_i, __i, int(__m)); }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                 fetch_and(__int_type __i,
         .           		memory_order __m = memory_order_seq_cst) volatile noexcept
         .                 { return __atomic_fetch_and(&_M_i, __i, int(__m)); }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE __int_type
         .                 fetch_or(__int_type __i,
-- line 663 ----------------------------------------
-- line 700 ----------------------------------------
         .               public:
         .                 __atomic_base() noexcept = default;
         .                 ~__atomic_base() noexcept = default;
         .                 __atomic_base(const __atomic_base&) = delete;
         .                 __atomic_base& operator=(const __atomic_base&) = delete;
         .                 __atomic_base& operator=(const __atomic_base&) volatile = delete;
         .           
         .                 // Requires __pointer_type convertible to _M_p.
 1,343,890 ( 0.21%)        constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
         .           
 4,132,618 ( 0.65%)        operator __pointer_type() const noexcept
 1,180,748 ( 0.19%)        { return load(); }
         .           
         .                 operator __pointer_type() const volatile noexcept
         .                 { return load(); }
         .           
         .                 __pointer_type
   693,300 ( 0.11%)        operator=(__pointer_type __p) noexcept
         .                 {
         .           	store(__p);
    69,330 ( 0.01%)  	return __p;
   138,660 ( 0.02%)        }
         .           
         .                 __pointer_type
         .                 operator=(__pointer_type __p) volatile noexcept
         .                 {
         .           	store(__p);
         .           	return __p;
         .                 }
         .           
-- line 729 ----------------------------------------
-- line 799 ----------------------------------------
         .           	    reinterpret_cast<void *>(-__alignof(_M_p)));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE void
         .                 store(__pointer_type __p,
         .           	    memory_order __m = memory_order_seq_cst) noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
   480,715 ( 0.08%)  	  = __m & __memory_order_mask;
   121,284 ( 0.02%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (13,476x)
         .           
   480,715 ( 0.08%)  	__glibcxx_assert(__b != memory_order_acquire);
    67,380 ( 0.01%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (13,476x)
   480,715 ( 0.08%)  	__glibcxx_assert(__b != memory_order_acq_rel);
    67,380 ( 0.01%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (13,476x)
   480,715 ( 0.08%)  	__glibcxx_assert(__b != memory_order_consume);
    67,380 ( 0.01%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (13,476x)
         .           
   288,429 ( 0.05%)  	__atomic_store_n(&_M_p, __p, int(__m));
    96,143 ( 0.02%)        }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE void
         .                 store(__pointer_type __p,
         .           	    memory_order __m = memory_order_seq_cst) volatile noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
         .           	  = __m & __memory_order_mask;
         .           	__glibcxx_assert(__b != memory_order_acquire);
-- line 822 ----------------------------------------
-- line 825 ----------------------------------------
         .           
         .           	__atomic_store_n(&_M_p, __p, int(__m));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE __pointer_type
         .                 load(memory_order __m = memory_order_seq_cst) const noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
 2,951,870 ( 0.46%)  	  = __m & __memory_order_mask;
 1,831,491 ( 0.29%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::operator&(std::memory_order, std::__memory_order_modifier) (203,499x)
 2,951,870 ( 0.46%)  	__glibcxx_assert(__b != memory_order_release);
 1,017,495 ( 0.16%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (203,499x)
 2,951,870 ( 0.46%)  	__glibcxx_assert(__b != memory_order_acq_rel);
 1,017,495 ( 0.16%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (203,499x)
         .           
 1,180,748 ( 0.19%)  	return __atomic_load_n(&_M_p, int(__m));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE __pointer_type
         .                 load(memory_order __m = memory_order_seq_cst) const volatile noexcept
         .                 {
         .           	memory_order __b __attribute__ ((__unused__))
         .           	  = __m & __memory_order_mask;
         .           	__glibcxx_assert(__b != memory_order_release);
-- line 845 ----------------------------------------
-- line 885 ----------------------------------------
         .           					   int(__m1), int(__m2));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE bool
         .                 compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         .           			      memory_order __m1,
         .           			      memory_order __m2) noexcept
         .                 {
   290,110 ( 0.05%)  	__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));
   101,055 ( 0.02%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (20,211x)
         .           
   522,198 ( 0.08%)  	return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,
    58,022 ( 0.01%)  					   int(__m1), int(__m2));
         .                 }
         .           
         .                 _GLIBCXX_ALWAYS_INLINE bool
         .                 compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         .           			      memory_order __m1,
         .           			      memory_order __m2) volatile noexcept
         .                 {
         .           	__glibcxx_assert(__is_valid_cmpexch_failure_order(__m2));
-- line 904 ----------------------------------------
-- line 970 ----------------------------------------
         .           	return true;
         .           #endif
         .                 }
         .           
         .               template<typename _Tp>
         .                 _GLIBCXX_ALWAYS_INLINE _Tp*
         .                 __clear_padding(_Tp& __val) noexcept
         .                 {
    53,936 ( 0.01%)  	auto* __ptr = std::__addressof(__val);
    80,904 ( 0.01%)  => /usr/include/c++/13.2.1/bits/move.h:STATUS* std::__addressof<STATUS>(STATUS&) (13,484x)
         .           #if __has_builtin(__builtin_clear_padding)
         .           	if _GLIBCXX17_CONSTEXPR (__atomic_impl::__maybe_has_padding<_Tp>())
         .           	  __builtin_clear_padding(__ptr);
         .           #endif
    13,484 ( 0.00%)  	return __ptr;
         .                 }
         .           
         .               // Remove volatile and create a non-deduced context for value arguments.
         .               template<typename _Tp>
         .                 using _Val = typename remove_volatile<_Tp>::type;
         .           
         .               template<typename _Tp>
         .                 _GLIBCXX_ALWAYS_INLINE bool
         .                 __compare_exchange(_Tp& __val, _Val<_Tp>& __e, _Val<_Tp>& __i,
         .           			 bool __is_weak,
         .           			 memory_order __s, memory_order __f) noexcept
         .                 {
    67,380 ( 0.01%)  	__glibcxx_assert(__is_valid_cmpexch_failure_order(__f));
    67,380 ( 0.01%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (13,476x)
         .           
         .           	using _Vp = _Val<_Tp>;
         .           
         .           	if _GLIBCXX17_CONSTEXPR (__atomic_impl::__maybe_has_padding<_Vp>())
         .           	  {
         .           	    // We must not modify __e on success, so cannot clear its padding.
         .           	    // Copy into a buffer and clear that, then copy back on failure.
         .           	    alignas(_Vp) unsigned char __buf[sizeof(_Vp)];
-- line 1004 ----------------------------------------
-- line 1007 ----------------------------------------
         .           	    if (__atomic_compare_exchange(std::__addressof(__val), __exp,
         .           					  __atomic_impl::__clear_padding(__i),
         .           					  __is_weak, int(__s), int(__f)))
         .           	      return true;
         .           	    __builtin_memcpy(std::__addressof(__e), __exp, sizeof(_Vp));
         .           	    return false;
         .           	  }
         .           	else
   148,236 ( 0.02%)  	  return __atomic_compare_exchange(std::__addressof(__val),
    80,856 ( 0.01%)  => /usr/include/c++/13.2.1/bits/move.h:STATUS* std::__addressof<STATUS>(STATUS&) (13,476x)
    53,904 ( 0.01%)  					   std::__addressof(__e),
    80,856 ( 0.01%)  => /usr/include/c++/13.2.1/bits/move.h:STATUS* std::__addressof<STATUS>(STATUS&) (13,476x)
    40,428 ( 0.01%)  					   std::__addressof(__i),
    80,856 ( 0.01%)  => /usr/include/c++/13.2.1/bits/move.h:STATUS* std::__addressof<STATUS>(STATUS&) (13,476x)
    13,476 ( 0.00%)  					   __is_weak, int(__s), int(__f));
         .                 }
         .             } // namespace __atomic_impl
         .           
         .           #if __cplusplus > 201703L
         .             // Implementation details of atomic_ref and atomic<floating-point>.
         .             namespace __atomic_impl
         .             {
         .               // Like _Val<T> above, but for difference_type arguments.
-- line 1026 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h
--------------------------------------------------------------------------------
Ir                  

-- line 533 ----------------------------------------
         .           {
         .           #pragma GCC visibility push(default)
         .             // Internal version of std::is_constant_evaluated().
         .             // This can be used without checking if the compiler supports the feature.
         .             // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
         .             // the compiler support is present to make this function work as expected.
         .             _GLIBCXX_CONSTEXPR inline bool
         .             __is_constant_evaluated() _GLIBCXX_NOEXCEPT
11,799,234 ( 1.86%)    {
         .           #if __cpp_if_consteval >= 202106L
         .           # define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
         .               if consteval { return true; } else { return false; }
         .           #elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
         .           # define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
 5,899,617 ( 0.93%)      return __builtin_is_constant_evaluated();
         .           #else
         .               return false;
         .           #endif
11,799,234 ( 1.86%)    }
         .           #pragma GCC visibility pop
         .           }
         .           
         .           // Debug Mode implies checking assertions.
         .           #if defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_ASSERTIONS)
         .           # define _GLIBCXX_ASSERTIONS 1
         .           #endif
         .           
-- line 559 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/typeinfo
--------------------------------------------------------------------------------
Ir                 

-- line 95 ----------------------------------------
        .               /** Destructor first. Being the first non-inline virtual function, this
        .                *  controls in which translation unit the vtable is emitted. The
        .                *  compiler makes use of that information to know where to emit
        .                *  the runtime-mandated type_info structures in the new-abi.  */
        .               virtual ~type_info();
        .           
        .               /** Returns an @e implementation-defined byte string; this is not
        .                *  portable between compilers!  */
  745,404 ( 0.12%)      const char* name() const _GLIBCXX_NOEXCEPT
2,236,212 ( 0.35%)      { return __name[0] == '*' ? __name + 1 : __name; }
        .           
        .               /** Returns true if `*this` precedes `__arg` in the implementation's
        .                *  collation order.  */
        .               bool before(const type_info& __arg) const _GLIBCXX_NOEXCEPT;
        .           
        .               _GLIBCXX23_CONSTEXPR
        .               bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT;
        .           
-- line 112 ----------------------------------------
-- line 186 ----------------------------------------
        .               // type. Uniqueness must use the __name value, not object address.
        .               return __name < __arg.__name;
        .             }
        .           #endif
        .           
        .           #if __GXX_TYPEINFO_EQUALITY_INLINE || __cplusplus > 202002L
        .             _GLIBCXX23_CONSTEXPR inline bool
        .             type_info::operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
5,204,390 ( 0.82%)    {
3,122,634 ( 0.49%)      if (std::__is_constant_evaluated())
5,204,390 ( 0.82%)  => /usr/include/c++/13.2.1/x86_64-pc-linux-gnu/bits/c++config.h:std::__is_constant_evaluated() (1,040,878x)
        .                 return this == &__arg;
        .           
6,245,268 ( 0.98%)      if (__name == __arg.__name)
1,584,820 ( 0.25%)        return true;
        .           
        .           #if !__GXX_TYPEINFO_EQUALITY_INLINE
        .               // ABI requires comparisons to be non-inline.
        .               return __equal(__arg);
        .           #elif !__GXX_MERGED_TYPEINFO_NAMES
        .               // Need to do string comparison.
4,720,896 ( 0.74%)      return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
4,969,360 ( 0.78%)  => ???:0x000000000015a650 (248,468x)
2,981,616 ( 0.47%)  => /usr/include/c++/13.2.1/typeinfo:std::type_info::name() const (248,468x)
      795 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
        .           #else
        .               return false;
        .           #endif
2,081,756 ( 0.33%)    }
        .           # endif
        .           
        .           
        .             /**
        .              *  @brief  Thrown during incorrect typecasting.
        .              *  @ingroup exceptions
        .              *
        .              *  If you attempt an invalid @c dynamic_cast expression, an instance of
-- line 218 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../BoundedMinReg/minreg.h
--------------------------------------------------------------------------------
Ir               

-- line 382 ----------------------------------------
      .           
      .           class MinReg64{
      .               private:
      .                   std::atomic<std::uint64_t> value;
      .               public:
      .               #define MAX_VALUE 64
      .           
      .               //Precondition: 0 <= initVal <= 64
 60,705 ( 0.01%)      MinReg64(int initVal = MAX_VALUE): value(UINT64_MAX){
155,135 ( 0.02%)  => /usr/include/c++/13.2.1/atomic:std::atomic<unsigned long>::atomic(unsigned long) (6,745x)
 13,490 ( 0.00%)          if(initVal != MAX_VALUE){
 33,725 ( 0.01%)              minWrite(initVal);
202,350 ( 0.03%)  => FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::minWrite(int) (6,745x)
      .                   }
 20,235 ( 0.00%)      }
      .               //Precondition: 0 <= value <= 64
 35,184 ( 0.01%)      void minWrite(int x){
 17,592 ( 0.00%)          if(x < 64){
 70,368 ( 0.01%)              uint64_t mask = ~(1 << x);  //Create an AND mask of all 1s except at bit x starting from the right.
 43,980 ( 0.01%)              value.fetch_and(mask);   //Turn off bit x within value
      .                   }
 26,388 ( 0.00%)      }
406,440 ( 0.06%)      int minRead(){
406,440 ( 0.06%)          uint64_t curValue = value.load(); //
      .                   //Using library function given here for detecting bit 
      .                   //https://en.cppreference.com/w/cpp/header/bit
406,440 ( 0.06%)          int minValue = std::__countr_one(curValue);
2,438,640 ( 0.38%)  => /usr/include/c++/13.2.1/bit:int std::__countr_one<unsigned long>(unsigned long) (101,610x)
101,610 ( 0.02%)          return minValue;
203,220 ( 0.03%)      }
      .           };
      .           
      .           class MinReg64_BAD{
      .               private:
      .                   std::atomic<std::uint64_t> value;
      .               public:
      .               #define MAX_VALUE 64
      .           
-- line 416 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_pair.h
--------------------------------------------------------------------------------
Ir               

-- line 679 ----------------------------------------
      .           #endif
      .           
      .                 template<typename _U1, typename _U2, typename
      .           	       enable_if<_PCCP::template
      .           			   _MoveConstructiblePair<_U1, _U2>()
      .           			  && _PCCP::template
      .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
      .                                    bool>::type=true>
509,447 ( 0.08%)  	constexpr pair(_U1&& __x, _U2&& __y)
992,081 ( 0.16%)  	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
294,943 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree_const_iterator<PredecessorNode*>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<PredecessorNode*> const&) (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:bool& std::forward<bool&>(std::remove_reference<bool&>::type&) (26,813x)
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:std::_Rb_tree_iterator<PredecessorNode*>& std::forward<std::_Rb_tree_iterator<PredecessorNode*>&>(std::remove_reference<std::_Rb_tree_iterator<PredecessorNode*>&>::type&) (26,813x)
268,130 ( 0.04%)  	{ __glibcxx_no_dangling_refs(_U1&&, _U2&&); }
      .           
      .                 template<typename _U1, typename _U2, typename
      .           	       enable_if<_PCCP::template
      .           			   _MoveConstructiblePair<_U1, _U2>()
      .           			  && !_PCCP::template
      .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
      .                                    bool>::type=false>
      .           	explicit constexpr pair(_U1&& __x, _U2&& __y)
-- line 697 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/deque.tcc
--------------------------------------------------------------------------------
Ir               

-- line 515 ----------------------------------------
      .           	  }
      .                 }
      .           
      .             // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
      .             template<typename _Tp, typename _Alloc>
      .           #if __cplusplus >= 201103L
      .               template<typename... _Args>
      .                 void
160,878 ( 0.03%)        deque<_Tp, _Alloc>::
      .                 _M_push_front_aux(_Args&&... __args)
      .           #else
      .                 void
      .                 deque<_Tp, _Alloc>::
      .                 _M_push_front_aux(const value_type& __t)
      .           #endif
      .                 {
294,943 ( 0.05%)  	if (size() == max_size())
1,876,910 ( 0.30%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::size() const (26,813x)
1,635,593 ( 0.26%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::max_size() const (26,813x)
      .           	  __throw_length_error(
      .           	      __N("cannot create std::deque larger than max_size()"));
      .           
107,252 ( 0.02%)  	_M_reserve_map_at_front();
455,821 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_reserve_map_at_front(unsigned long) (26,813x)
187,691 ( 0.03%)  	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
2,869,751 ( 0.45%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_base<PredecessorNode*, std::allocator<PredecessorNode*> >::_M_allocate_node() (26,813x)
      .           	__try
      .           	  {
214,504 ( 0.03%)  	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
1,099,333 ( 0.17%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::_Deque_iterator<PredecessorNode*, PredecessorNode*&, PredecessorNode**>::_M_set_node(PredecessorNode***) (26,813x)
      .           					       - 1);
134,065 ( 0.02%)  	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
      .           #if __cplusplus >= 201103L
241,317 ( 0.04%)  	    _Alloc_traits::construct(this->_M_impl,
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
      .           				     this->_M_impl._M_start._M_cur,
      .           				     std::forward<_Args>(__args)...);
      .           #else
      .           	    this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);
      .           #endif
      .           	  }
      .           	__catch(...)
      .           	  {
      .           	    ++this->_M_impl._M_start;
      .           	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
      .           	    __throw_exception_again;
      .           	  }
107,252 ( 0.02%)        }
      .           
      .             // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
      .             template <typename _Tp, typename _Alloc>
      .               void deque<_Tp, _Alloc>::
      .               _M_pop_back_aux()
      .               {
      .                 _M_deallocate_node(this->_M_impl._M_finish._M_first);
      .                 this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
-- line 564 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bit
--------------------------------------------------------------------------------
Ir               

-- line 240 ----------------------------------------
      .               constexpr int
      .               __countl_one(_Tp __x) noexcept
      .               {
      .                 return std::__countl_zero<_Tp>((_Tp)~__x);
      .               }
      .           
      .             template<typename _Tp>
      .               constexpr int
304,830 ( 0.05%)      __countr_zero(_Tp __x) noexcept
      .               {
      .                 using __gnu_cxx::__int_traits;
101,610 ( 0.02%)        constexpr auto _Nd = __int_traits<_Tp>::__digits;
      .           
203,220 ( 0.03%)        if (__x == 0)
      .                   return _Nd;
      .           
101,610 ( 0.02%)        constexpr auto _Nd_ull = __int_traits<unsigned long long>::__digits;
101,610 ( 0.02%)        constexpr auto _Nd_ul = __int_traits<unsigned long>::__digits;
101,610 ( 0.02%)        constexpr auto _Nd_u = __int_traits<unsigned>::__digits;
      .           
      .                 if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)
      .           	return __builtin_ctz(__x);
      .                 else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ul)
304,830 ( 0.05%)  	return __builtin_ctzl(__x);
      .                 else if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_ull)
      .           	return __builtin_ctzll(__x);
      .                 else // (_Nd > _Nd_ull)
      .           	{
      .           	  static_assert(_Nd <= (2 * _Nd_ull),
      .           			"Maximum supported integer size is 128-bit");
      .           
      .           	  constexpr auto __max_ull = __int_traits<unsigned long long>::__max;
      .           	  unsigned long long __low = __x & __max_ull;
      .           	  if (__low != 0)
      .           	    return __builtin_ctzll(__low);
      .           	  unsigned long long __high = __x >> _Nd_ull;
      .           	  return __builtin_ctzll(__high) + _Nd_ull;
      .           	}
203,220 ( 0.03%)      }
      .           
      .             template<typename _Tp>
      .               constexpr int
406,440 ( 0.06%)      __countr_one(_Tp __x) noexcept
      .               {
406,440 ( 0.06%)        return std::__countr_zero((_Tp)~__x);
1,422,540 ( 0.22%)  => /usr/include/c++/13.2.1/bit:int std::__countr_zero<unsigned long>(unsigned long) (101,610x)
203,220 ( 0.03%)      }
      .           
      .             template<typename _Tp>
      .               constexpr int
      .               __popcount(_Tp __x) noexcept
      .               {
      .                 using __gnu_cxx::__int_traits;
      .                 constexpr auto _Nd = __int_traits<_Tp>::__digits;
      .           
-- line 293 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/hashtable_policy.h
--------------------------------------------------------------------------------
Ir                 

-- line 289 ----------------------------------------
        .              *
        .              *  Important traits for hash tables depending on associated hasher.
        .              *
        .              */
        .             template<typename _Hash>
        .               struct _Hashtable_hash_traits
        .               {
        .                 static constexpr std::size_t
   13,474 ( 0.00%)        __small_size_threshold() noexcept
   20,211 ( 0.00%)        { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
        .               };
        .           
        .             /**
        .              *  struct _Hash_node_base
        .              *
        .              *  Nodes, used to wrap elements stored in the hash table.  A policy
        .              *  template parameter of class template _Hashtable controls whether
        .              *  nodes also store a hash code. In some cases (e.g. strings) this
        .              *  may be a performance win.
        .              */
        .             struct _Hash_node_base
        .             {
        .               _Hash_node_base* _M_nxt;
        .           
  429,008 ( 0.07%)      _Hash_node_base() noexcept : _M_nxt() { }
        .           
        .               _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
        .             };
        .           
        .             /**
        .              *  struct _Hash_node_value_base
        .              *
        .              *  Node type with the value to store.
-- line 321 ----------------------------------------
-- line 381 ----------------------------------------
        .             template<typename _Value, bool _Cache_hash_code>
        .               struct _Node_iterator_base
        .               {
        .                 using __node_type = _Hash_node<_Value, _Cache_hash_code>;
        .           
        .                 __node_type* _M_cur;
        .           
        .                 _Node_iterator_base() : _M_cur(nullptr) { }
   80,844 ( 0.01%)        _Node_iterator_base(__node_type* __p) noexcept
  121,266 ( 0.02%)        : _M_cur(__p) { }
        .           
        .                 void
        .                 _M_incr() noexcept
        .                 { _M_cur = _M_cur->_M_next(); }
        .           
        .                 friend bool
        .                 operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        .                 noexcept
        .                 { return __x._M_cur == __y._M_cur; }
        .           
        .           #if __cpp_impl_three_way_comparison < 201907L
        .                 friend bool
   26,948 ( 0.00%)        operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        .                 noexcept
   53,896 ( 0.01%)        { return __x._M_cur != __y._M_cur; }
        .           #endif
        .               };
        .           
        .             /// Node iterators, used to iterate through all the hashtable.
        .             template<typename _Value, bool __constant_iterators, bool __cache>
        .               struct _Node_iterator
        .               : public _Node_iterator_base<_Value, __cache>
        .               {
-- line 413 ----------------------------------------
-- line 471 ----------------------------------------
        .                 typedef std::forward_iterator_tag			iterator_category;
        .           
        .                 typedef const value_type*				pointer;
        .                 typedef const value_type&				reference;
        .           
        .                 _Node_const_iterator() = default;
        .           
        .                 explicit
  101,055 ( 0.02%)        _Node_const_iterator(__node_type* __p) noexcept
  161,688 ( 0.03%)        : __base_type(__p) { }
  202,110 ( 0.03%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Node_iterator_base<DelNode*, false>::_Node_iterator_base(std::__detail::_Hash_node<DelNode*, false>*) (20,211x)
        .           
        .                 _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,
        .           			   __cache>& __x) noexcept
        .                 : __base_type(__x._M_cur) { }
        .           
        .                 reference
        .                 operator*() const noexcept
        .                 { return this->_M_cur->_M_v(); }
-- line 488 ----------------------------------------
-- line 532 ----------------------------------------
        .             struct _Default_ranged_hash { };
        .           
        .             /// Default value for rehash policy.  Bucket size is (usually) the
        .             /// smallest prime that keeps the load factor small enough.
        .             struct _Prime_rehash_policy
        .             {
        .               using __has_load_factor = true_type;
        .           
  214,504 ( 0.03%)      _Prime_rehash_policy(float __z = 1.0) noexcept
  429,008 ( 0.07%)      : _M_max_load_factor(__z), _M_next_resize(0) { }
        .           
        .               float
        .               max_load_factor() const noexcept
        .               { return _M_max_load_factor; }
        .           
        .               // Return a bucket size no smaller than n.
        .               std::size_t
        .               _M_next_bkt(std::size_t __n) const;
-- line 549 ----------------------------------------
-- line 1203 ----------------------------------------
        .              *  final) and when it is worth it (the type is empty.)
        .              */
        .             template<int _Nm, typename _Tp,
        .           	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
        .               struct _Hashtable_ebo_helper;
        .           
        .             /// Specialization using EBO.
        .             template<int _Nm, typename _Tp>
  482,634 ( 0.08%)      struct _Hashtable_ebo_helper<_Nm, _Tp, true>
        .               : private _Tp
        .               {
1,179,772 ( 0.19%)        _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
        .           
        .                 template<typename _OtherTp>
        .           	_Hashtable_ebo_helper(_OtherTp&& __tp)
        .           	: _Tp(std::forward<_OtherTp>(__tp))
        .           	{ }
        .           
        .                 const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
        .                 _Tp& _M_get() { return static_cast<_Tp&>(*this); }
-- line 1222 ----------------------------------------
-- line 1289 ----------------------------------------
        .                 hash_function() const
        .                 { return _M_hash(); }
        .           
        .               protected:
        .                 typedef std::size_t 				__hash_code;
        .           
        .                 // We need the default constructor for the local iterators and _Hashtable
        .                 // default constructor.
  536,260 ( 0.08%)        _Hash_code_base() = default;
  160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<1, std::hash<DelNode*>, true>::_Hashtable_ebo_helper() (26,813x)
        .           
        .                 _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
        .           
        .                 __hash_code
        .                 _M_hash_code(const _Key& __k) const
        .                 {
        .           	static_assert(__is_invocable<const _Hash&, const _Key&>{},
        .           	    "hash function must be invocable with an argument of key type");
-- line 1305 ----------------------------------------
-- line 1702 ----------------------------------------
        .                 { return __c == __n._M_hash_code; }
        .           
        .                 static bool
        .                 _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
        .           		     const _Hash_node_code_cache<true>& __rhn)
        .                 { return __lhn._M_hash_code == __rhn._M_hash_code; }
        .           
        .               protected:
  697,138 ( 0.11%)        _Hashtable_base() = default;
  429,008 ( 0.07%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hash_code_base<DelNode*, DelNode*, std::__detail::_Identity, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_Hash_code_base() (26,813x)
  160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::equal_to<DelNode*>, true>::_Hashtable_ebo_helper() (26,813x)
        .           
        .                 _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
        .                 : __hash_code_base(__hash), _EqualEBO(__eq)
        .                 { }
        .           
        .                 bool
        .                 _M_key_equals(const _Key& __k,
        .           		    const _Hash_node_value<_Value,
-- line 1718 ----------------------------------------
-- line 1913 ----------------------------------------
        .                 return true;
        .               }
        .           
        .             /**
        .              * This type deals with all allocation and keeps an allocator instance
        .              * through inheritance to benefit from EBO when possible.
        .              */
        .             template<typename _NodeAlloc>
  536,260 ( 0.08%)      struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
  509,447 ( 0.08%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<DelNode*, false> >, true>::~_Hashtable_ebo_helper() (26,813x)
        .               {
        .               private:
        .                 using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;
        .           
        .                 template<typename>
        .           	struct __get_value_type;
        .                 template<typename _Val, bool _Cache_hash_code>
        .           	struct __get_value_type<_Hash_node<_Val, _Cache_hash_code>>
-- line 1929 ----------------------------------------
-- line 1941 ----------------------------------------
        .                 using __node_ptr = __node_type*;
        .                 using __node_base = _Hash_node_base;
        .                 using __node_base_ptr = __node_base*;
        .                 using __buckets_alloc_type =
        .           	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
        .                 using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
        .                 using __buckets_ptr = __node_base_ptr*;
        .           
  536,260 ( 0.08%)        _Hashtable_alloc() = default;
  321,756 ( 0.05%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<InsNode*, false> >, true>::_Hashtable_ebo_helper() (26,813x)
        .                 _Hashtable_alloc(const _Hashtable_alloc&) = default;
        .                 _Hashtable_alloc(_Hashtable_alloc&&) = default;
        .           
        .                 template<typename _Alloc>
        .           	_Hashtable_alloc(_Alloc&& __a)
        .           	: __ebo_node_alloc(std::forward<_Alloc>(__a))
        .           	{ }
        .           
-- line 1957 ----------------------------------------
-- line 2028 ----------------------------------------
        .                 typedef typename __node_alloc_traits::pointer _Ptr;
        .                 auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
        .                 __n->~__node_type();
        .                 __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
        .               }
        .           
        .             template<typename _NodeAlloc>
        .               void
  268,130 ( 0.04%)      _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
        .               {
  160,878 ( 0.03%)        while (__n)
        .           	{
        .           	  __node_ptr __tmp = __n;
        .           	  __n = __n->_M_next();
        .           	  _M_deallocate_node(__tmp);
        .           	}
  214,504 ( 0.03%)      }
        .           
        .             template<typename _NodeAlloc>
        .               auto
        .               _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
        .               -> __buckets_ptr
        .               {
        .                 __buckets_alloc_type __alloc(_M_node_allocator());
        .           
-- line 2052 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/random.tcc
--------------------------------------------------------------------------------
Ir               

-- line 318 ----------------------------------------
      .           #endif
      .           
      .             template<typename _UIntType,
      .           	   size_t __w, size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               void
     20 ( 0.00%)      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::
      .               seed(result_type __sd)
      .               {
      8 ( 0.00%)        _M_x[0] = __detail::__mod<_UIntType,
     12 ( 0.00%)  	__detail::_Shift<_UIntType, __w>::__value>(__sd);
     80 ( 0.00%)  => /usr/include/c++/13.2.1/bits/random.h:unsigned long std::__detail::__mod<unsigned long, 4294967296ul, 1ul, 0ul>(unsigned long) (4x)
      .           
  7,492 ( 0.00%)        for (size_t __i = 1; __i < state_size; ++__i)
      .           	{
 12,460 ( 0.00%)  	  _UIntType __x = _M_x[__i - 1];
  7,476 ( 0.00%)  	  __x ^= __x >> (__w - 2);
  7,476 ( 0.00%)  	  __x *= __f;
  9,968 ( 0.00%)  	  __x += __detail::__mod<_UIntType, __n>(__i);
 72,268 ( 0.01%)  => /usr/include/c++/13.2.1/bits/random.h:unsigned long std::__detail::__mod<unsigned long, 624ul, 1ul, 0ul>(unsigned long) (2,492x)
  7,476 ( 0.00%)  	  _M_x[__i] = __detail::__mod<_UIntType,
  7,476 ( 0.00%)  	    __detail::_Shift<_UIntType, __w>::__value>(__x);
 49,840 ( 0.01%)  => /usr/include/c++/13.2.1/bits/random.h:unsigned long std::__detail::__mod<unsigned long, 4294967296ul, 1ul, 0ul>(unsigned long) (2,492x)
      .           	}
      8 ( 0.00%)        _M_p = state_size;
     12 ( 0.00%)      }
      .           
      .             template<typename _UIntType,
      .           	   size_t __w, size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               template<typename _Sseq>
      .                 auto
-- line 351 ----------------------------------------
-- line 389 ----------------------------------------
      .                 }
      .           
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               void
    396 ( 0.00%)      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::
      .               _M_gen_rand(void)
      .               {
    132 ( 0.00%)        const _UIntType __upper_mask = (~_UIntType()) << __r;
    132 ( 0.00%)        const _UIntType __lower_mask = ~__upper_mask;
      .           
 90,420 ( 0.01%)        for (size_t __k = 0; __k < (__n - __m); ++__k)
      .                   {
209,748 ( 0.03%)  	  _UIntType __y = ((_M_x[__k] & __upper_mask)
149,820 ( 0.02%)  			   | (_M_x[__k + 1] & __lower_mask));
299,640 ( 0.05%)  	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
224,719 ( 0.04%)  		       ^ ((__y & 0x01) ? __a : 0));
      .                   }
      .           
157,344 ( 0.02%)        for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
      .           	{
365,904 ( 0.06%)  	  _UIntType __y = ((_M_x[__k] & __upper_mask)
261,360 ( 0.04%)  			   | (_M_x[__k + 1] & __lower_mask));
522,720 ( 0.08%)  	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
391,944 ( 0.06%)  		       ^ ((__y & 0x01) ? __a : 0));
      .           	}
      .           
    792 ( 0.00%)        _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
    396 ( 0.00%)  		       | (_M_x[0] & __lower_mask));
    924 ( 0.00%)        _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
    851 ( 0.00%)  		       ^ ((__y & 0x01) ? __a : 0));
    264 ( 0.00%)        _M_p = 0;
    396 ( 0.00%)      }
      .           
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               void
      .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
-- line 433 ----------------------------------------
-- line 445 ----------------------------------------
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f>
      .               typename
      .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::result_type
320,000 ( 0.05%)      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
      .           			    __s, __b, __t, __c, __l, __f>::
      .               operator()()
      .               {
      .                 // Reload the vector - cost is O(n) amortized over n calls.
320,000 ( 0.05%)        if (_M_p >= state_size)
    396 ( 0.00%)  	_M_gen_rand();
2,677,902 ( 0.42%)  => /usr/include/c++/13.2.1/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand() (132x)
      .           
      .                 // Calculate o(x(i)).
640,000 ( 0.10%)        result_type __z = _M_x[_M_p++];
320,000 ( 0.05%)        __z ^= (__z >> __u) & __d;
320,000 ( 0.05%)        __z ^= (__z << __s) & __b;
320,000 ( 0.05%)        __z ^= (__z << __t) & __c;
240,000 ( 0.04%)        __z ^= (__z >> __l);
      .           
 80,000 ( 0.01%)        return __z;
160,000 ( 0.03%)      }
      .           
      .             template<typename _UIntType, size_t __w,
      .           	   size_t __n, size_t __m, size_t __r,
      .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
      .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
      .           	   _UIntType __f, typename _CharT, typename _Traits>
      .               std::basic_ostream<_CharT, _Traits>&
      .               operator<<(std::basic_ostream<_CharT, _Traits>& __os,
-- line 477 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_function.h
--------------------------------------------------------------------------------
Ir               

-- line 1158 ----------------------------------------
      .               struct _Identity
      .               : public unary_function<_Tp, _Tp>
      .               {
      .                 _Tp&
      .                 operator()(_Tp& __x) const
      .                 { return __x; }
      .           
      .                 const _Tp&
107,252 ( 0.02%)        operator()(const _Tp& __x) const
 80,439 ( 0.01%)        { return __x; }
      .               };
      .           
      .             // Partial specialization, avoids confusing errors in e.g. std::set<const T>.
      .             template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };
      .           
      .             template<typename _Pair>
      .               struct _Select1st
      .               : public unary_function<_Pair, typename _Pair::first_type>
-- line 1175 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../trieNodeTypes.h
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .                   std::atomic<bool> stop;
      .                   
      .                   std::atomic<DelNode *> target;
      .           
      .                   //Used to count the number of places in which the UpdateNode is stored (or will be stored) in shared memory.
      .                   //It should be safe to retire an update node when retireCounter is 0.
      .                   std::atomic<int> retireCounter; 
      .           
620,356 ( 0.10%)          UpdateNode(int64_t x, UpdateNode *latest) : key(x), status(INACTIVE), latestNext(latest), stop(false), target(nullptr), retireCounter(0), ListNode(){
836,132 ( 0.13%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/ListNode.h:RU_ALL_Node::RU_ALL_Node() (13,486x)
836,132 ( 0.13%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/ListNode.h:ListNode::ListNode() (13,486x)
337,150 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<bool>::atomic(bool) (13,486x)
310,178 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<int>::atomic(int) (13,486x)
310,178 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::atomic(DelNode*) (13,486x)
310,178 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::atomic(UpdateNode*) (13,486x)
134,860 ( 0.02%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::atomic(STATUS) (13,486x)
      .                   
 40,458 ( 0.01%)          }
 74,151 ( 0.01%)          UpdateNode(int64_t x) : UpdateNode(x, nullptr) {
1,867,257 ( 0.29%)  => FomitchevRuppert/../trieNodeTypes.h:UpdateNode::UpdateNode(long, UpdateNode*) (6,741x)
      .           
 20,223 ( 0.00%)          }
      .                   virtual void retire(NodeRecordManager &recordMgr) = 0;
     18 ( 0.00%)          virtual ~UpdateNode(){}
      .                   TYPE type; 
      .           
      .                   //TODO used for debugging only.
      .                   virtual string toString() = 0;
      .           };
      .           
      .           
      .           
      .           
      .           
      .           
      .           class InsNode : public UpdateNode{
      .               public:
 87,633 ( 0.01%)          InsNode(int64_t key): UpdateNode(key){
1,961,631 ( 0.31%)  => FomitchevRuppert/../trieNodeTypes.h:UpdateNode::UpdateNode(long) (6,741x)
 13,482 ( 0.00%)              type = INS;
 20,223 ( 0.00%)          }
      .                   void retire(NodeRecordManager &recordMgr){
      .                       //insList.removeKey(this);
      .                       recordMgr.retire(threadID(), this);
      .                   }
     14 ( 0.00%)          ~InsNode(){
      .           
     12 ( 0.00%)          }
     18 ( 0.00%)  => FomitchevRuppert/../trieNodeTypes.h:UpdateNode::~UpdateNode() (2x)
      .                   string toString(){
      .                       return std::to_string((uintptr_t)this) + ": INS Node, retCounter:" + std::to_string(retireCounter) + " State:" + std::to_string(status);
      .                   }
      .               
      .           };
      .           
      .           #warning updateNodeMax is currently created as a copy node?, which is then retired when the notify node is retired. TODO is this even valid?
      .           class NotifyNode{
-- line 73 ----------------------------------------
-- line 75 ----------------------------------------
      .               const int64_t key;
      .               UpdateNode * const updateNode;
      .               InsNode * const updateNodeMax;
      .               const int64_t notifyThreshold;
      .           
      .               //Pointer to the next node in the notify list....
      .               NotifyNode *next;
      .               
121,266 ( 0.02%)      NotifyNode(UpdateNode *upNode, InsNode *upNodeMax, int64_t threshold) : 
303,165 ( 0.05%)          key(upNode->key), updateNode(upNode), updateNodeMax(upNodeMax), notifyThreshold(threshold), next(nullptr){
 60,633 ( 0.01%)      }
 33,685 ( 0.01%)      void retire(NodeRecordManager &recordMgr){
      .                   //notList.removeKey(this);
      .                   //int reclaim = updateNode->retireCounter.fetch_add(-1);
      .                   //if(reclaim == 1)updateNode->retire(recordMgr);
 26,948 ( 0.00%)          if(updateNodeMax)updateNodeMax->retire(recordMgr);
 53,896 ( 0.01%)          recordMgr.retire( threadID(), this);
3,153,063 ( 0.50%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::retire<NotifyNode>(int, NotifyNode*) (6,737x)
 60,633 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (6,737x)
 20,211 ( 0.00%)      }
      .           };
      .           
      .           //UpdateNodes that are meant to represent the values of infinity and zero for the notifyThreshold
     17 ( 0.00%)  InsNode INFINITY_THRES(INT64_MAX);
    883 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    309 ( 0.00%)  => FomitchevRuppert/../trieNodeTypes.h:InsNode::InsNode(long) (1x)
     77 ( 0.00%)  => ???:__cxa_atexit (1x)
     12 ( 0.00%)  InsNode ZERO_THRES(0);
    309 ( 0.00%)  => FomitchevRuppert/../trieNodeTypes.h:InsNode::InsNode(long) (1x)
     77 ( 0.00%)  => ???:__cxa_atexit (1x)
      .           
      .           class PredecessorNode : public ListNode{
      .               public:
      .               const int64_t key;
      .               std::atomic<UpdateNode*> notifyThreshold;
      .               std::atomic<NotifyNode*> notifyListHead;
      .               
589,886 ( 0.09%)      PredecessorNode(int64_t k) : key(k), notifyThreshold(&INFINITY_THRES), notifyListHead(nullptr), ListNode() {
1,662,406 ( 0.26%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/ListNode.h:ListNode::ListNode() (26,813x)
616,699 ( 0.10%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::atomic(UpdateNode*) (26,813x)
616,699 ( 0.10%)  => /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::atomic(NotifyNode*) (26,813x)
      .               
 80,439 ( 0.01%)      }
100,380 ( 0.02%)      void retire(NodeRecordManager &recordMgr){
100,380 ( 0.02%)          NotifyNode *curNode = notifyListHead;
1,084,104 ( 0.17%)  => /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::operator NotifyNode*() const (20,076x)
 73,702 ( 0.01%)          while(curNode){
 20,211 ( 0.00%)              NotifyNode *next = curNode->next;
 33,685 ( 0.01%)              curNode->retire(recordMgr); //Retire notify node...
3,348,436 ( 0.53%)  => FomitchevRuppert/../trieNodeTypes.h:NotifyNode::retire(record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>&) (6,737x)
 13,474 ( 0.00%)              curNode = next;
      .                   }
160,608 ( 0.03%)          recordMgr.retire(threadID(), this); //Retire the predecessor node.
7,539,832 ( 1.19%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::retire<PredecessorNode>(int, PredecessorNode*) (20,076x)
180,684 ( 0.03%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (20,076x)
 60,228 ( 0.01%)      }
 60,228 ( 0.01%)      ~PredecessorNode(){
      .                   
 60,228 ( 0.01%)      }
      .           };
      .           
      .           
      .           
      .           
      .           class DelNode : public UpdateNode{
      .               public:
      .                   std::atomic<int> upper0Boundary;
      .                   
      .                   #warning 64 as maximum lower 1 boundary.
      .                   MinReg64 lower1Boundary; 
      .                   const int64_t delPred;
      .                   int64_t delPred2;
      .                   PredecessorNode * const delPredNode;
 60,705 ( 0.01%)          DelNode(int64_t key, int b, UpdateNode *latest, int64_t delP, PredecessorNode *delPredN)
 33,725 ( 0.01%)          : UpdateNode(key, latest), upper0Boundary(0), 
155,135 ( 0.02%)  => /usr/include/c++/13.2.1/atomic:std::atomic<int>::atomic(int) (6,745x)
161,880 ( 0.03%)              lower1Boundary(b+1), delPred(delP), delPred2(-1), delPredNode(delPredN){
1,868,365 ( 0.29%)  => FomitchevRuppert/../trieNodeTypes.h:UpdateNode::UpdateNode(long, UpdateNode*) (6,745x)
485,640 ( 0.08%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::MinReg64(int) (6,745x)
 13,490 ( 0.00%)                  type = DEL;
 20,235 ( 0.00%)          }
    120 ( 0.00%)          DelNode(int64_t key, int b, UpdateNode *latest) : DelNode(key, b, latest, -1, nullptr){
  3,320 ( 0.00%)  => FomitchevRuppert/../trieNodeTypes.h:DelNode::DelNode(long, int, UpdateNode*, long, PredecessorNode*) (8x)
      .                       
     24 ( 0.00%)          }
      .                   //Should be used to retire a delete node.
      .                   void retire(NodeRecordManager &recordMgr){
      .                       //delList.removeKey(this);
      .                       if(delPredNode)delPredNode->retire(recordMgr);
      .                       recordMgr.retire(threadID(), this);
      .                   }
      .                   ~DelNode(){
      .                   }
-- line 149 ----------------------------------------
-- line 154 ----------------------------------------
      .           
      .           
      .           //Pred nodes can be reclaimed as soon as they're removed from P_ALL....
      .           //Update nodes can be reclaimed upon removal from latest list...
      .           
      .           class TrieNode{
      .               public:
      .                   std::atomic<DelNode*>dNodePtr;
     45 ( 0.00%)          TrieNode(){
     45 ( 0.00%)          }
     75 ( 0.00%)          TrieNode(const TrieNode &node){
     60 ( 0.00%)              DelNode *ptr = node.dNodePtr;
    810 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const (15x)
     75 ( 0.00%)              dNodePtr = ptr;
  1,095 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator=(DelNode*) (15x)
     45 ( 0.00%)          }
      .           };
      .           
      .           class LatestList{
      .               public:
      .               std::atomic<UpdateNode*> head;
      .           };
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           
        .                 struct _Vector_impl_data
        .                 {
        .           	pointer _M_start;
        .           	pointer _M_finish;
        .           	pointer _M_end_of_storage;
        .           
        .           	_GLIBCXX20_CONSTEXPR
  443,064 ( 0.07%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  886,128 ( 0.14%)  	: _M_start(), _M_finish(), _M_end_of_storage()
  443,064 ( 0.07%)  	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	_GLIBCXX20_CONSTEXPR
       12 ( 0.00%)  	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
       24 ( 0.00%)  	: _M_start(__x._M_start), _M_finish(__x._M_finish),
       12 ( 0.00%)  	  _M_end_of_storage(__x._M_end_of_storage)
       39 ( 0.00%)  	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
        .           #endif
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	void
        .           	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
        .           	{
        .           	  _M_start = __x._M_start;
        .           	  _M_finish = __x._M_finish;
-- line 116 ----------------------------------------
-- line 125 ----------------------------------------
        .           	  // information used by TBAA.
        .           	  _Vector_impl_data __tmp;
        .           	  __tmp._M_copy_data(*this);
        .           	  _M_copy_data(__x);
        .           	  __x._M_copy_data(__tmp);
        .           	}
        .                 };
        .           
1,329,219 ( 0.21%)        struct _Vector_impl
        .           	: public _Tp_alloc_type, public _Vector_impl_data
        .                 {
        .           	_GLIBCXX20_CONSTEXPR
1,181,432 ( 0.19%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
        .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
  443,037 ( 0.07%)  	: _Tp_alloc_type()
  886,068 ( 0.14%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_Vector_impl_data::_Vector_impl_data() (73,839x)
  443,037 ( 0.07%)  	{ }
        .           
        .           	_GLIBCXX20_CONSTEXPR
      117 ( 0.00%)  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
       27 ( 0.00%)  	: _Tp_alloc_type(__a)
       12 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<LatestList, std::allocator<LatestList> >::_Vector_impl_data::_Vector_impl_data() (1x)
       27 ( 0.00%)  	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	// Not defaulted, to enforce noexcept(true) even when
        .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
        .           	_GLIBCXX20_CONSTEXPR
       18 ( 0.00%)  	_Vector_impl(_Vector_impl&& __x) noexcept
       51 ( 0.00%)  	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
       87 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl_data::_Vector_impl_data(std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl_data&&) (3x)
       36 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:std::remove_reference<std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl&>::type&& std::move<std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl&>(std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl&) (6x)
       12 ( 0.00%)  	{ }
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Vector_impl(_Tp_alloc_type&& __a) noexcept
        .           	: _Tp_alloc_type(std::move(__a))
        .           	{ }
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
-- line 161 ----------------------------------------
-- line 290 ----------------------------------------
        .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
        .                 };
        .           
        .               public:
        .                 typedef _Alloc allocator_type;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Tp_alloc_type&
  564,396 ( 0.09%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
  564,396 ( 0.09%)        { return this->_M_impl; }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 const _Tp_alloc_type&
  121,308 ( 0.02%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
  121,308 ( 0.02%)        { return this->_M_impl; }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 allocator_type
        .                 get_allocator() const _GLIBCXX_NOEXCEPT
        .                 { return allocator_type(_M_get_Tp_allocator()); }
        .           
        .           #if __cplusplus >= 201103L
1,476,790 ( 0.23%)        _Vector_base() = default;
2,067,492 ( 0.33%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<DelNode*, std::allocator<DelNode*> >::_Vector_impl::_Vector_impl() (73,839x)
        .           #else
        .                 _Vector_base() { }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
        .                 : _M_impl(__a) { }
        .           
-- line 320 ----------------------------------------
-- line 322 ----------------------------------------
        .           #if !_GLIBCXX_INLINE_VERSION
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(size_t __n)
        .                 : _M_impl()
        .                 { _M_create_storage(__n); }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
       63 ( 0.00%)        _Vector_base(size_t __n, const allocator_type& __a)
       45 ( 0.00%)        : _M_impl(__a)
      264 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl::_Vector_impl(std::allocator<TrieNode> const&) (8x)
       81 ( 0.00%)        { _M_create_storage(__n); }
    2,038 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_M_create_storage(unsigned long) (8x)
        .           
        .           #if __cplusplus >= 201103L
       39 ( 0.00%)        _Vector_base(_Vector_base&&) = default;
      210 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl::_Vector_impl(std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_impl&&) (3x)
        .           
        .                 // Kept for ABI compatibility.
        .           # if !_GLIBCXX_INLINE_VERSION
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
        .                 : _M_impl(std::move(__a)) { }
        .           
        .                 _GLIBCXX20_CONSTEXPR
-- line 343 ----------------------------------------
-- line 356 ----------------------------------------
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
        .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
        .                 { }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
  590,764 ( 0.09%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
        .                 {
1,033,837 ( 0.16%)  	_M_deallocate(_M_impl._M_start,
1,589,299 ( 0.25%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_M_deallocate(InsNode**, unsigned long) (73,839x)
1,033,838 ( 0.16%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
  886,146 ( 0.14%)        }
1,402,941 ( 0.22%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_Vector_impl::~_Vector_impl() (73,839x)
        .           
        .               public:
        .                 _Vector_impl _M_impl;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 pointer
  101,125 ( 0.02%)        _M_allocate(size_t __n)
        .                 {
        .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
  121,350 ( 0.02%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   40,450 ( 0.01%)        }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
1,007,442 ( 0.16%)        _M_deallocate(pointer __p, size_t __n)
        .                 {
        .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
  335,814 ( 0.05%)  	if (__p)
  121,350 ( 0.02%)  	  _Tr::deallocate(_M_impl, __p, __n);
  503,721 ( 0.08%)        }
        .           
        .               protected:
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
       45 ( 0.00%)        _M_create_storage(size_t __n)
        .                 {
       63 ( 0.00%)  	this->_M_impl._M_start = this->_M_allocate(__n);
      918 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<LatestList, std::allocator<LatestList> >::_M_allocate(unsigned long) (1x)
       36 ( 0.00%)  	this->_M_impl._M_finish = this->_M_impl._M_start;
       63 ( 0.00%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
       27 ( 0.00%)        }
        .               };
        .           
        .             /**
        .              *  @brief A standard container which offers fixed time access to
        .              *  individual elements in any order.
        .              *
        .              *  @ingroup sequences
        .              *  @headerfile vector
-- line 406 ----------------------------------------
-- line 493 ----------------------------------------
        .                 }
        .           
        .                 static pointer
        .                 _S_do_relocate(pointer, pointer, pointer __result,
        .           		     _Tp_alloc_type&, false_type) noexcept
        .                 { return __result; }
        .           
        .                 static _GLIBCXX20_CONSTEXPR pointer
  283,024 ( 0.04%)        _S_relocate(pointer __first, pointer __last, pointer __result,
        .           		  _Tp_alloc_type& __alloc) noexcept
        .                 {
        .           #if __cpp_if_constexpr
        .           	// All callers have already checked _S_use_relocate() so just do it.
  242,592 ( 0.04%)  	return std::__relocate_a(__first, __last, __result, __alloc);
    1,356 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:std::vector<TrieNode, std::allocator<TrieNode> >* std::__relocate_a<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >(std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > >&) (6x)
        .           #else
        .           	using __do_it = __bool_constant<_S_use_relocate()>;
        .           	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
        .           #endif
   80,864 ( 0.01%)        }
        .           #endif // C++11
        .           
        .               protected:
        .                 using _Base::_M_allocate;
        .                 using _Base::_M_deallocate;
        .                 using _Base::_M_impl;
        .                 using _Base::_M_get_Tp_allocator;
        .           
-- line 519 ----------------------------------------
-- line 520 ----------------------------------------
        .               public:
        .                 // [23.2.4.1] construct/copy/destroy
        .                 // (assign() and get_allocator() are also listed in this section)
        .           
        .                 /**
        .                  *  @brief  Creates a %vector with no elements.
        .                  */
        .           #if __cplusplus >= 201103L
1,476,790 ( 0.23%)        vector() = default;
       38 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_Vector_base() (1x)
        .           #else
        .                 vector() { }
        .           #endif
        .           
        .                 /**
        .                  *  @brief  Creates a %vector with no elements.
        .                  *  @param  __a  An allocator object.
        .                  */
-- line 536 ----------------------------------------
-- line 545 ----------------------------------------
        .                  *  @param  __n  The number of elements to initially create.
        .                  *  @param  __a  An allocator.
        .                  *
        .                  *  This constructor fills the %vector with @a __n default
        .                  *  constructed elements.
        .                  */
        .                 explicit
        .                 _GLIBCXX20_CONSTEXPR
       35 ( 0.00%)        vector(size_type __n, const allocator_type& __a = allocator_type())
       60 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
    1,160 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_base(unsigned long, std::allocator<TrieNode> const&) (4x)
      336 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::_S_check_init_len(unsigned long, std::allocator<TrieNode> const&) (4x)
       45 ( 0.00%)        { _M_default_initialize(__n); }
      875 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::_M_default_initialize(unsigned long) (4x)
        .           
        .                 /**
        .                  *  @brief  Creates a %vector with copies of an exemplar element.
        .                  *  @param  __n  The number of elements to initially create.
        .                  *  @param  __value  An element to copy.
        .                  *  @param  __a  An allocator.
        .                  *
        .                  *  This constructor fills the %vector with @a __n copies of @a __value.
-- line 563 ----------------------------------------
-- line 590 ----------------------------------------
        .                  *  All the elements of @a __x are copied, but any unused capacity in
        .                  *  @a __x  will not be copied
        .                  *  (i.e. capacity() == size() in the new %vector).
        .                  *
        .                  *  The newly-created %vector uses a copy of the allocator object used
        .                  *  by @a __x (unless the allocator traits dictate a different object).
        .                  */
        .                 _GLIBCXX20_CONSTEXPR
       44 ( 0.00%)        vector(const vector& __x)
        .                 : _Base(__x.size(),
       96 ( 0.00%)  	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    1,310 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_base(unsigned long, std::allocator<TrieNode> const&) (4x)
       48 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::size() const (4x)
       24 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_M_get_Tp_allocator() const (4x)
        .                 {
        8 ( 0.00%)  	this->_M_impl._M_finish =
       56 ( 0.00%)  	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
    4,198 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:TrieNode* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*, TrieNode>(__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, __gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >, TrieNode*, std::allocator<TrieNode>&) (4x)
      120 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::end() const (4x)
      116 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::begin() const (4x)
        .           				      this->_M_impl._M_start,
       16 ( 0.00%)  				      _M_get_Tp_allocator());
       24 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_M_get_Tp_allocator() (4x)
       40 ( 0.00%)        }
        .           
        .           #if __cplusplus >= 201103L
        .                 /**
        .                  *  @brief  %Vector move constructor.
        .                  *
        .                  *  The newly-created %vector contains the exact contents of the
        .                  *  moved instance.
        .                  *  The contents of the moved instance are a valid, but unspecified
        .                  *  %vector.
        .                  */
       39 ( 0.00%)        vector(vector&&) noexcept = default;
      249 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_Vector_base(std::_Vector_base<TrieNode, std::allocator<TrieNode> >&&) (3x)
        .           
        .                 /// Copy constructor with alternative allocator
        .                 _GLIBCXX20_CONSTEXPR
        .                 vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
        .                 : _Base(__x.size(), __a)
        .                 {
        .           	this->_M_impl._M_finish =
        .           	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
-- line 625 ----------------------------------------
-- line 722 ----------------------------------------
        .           
        .                 /**
        .                  *  The dtor only erases the elements, and note that if the
        .                  *  elements themselves are pointers, the pointed-to memory is
        .                  *  not touched in any way.  Managing the pointer is the user's
        .                  *  responsibility.
        .                  */
        .                 _GLIBCXX20_CONSTEXPR
  590,764 ( 0.09%)        ~vector() _GLIBCXX_NOEXCEPT
        .                 {
1,033,837 ( 0.16%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  443,073 ( 0.07%)  		      _M_get_Tp_allocator());
       66 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::_M_get_Tp_allocator() (11x)
        .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
  886,146 ( 0.14%)        }
    2,240 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<TrieNode, std::allocator<TrieNode> >::~_Vector_base() (11x)
        .           
        .                 /**
        .                  *  @brief  %Vector assignment operator.
        .                  *  @param  __x  A %vector of identical element and allocator types.
        .                  *
        .                  *  All the elements of @a __x are copied, but any unused capacity in
        .                  *  @a __x will not be copied.
        .                  *
-- line 743 ----------------------------------------
-- line 862 ----------------------------------------
        .                 // iterators
        .                 /**
        .                  *  Returns a read/write iterator that points to the first
        .                  *  element in the %vector.  Iteration is done in ordinary
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 iterator
1,033,795 ( 0.16%)        begin() _GLIBCXX_NOEXCEPT
1,624,535 ( 0.26%)        { return iterator(this->_M_impl._M_start); }
       11 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<LatestList*, std::vector<LatestList, std::allocator<LatestList> > >::__normal_iterator(LatestList* const&) (1x)
        .           
        .                 /**
        .                  *  Returns a read-only (constant) iterator that points to the
        .                  *  first element in the %vector.  Iteration is done in ordinary
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 const_iterator
       28 ( 0.00%)        begin() const _GLIBCXX_NOEXCEPT
       44 ( 0.00%)        { return const_iterator(this->_M_impl._M_start); }
       44 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >::__normal_iterator(TrieNode const* const&) (4x)
        .           
        .                 /**
        .                  *  Returns a read/write iterator that points one past the last
        .                  *  element in the %vector.  Iteration is done in ordinary
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 iterator
1,175,286 ( 0.18%)        end() _GLIBCXX_NOEXCEPT
2,014,776 ( 0.32%)        { return iterator(this->_M_impl._M_finish); }
       11 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<LatestList*, std::vector<LatestList, std::allocator<LatestList> > >::__normal_iterator(LatestList* const&) (1x)
        .           
        .                 /**
        .                  *  Returns a read-only (constant) iterator that points one past
        .                  *  the last element in the %vector.  Iteration is done in
        .                  *  ordinary element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 const_iterator
       28 ( 0.00%)        end() const _GLIBCXX_NOEXCEPT
       48 ( 0.00%)        { return const_iterator(this->_M_impl._M_finish); }
       44 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<TrieNode const*, std::vector<TrieNode, std::allocator<TrieNode> > >::__normal_iterator(TrieNode const* const&) (4x)
        .           
        .                 /**
        .                  *  Returns a read/write reverse iterator that points to the
        .                  *  last element in the %vector.  Iteration is done in reverse
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 reverse_iterator
-- line 909 ----------------------------------------
-- line 981 ----------------------------------------
        .                 crend() const noexcept
        .                 { return const_reverse_iterator(begin()); }
        .           #endif
        .           
        .                 // [23.2.4.2] capacity
        .                 /**  Returns the number of elements in the %vector.  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 size_type
  242,661 ( 0.04%)        size() const _GLIBCXX_NOEXCEPT
  727,995 ( 0.11%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
        .           
        .                 /**  Returns the size() of the largest possible %vector.  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 size_type
  161,728 ( 0.03%)        max_size() const _GLIBCXX_NOEXCEPT
  283,024 ( 0.04%)        { return _S_max_size(_M_get_Tp_allocator()); }
  579,554 ( 0.09%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::_S_max_size(std::allocator<InsNode*> const&) (13,478x)
   80,868 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<InsNode*, std::allocator<InsNode*> >::_M_get_Tp_allocator() const (13,478x)
        .           
        .           #if __cplusplus >= 201103L
        .                 /**
        .                  *  @brief  Resizes the %vector to the specified number of elements.
        .                  *  @param  __new_size  Number of elements the %vector should contain.
        .                  *
        .                  *  This function will %resize the %vector to the specified
        .                  *  number of elements.  If the number is smaller than the
-- line 1004 ----------------------------------------
-- line 1115 ----------------------------------------
        .                  *
        .                  *  This operator allows for easy, array-style, data access.
        .                  *  Note that data access with this operator is unchecked and
        .                  *  out_of_range lookups are not defined. (For checked lookups
        .                  *  see at().)
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 reference
2,793,552 ( 0.44%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
        .                 {
        .           	__glibcxx_requires_subscript(__n);
4,090,194 ( 0.64%)  	return *(this->_M_impl._M_start + __n);
1,396,776 ( 0.22%)        }
        .           
        .                 /**
        .                  *  @brief  Subscript access to the data contained in the %vector.
        .                  *  @param __n The index of the element for which data should be
        .                  *  accessed.
        .                  *  @return  Read-only (constant) reference to data.
        .                  *
        .                  *  This operator allows for easy, array-style, data access.
-- line 1135 ----------------------------------------
-- line 1222 ----------------------------------------
        .                 }
        .           
        .                 /**
        .                  *  Returns a read/write reference to the data at the last
        .                  *  element of the %vector.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 reference
  141,491 ( 0.02%)        back() _GLIBCXX_NOEXCEPT
        .                 {
        .           	__glibcxx_requires_nonempty();
  242,556 ( 0.04%)  	return *(end() - 1);
  249,343 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::operator-(long) const (6,739x)
  202,170 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::end() (6,739x)
   47,173 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >::operator*() const (6,739x)
  101,065 ( 0.02%)        }
        .           
        .                 /**
        .                  *  Returns a read-only (constant) reference to the data at the
        .                  *  last element of the %vector.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 const_reference
        .                 back() const _GLIBCXX_NOEXCEPT
-- line 1242 ----------------------------------------
-- line 1270 ----------------------------------------
        .                  *  This is a typical stack operation.  The function creates an
        .                  *  element at the end of the %vector and assigns the given data
        .                  *  to it.  Due to the nature of a %vector this operation can be
        .                  *  done in constant time if the %vector has preallocated space
        .                  *  available.
        .                  */
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
       36 ( 0.00%)        push_back(const value_type& __x)
        .                 {
       24 ( 0.00%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        .           	  {
        .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
        7 ( 0.00%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        .           				     __x);
        5 ( 0.00%)  	    ++this->_M_impl._M_finish;
        .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        .           	  }
        .           	else
       27 ( 0.00%)  	  _M_realloc_insert(end(), __x);
    7,508 ( 0.00%)  => /usr/include/c++/13.2.1/bits/vector.tcc:void std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_M_realloc_insert<std::vector<TrieNode, std::allocator<TrieNode> > const&>(__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >, std::vector<TrieNode, std::allocator<TrieNode> > const&) (3x)
       90 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::end() (3x)
       33 ( 0.00%)        }
        .           
        .           #if __cplusplus >= 201103L
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
  101,065 ( 0.02%)        push_back(value_type&& __x)
  222,343 ( 0.03%)        { emplace_back(std::move(__x)); }
13,055,314 ( 2.05%)  => /usr/include/c++/13.2.1/bits/vector.tcc:DelNode*& std::vector<DelNode*, std::allocator<DelNode*> >::emplace_back<DelNode*>(DelNode*&&) (13,474x)
   80,844 ( 0.01%)  => /usr/include/c++/13.2.1/bits/move.h:std::remove_reference<DelNode*&>::type&& std::move<DelNode*&>(DelNode*&) (13,474x)
        .           
        .                 template<typename... _Args>
        .           #if __cplusplus > 201402L
        .           	_GLIBCXX20_CONSTEXPR
        .           	reference
        .           #else
        .           	void
        .           #endif
-- line 1304 ----------------------------------------
-- line 1704 ----------------------------------------
        .           	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
        .           					_M_get_Tp_allocator());
        .                 }
        .           
        .           #if __cplusplus >= 201103L
        .                 // Called by the vector(n) constructor.
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
       25 ( 0.00%)        _M_default_initialize(size_type __n)
        .                 {
       10 ( 0.00%)  	this->_M_impl._M_finish =
       30 ( 0.00%)  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
      311 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_uninitialized.h:LatestList* std::__uninitialized_default_n_a<LatestList*, unsigned long, LatestList>(LatestList*, unsigned long, std::allocator<LatestList>&) (1x)
       20 ( 0.00%)  					   _M_get_Tp_allocator());
        6 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<LatestList, std::allocator<LatestList> >::_M_get_Tp_allocator() (1x)
       15 ( 0.00%)        }
        .           #endif
        .           
        .                 // Internal assign functions follow.  The *_aux functions do the actual
        .                 // assignment work for the range versions.
        .           
        .                 // Called by the range assign to implement [23.1.1]/9
        .           
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1725 ----------------------------------------
-- line 1885 ----------------------------------------
        .                 iterator
        .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
        .                 { return _M_insert_rval(__position, std::move(__v)); }
        .           #endif
        .           
        .                 // Called by _M_fill_insert, _M_insert_aux etc.
        .                 _GLIBCXX20_CONSTEXPR
        .                 size_type
  202,160 ( 0.03%)        _M_check_len(size_type __n, const char* __s) const
        .                 {
  283,024 ( 0.04%)  	if (max_size() - size() < __n)
  404,340 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::max_size() const (6,739x)
   80,868 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::size() const (6,739x)
        .           	  __throw_length_error(__N(__s));
        .           
  323,456 ( 0.05%)  	const size_type __len = size() + (std::max)(size(), __n);
  161,736 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::size() const (13,478x)
   94,346 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (6,739x)
  222,376 ( 0.04%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
  404,340 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::max_size() const (6,739x)
   80,868 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::size() const (6,739x)
  121,296 ( 0.02%)        }
        .           
        .                 // Called by constructors to check initial size.
        .                 static _GLIBCXX20_CONSTEXPR size_type
       75 ( 0.00%)        _S_check_init_len(size_type __n, const allocator_type& __a)
        .                 {
       35 ( 0.00%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
       43 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::_S_max_size(std::allocator<LatestList> const&) (1x)
        .           	  __throw_length_error(
        .           	      __N("cannot create std::vector larger than max_size()"));
        5 ( 0.00%)  	return __n;
       30 ( 0.00%)        }
        .           
        .                 static _GLIBCXX20_CONSTEXPR size_type
  283,059 ( 0.04%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        .                 {
        .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
        .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
        .           	// (even if std::allocator_traits::max_size says we can).
  323,496 ( 0.05%)  	const size_t __diffmax
        .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
   40,437 ( 0.01%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
  242,622 ( 0.04%)  	return (std::min)(__diffmax, __allocmax);
  175,214 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (13,478x)
  202,185 ( 0.03%)        }
        .           
        .                 // Internal erase functions follow.
        .           
        .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
        .                 // _M_assign_aux.
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
        .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
-- line 1930 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/new_allocator.h
--------------------------------------------------------------------------------
Ir                 

-- line 80 ----------------------------------------
        .           #if __cplusplus >= 201103L
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 2103. propagate_on_container_move_assignment
        .                 typedef std::true_type propagate_on_container_move_assignment;
        .           #endif
        .           
        .                 __attribute__((__always_inline__))
        .                 _GLIBCXX20_CONSTEXPR
  308,582 ( 0.05%)        __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        .           
        .                 __attribute__((__always_inline__))
        .                 _GLIBCXX20_CONSTEXPR
       21 ( 0.00%)        __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
        .           
        .                 template<typename _Tp1>
        .           	__attribute__((__always_inline__))
        .           	_GLIBCXX20_CONSTEXPR
        .           	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        .           
        .           #if __cplusplus <= 201703L
1,851,618 ( 0.29%)        ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        .           
        .                 pointer
        .                 address(reference __x) const _GLIBCXX_NOEXCEPT
        .                 { return std::__addressof(__x); }
        .           
        .                 const_pointer
        .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
        .                 { return std::__addressof(__x); }
-- line 108 ----------------------------------------
-- line 114 ----------------------------------------
        .           #else
        .           # define _GLIBCXX_OPERATOR_NEW ::operator new
        .           # define _GLIBCXX_OPERATOR_DELETE ::operator delete
        .           #endif
        .           
        .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
        .                 // about what the return value is when __n == 0.
        .                 _GLIBCXX_NODISCARD _Tp*
1,019,816 ( 0.16%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
        .                 {
        .           #if __cplusplus >= 201103L
        .           	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           	// 3308. std::allocator<void>().allocate(n)
        .           	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        .           #endif
        .           
  892,339 ( 0.14%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
        .           	  {
        .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .           	    // 3190. allocator::allocate sometimes returns too little storage
        .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        .           	      std::__throw_bad_array_new_length();
        .           	    std::__throw_bad_alloc();
        .           	  }
        .           
-- line 138 ----------------------------------------
-- line 139 ----------------------------------------
        .           #if __cpp_aligned_new
        .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        .           	  {
        .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        .           	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        .           							   __al));
        .           	  }
        .           #endif
  845,314 ( 0.13%)  	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
1,448,333 ( 0.23%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (26,813x)
  254,954 ( 0.04%)        }
        .           
        .                 // __p is not permitted to be a null pointer.
        .                 void
  764,862 ( 0.12%)        deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        .                 {
        .           #if __cpp_sized_deallocation
        .           # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        .           #else
        .           # define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        .           #endif
        .           
        .           #if __cpp_aligned_new
        .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        .           	  {
        .           	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        .           				     std::align_val_t(alignof(_Tp)));
        .           	    return;
        .           	  }
        .           #endif
  999,607 ( 0.16%)  	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      756 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (8x)
      662 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
  254,954 ( 0.04%)        }
        .           
        .           #undef _GLIBCXX_SIZED_DEALLOC
        .           #undef _GLIBCXX_OPERATOR_DELETE
        .           #undef _GLIBCXX_OPERATOR_NEW
        .           
        .           #if __cplusplus <= 201703L
        .                 __attribute__((__always_inline__))
        .                 size_type
        .                 max_size() const _GLIBCXX_USE_NOEXCEPT
   67,250 ( 0.01%)        { return _M_max_size(); }
        .           
        .           #if __cplusplus >= 201103L
        .                 template<typename _Up, typename... _Args>
        .           	__attribute__((__always_inline__))
        .           	void
        .           	construct(_Up* __p, _Args&&... __args)
        .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
1,107,260 ( 0.17%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  187,691 ( 0.03%)  => /usr/include/c++/13.2.1/new:operator new(unsigned long, void*) (26,813x)
  160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
        .           
        .                 template<typename _Up>
        .           	__attribute__((__always_inline__))
        .           	void
        .           	destroy(_Up* __p)
        .           	noexcept(std::is_nothrow_destructible<_Up>::value)
   26,825 ( 0.00%)  	{ __p->~_Up(); }
      318 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::~vector() (3x)
        .           #else
        .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        .                 // 402. wrong new expression in [some_] allocator::construct
        .                 __attribute__((__always_inline__))
        .                 void
        .                 construct(pointer __p, const _Tp& __val)
        .                 { ::new((void *)__p) _Tp(__val); }
        .           
-- line 202 ----------------------------------------
-- line 221 ----------------------------------------
        .           #endif
        .           
        .               private:
        .                 __attribute__((__always_inline__))
        .                 _GLIBCXX_CONSTEXPR size_type
        .                 _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        .                 {
        .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
  194,727 ( 0.03%)  	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        .           #else
        .           	return std::size_t(-1) / sizeof(_Tp);
        .           #endif
        .                 }
        .               };
        .           
        .           _GLIBCXX_END_NAMESPACE_VERSION
        .           } // namespace
-- line 237 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/hashtable.h
--------------------------------------------------------------------------------
Ir                 

-- line 408 ----------------------------------------
        .                 void
        .                 _M_update_bbegin(__node_ptr __n)
        .                 {
        .           	_M_before_begin._M_nxt = __n;
        .           	_M_update_bbegin();
        .                 }
        .           
        .                 bool
  214,504 ( 0.03%)        _M_uses_single_bucket(__buckets_ptr __bkts) const
  482,634 ( 0.08%)        { return __builtin_expect(__bkts == &_M_single_bucket, false); }
        .           
        .                 bool
        .                 _M_uses_single_bucket() const
        .                 { return _M_uses_single_bucket(_M_buckets); }
        .           
        .                 static constexpr size_t
   13,474 ( 0.00%)        __small_size_threshold() noexcept
        .                 {
        .           	return
    6,737 ( 0.00%)  	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
   33,685 ( 0.01%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_hash_traits<std::hash<DelNode*> >::__small_size_threshold() (6,737x)
   13,474 ( 0.00%)        }
        .           
        .                 __hashtable_alloc&
        .                 _M_base_alloc() { return *this; }
        .           
        .                 __buckets_ptr
        .                 _M_allocate_buckets(size_type __bkt_count)
        .                 {
        .           	if (__builtin_expect(__bkt_count == 1, false))
-- line 436 ----------------------------------------
-- line 438 ----------------------------------------
        .           	    _M_single_bucket = nullptr;
        .           	    return &_M_single_bucket;
        .           	  }
        .           
        .           	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
        .                 }
        .           
        .                 void
  321,756 ( 0.05%)        _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
        .                 {
  375,382 ( 0.06%)  	if (_M_uses_single_bucket(__bkts))
  348,569 ( 0.05%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const (26,813x)
   53,626 ( 0.01%)  	  return;
        .           
        .           	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
  107,252 ( 0.02%)        }
        .           
        .                 void
  214,504 ( 0.03%)        _M_deallocate_buckets()
  589,886 ( 0.09%)        { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
  777,577 ( 0.12%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) (26,813x)
        .           
        .                 // Gets bucket begin, deals with the fact that non-empty buckets contain
        .                 // their before begin node.
        .                 __node_ptr
        .                 _M_bucket_begin(size_type __bkt) const;
        .           
        .                 __node_ptr
  181,089 ( 0.03%)        _M_begin() const
  241,452 ( 0.04%)        { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
        .           
        .                 // Assign *this using another _Hashtable instance. Whether elements
        .                 // are copied or moved depends on the _Ht reference.
        .                 template<typename _Ht>
        .           	void
        .           	_M_assign_elements(_Ht&&);
        .           
        .                 template<typename _Ht, typename _NodeGenerator>
-- line 473 ----------------------------------------
-- line 522 ----------------------------------------
        .                 template<typename _InputIterator>
        .           	_Hashtable(_InputIterator __first, _InputIterator __last,
        .           		   size_type __bkt_count_hint,
        .           		   const _Hash&, const _Equal&, const allocator_type&,
        .           		   false_type __uks);
        .           
        .               public:
        .                 // Constructor, destructor, assignment, swap
1,769,658 ( 0.28%)        _Hashtable() = default;
  938,455 ( 0.15%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_base<DelNode*, DelNode*, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable_base() (26,813x)
  589,886 ( 0.09%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<DelNode*, false> > >::_Hashtable_alloc() (26,813x)
  321,756 ( 0.05%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) (26,813x)
  214,504 ( 0.03%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hash_node_base::_Hash_node_base() (26,813x)
        .           
        .                 _Hashtable(const _Hashtable&);
        .           
        .                 _Hashtable(const _Hashtable&, const allocator_type&);
        .           
        .                 explicit
        .                 _Hashtable(size_type __bkt_count_hint,
        .           		 const _Hash& __hf = _Hash(),
-- line 538 ----------------------------------------
-- line 619 ----------------------------------------
        .           		      __is_nothrow_swappable<_Equal>>::value);
        .           
        .                 // Basic container operations
        .                 iterator
        .                 begin() noexcept
        .                 { return iterator(_M_begin()); }
        .           
        .                 const_iterator
   47,159 ( 0.01%)        begin() const noexcept
   94,318 ( 0.01%)        { return const_iterator(_M_begin()); }
  154,951 ( 0.02%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<DelNode*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<DelNode*, false>*) (6,737x)
   47,159 ( 0.01%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const (6,737x)
        .           
        .                 iterator
        .                 end() noexcept
        .                 { return iterator(nullptr); }
        .           
        .                 const_iterator
   94,318 ( 0.01%)        end() const noexcept
  134,740 ( 0.02%)        { return const_iterator(nullptr); }
  309,902 ( 0.05%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Node_const_iterator<DelNode*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<DelNode*, false>*) (13,474x)
        .           
        .                 const_iterator
        .                 cbegin() const noexcept
        .                 { return const_iterator(_M_begin()); }
        .           
        .                 const_iterator
        .                 cend() const noexcept
        .                 { return const_iterator(nullptr); }
        .           
        .                 size_type
   20,211 ( 0.00%)        size() const noexcept
   26,948 ( 0.00%)        { return _M_element_count; }
        .           
        .                 _GLIBCXX_NODISCARD bool
        .                 empty() const noexcept
        .                 { return size() == 0; }
        .           
        .                 allocator_type
        .                 get_allocator() const noexcept
        .                 { return allocator_type(this->_M_node_allocator()); }
-- line 656 ----------------------------------------
-- line 1572 ----------------------------------------
        .           	  __ht.clear();
        .           	}
        .               }
        .           
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
  214,504 ( 0.03%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
        .               ~_Hashtable() noexcept
        .               {
        .                 // Getting a bucket index from a node shall not throw because it is used
        .                 // in methods (erase, swap...) that shall not throw. Need a complete
        .                 // type to check this, so do it in the destructor not at class scope.
        .                 static_assert(noexcept(declval<const __hash_code_base_access&>()
        .           			._M_bucket_index(declval<const __node_value_type&>(),
        .           					 (std::size_t)0)),
        .           		    "Cache the hash code or qualify your functors involved"
        .           		    " in hash code and bucket index computation with noexcept");
        .           
  160,878 ( 0.03%)        clear();
1,608,780 ( 0.25%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() (26,813x)
  160,878 ( 0.03%)        _M_deallocate_buckets();
1,179,772 ( 0.19%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() (26,813x)
  321,756 ( 0.05%)      }
  777,577 ( 0.12%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<InsNode*, false> > >::~_Hashtable_alloc() (26,813x)
        .           
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
        .               void
        .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 1603 ----------------------------------------
-- line 1664 ----------------------------------------
        .                 return iterator(_M_find_node(__bkt, __k, __code));
        .               }
        .           
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
        .               auto
   60,633 ( 0.01%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
        .               find(const key_type& __k) const
        .               -> const_iterator
        .               {
   60,633 ( 0.01%)        if (size() <= __small_size_threshold())
   67,370 ( 0.01%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::__small_size_threshold() (6,737x)
   47,159 ( 0.01%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::size() const (6,737x)
        .           	{
  107,792 ( 0.02%)  	  for (auto __it = begin(); __it != end(); ++__it)
  269,480 ( 0.04%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const (6,737x)
  343,587 ( 0.05%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const (6,737x)
   80,844 ( 0.01%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::operator!=(std::__detail::_Node_iterator_base<DelNode*, false> const&, std::__detail::_Node_iterator_base<DelNode*, false> const&) (6,737x)
        .           	    if (this->_M_key_equals(__k, *__it._M_cur))
        .           	      return __it;
   26,948 ( 0.00%)  	  return end();
  269,480 ( 0.04%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const (6,737x)
        .           	}
        .           
        .                 __hash_code __code = this->_M_hash_code(__k);
        .                 std::size_t __bkt = _M_bucket_index(__code);
        .                 return const_iterator(_M_find_node(__bkt, __k, __code));
   40,422 ( 0.01%)      }
        .           
        .           #if __cplusplus > 201703L
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
        .               template<typename _Kt, typename, typename>
        .                 auto
-- line 1696 ----------------------------------------
-- line 1721 ----------------------------------------
        .                 }
        .           #endif
        .           
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
        .               auto
   53,896 ( 0.01%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
        .               count(const key_type& __k) const
        .               -> size_type
        .               {
   40,422 ( 0.01%)        auto __it = find(__k);
1,374,348 ( 0.22%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::find(DelNode* const&) const (6,737x)
   20,211 ( 0.00%)        if (!__it._M_cur)
   13,474 ( 0.00%)  	return 0;
        .           
        .                 if (__unique_keys::value)
        .           	return 1;
        .           
        .                 // All equivalent values are next to each other, if we find a
        .                 // non-equivalent value after an equivalent one it means that we won't
        .                 // find any new equivalent value.
        .                 size_type __result = 1;
        .                 for (auto __ref = __it++;
        .           	   __it._M_cur && this->_M_node_equals(*__ref._M_cur, *__it._M_cur);
        .           	   ++__it)
        .           	++__result;
        .           
        .                 return __result;
   33,685 ( 0.01%)      }
        .           
        .           #if __cplusplus > 201703L
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
        .               template<typename _Kt, typename, typename>
        .                 auto
-- line 1759 ----------------------------------------
-- line 2497 ----------------------------------------
        .                 return iterator(__n);
        .               }
        .           
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
        .               void
  214,504 ( 0.03%)      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
        .               clear() noexcept
        .               {
  429,008 ( 0.07%)        this->_M_deallocate_nodes(_M_begin());
  321,756 ( 0.05%)  => /usr/include/c++/13.2.1/bits/hashtable_policy.h:std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<InsNode*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<InsNode*, false>*) (26,813x)
  187,691 ( 0.03%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const (26,813x)
  375,386 ( 0.06%)        __builtin_memset(_M_buckets, 0,
  348,569 ( 0.05%)  => ???:0x0000000000158ac0 (26,813x)
  107,252 ( 0.02%)  		       _M_bucket_count * sizeof(__node_base_ptr));
  107,252 ( 0.02%)        _M_element_count = 0;
  107,252 ( 0.02%)        _M_before_begin._M_nxt = nullptr;
  160,878 ( 0.03%)      }
        .           
        .             template<typename _Key, typename _Value, typename _Alloc,
        .           	   typename _ExtractKey, typename _Equal,
        .           	   typename _Hash, typename _RangeHash, typename _Unused,
        .           	   typename _RehashPolicy, typename _Traits>
        .               void
        .               _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        .           	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
-- line 2522 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/ListNode.h
--------------------------------------------------------------------------------
Ir               

-- line 25 ----------------------------------------
      .           
      .           /**
      .           * ListNode class
      .           */
      .           class ListNode{
      .               public:
      .                   std::atomic<uintptr_t> successor; //Contains <right, status>. The status is contained within the lowest 3 bits of the pointer.
      .                   std::atomic<ListNode*> backlink;  
523,939 ( 0.08%)          ListNode() : successor(0), backlink(nullptr){
926,969 ( 0.15%)  => /usr/include/c++/13.2.1/atomic:std::atomic<unsigned long>::atomic(unsigned long) (40,303x)
926,969 ( 0.15%)  => /usr/include/c++/13.2.1/atomic:std::atomic<ListNode*>::atomic(ListNode*) (40,303x)
      .           
120,909 ( 0.02%)          }
      .                   //TODO ifdef 
      .           };
      .           
      .           
      .           /**
      .           * Similar but different class RU_ALL_Node.
      .           */
      .           class RU_ALL_Node{
      .               public:
      .                   std::atomic<uintptr_t> successor; //Contains <right, status>. The status is contained within the lowest 3 bits of the pointer.
      .                   std::atomic<RU_ALL_Node*> backlink;  
175,344 ( 0.03%)          RU_ALL_Node() : successor(0), backlink(nullptr){
310,224 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<RU_ALL_Node*>::atomic(RU_ALL_Node*) (13,488x)
310,224 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<unsigned long>::atomic(unsigned long) (13,488x)
      .           
 40,464 ( 0.01%)          }
      .           };
      .           
      .           std::string toString(ListNode *lNode){
      .               return std::to_string(lNode->successor);
      .           }
      .           
      .           #endif
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir               

-- line 474 ----------------------------------------
      .                  *  @param  __a  An allocator.
      .                  *  @param  __n  The number of objects to allocate space for.
      .                  *
      .                  *  Calls @c a.allocate(n)
      .                 */
      .                 [[__nodiscard__,__gnu__::__always_inline__]]
      .                 static _GLIBCXX20_CONSTEXPR pointer
      .                 allocate(allocator_type& __a, size_type __n)
939,377 ( 0.15%)        { return __a.allocate(__n); }
    897 ( 0.00%)  => /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<LatestList>::allocate(unsigned long, void const*) (1x)
      .           
      .                 /**
      .                  *  @brief  Allocate memory.
      .                  *  @param  __a  An allocator.
      .                  *  @param  __n  The number of objects to allocate space for.
      .                  *  @param  __hint Aid to locality.
      .                  *  @return Memory of suitable size and alignment for @a n objects
      .                  *          of type @c value_type
-- line 490 ----------------------------------------
-- line 508 ----------------------------------------
      .                  *  @param  __p  Pointer to the memory to deallocate.
      .                  *  @param  __n  The number of objects space was allocated for.
      .                  *
      .                  *  Calls <tt> a.deallocate(p, n) </tt>
      .                 */
      .                 [[__gnu__::__always_inline__]]
      .                 static _GLIBCXX20_CONSTEXPR void
      .                 deallocate(allocator_type& __a, pointer __p, size_type __n)
892,339 ( 0.14%)        { __a.deallocate(__p, __n); }
    297 ( 0.00%)  => /usr/include/c++/13.2.1/bits/new_allocator.h:std::__new_allocator<std::vector<TrieNode, std::allocator<TrieNode> > >::deallocate(std::vector<TrieNode, std::allocator<TrieNode> >*, unsigned long) (3x)
      .           
      .                 /**
      .                  *  @brief  Construct an object of type `_Up`
      .                  *  @param  __a  An allocator.
      .                  *  @param  __p  Pointer to memory of suitable size and alignment for
      .                  *	       an object of type `_Up`.
      .                  *  @param  __args Constructor arguments.
      .                  *
-- line 524 ----------------------------------------
-- line 529 ----------------------------------------
      .                 template<typename _Up, typename... _Args>
      .           	[[__gnu__::__always_inline__]]
      .           	static _GLIBCXX20_CONSTEXPR void
      .           	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
      .           		  _Args&&... __args)
      .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
      .           	{
      .           #if __cplusplus <= 201703L
805,272 ( 0.13%)  	  __a.construct(__p, std::forward<_Args>(__args)...);
160,878 ( 0.03%)  => /usr/include/c++/13.2.1/bits/move.h:PredecessorNode* const& std::forward<PredecessorNode* const&>(std::remove_reference<PredecessorNode* const&>::type&) (26,813x)
      .           #else
      .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
      .           #endif
100,659 ( 0.02%)  	}
      .           
      .                 /**
      .                  *  @brief  Destroy an object of type @a _Up
      .                  *  @param  __a  An allocator.
      .                  *  @param  __p  Pointer to the object to destroy
      .                  *
      .                  *  Calls @c __a.destroy(__p).
      .                 */
-- line 549 ----------------------------------------
-- line 553 ----------------------------------------
      .           	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
      .           	noexcept(is_nothrow_destructible<_Up>::value)
      .           	{
      .           #if __cplusplus <= 201703L
      .           	  __a.destroy(__p);
      .           #else
      .           	  std::destroy_at(__p);
      .           #endif
 26,816 ( 0.00%)  	}
      .           
      .                 /**
      .                  *  @brief  The maximum supported allocation size
      .                  *  @param  __a  An allocator.
      .                  *  @return @c __a.max_size()
      .                 */
      .                 [[__gnu__::__always_inline__]]
      .                 static _GLIBCXX20_CONSTEXPR size_type
      .                 max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      .                 {
      .           #if __cplusplus <= 201703L
 67,250 ( 0.01%)  	return __a.max_size();
      .           #else
      .           	return size_t(-1) / sizeof(value_type);
      .           #endif
      .                 }
      .           
      .                 /**
      .                  *  @brief  Obtain an allocator to use when copying a container.
      .                  *  @param  __rhs  An allocator.
      .                  *  @return @c __rhs
      .                 */
      .                 [[__gnu__::__always_inline__]]
      .                 static _GLIBCXX20_CONSTEXPR allocator_type
      .                 select_on_container_copy_construction(const allocator_type& __rhs)
      4 ( 0.00%)        { return __rhs; }
      .               };
      .           
      .             /// Explicit specialization for std::allocator<void>.
      .             template<>
      .               struct allocator_traits<allocator<void>>
      .               {
      .                 /// The allocator type
      .                 using allocator_type = allocator<void>;
-- line 595 ----------------------------------------
-- line 939 ----------------------------------------
      .           
      .           #if _GLIBCXX_HOSTED
      .             template<typename _ForwardIterator, typename _Tp>
      .               __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
      .               inline void
      .               _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      .           	     allocator<_Tp>&)
      .               {
738,455 ( 0.12%)        std::_Destroy(__first, __last);
    220 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_construct.h:void std::_Destroy<TrieNode*>(TrieNode*, TrieNode*) (11x)
147,691 ( 0.02%)      }
      .           #endif
      .             /// @endcond
      .           
      .           _GLIBCXX_END_NAMESPACE_VERSION
      .           } // namespace std
      .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h
--------------------------------------------------------------------------------
Ir                 

-- line 41 ----------------------------------------
        .               };
        .           
        .               long long getSizeInNodes() { return 0; }
        .               std::string getSizeString() { return ""; }
        .               std::string getDetailsString() { return ""; }
        .           
        .               inline static bool quiescenceIsPerRecordType() { return false; }
        .               inline static bool shouldHelp() { return true; } // FOR DEBUGGING PURPOSES
2,083,340 ( 0.33%)      inline static bool supportsCrashRecovery() { return false; }
        .               inline bool isProtected(const int tid, T * const obj);
        .               inline bool isQProtected(const int tid, T * const obj);
        .               inline static bool isQuiescent(const int tid) {
        .                   COUTATOMICTID("reclaimer_interface::isQuiescent(tid) is not implemented!"<<std::endl);
        .                   exit(-1);
        .               }
        .           
        .               // for hazard pointers (and reference counting)
-- line 57 ----------------------------------------
-- line 80 ----------------------------------------
        .               inline void deinitThread(const int tid);
        .               void debugPrintStatus(const int tid);
        .           
        .               template <typename First, typename... Rest>
        .               void debugGCSingleThreaded(void * const * const reclaimers, const int numReclaimers) {
        .                   // do nothing unless function is replaced
        .               }
        .           
       49 ( 0.00%)      reclaimer_interface(const int numProcesses, Pool *_pool, debugInfo * const _debug, RecoveryMgr<void *> * const _recoveryMgr = NULL)
       21 ( 0.00%)              : recoveryMgr(_recoveryMgr)
       21 ( 0.00%)              , debug(_debug)
       21 ( 0.00%)              , NUM_PROCESSES(numProcesses)
       21 ( 0.00%)              , pool(_pool) {
        .                   VERBOSE DEBUG COUTATOMIC("constructor reclaimer_interface"<<std::endl);
       21 ( 0.00%)      }
       21 ( 0.00%)      ~reclaimer_interface() {
        .                   VERBOSE DEBUG COUTATOMIC("destructor reclaimer_interface"<<std::endl);
       21 ( 0.00%)      }
        .           };
        .           
        .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../common.h
--------------------------------------------------------------------------------
Ir                 

        .           #include <chrono>
        .           #pragma once
1,913,169 ( 0.30%)  int threadID(int id = -1){
        .               static thread_local int thread_id = -1;
1,913,177 ( 0.30%)      if(thread_id == -1)thread_id = id;
        .               
  637,723 ( 0.10%)      return thread_id;
1,275,446 ( 0.20%)  }
        .           const int NUM_THREADS = 8;
        .           uint64_t millis(){
        .               return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
        .           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/ext/aligned_buffer.h
--------------------------------------------------------------------------------
Ir               

-- line 56 ----------------------------------------
      .                 alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
      .           
      .                 __aligned_membuf() = default;
      .           
      .                 // Can be used to avoid value-initialization zeroing _M_storage.
      .                 __aligned_membuf(std::nullptr_t) { }
      .           
      .                 void*
160,878 ( 0.03%)        _M_addr() noexcept
160,878 ( 0.03%)        { return static_cast<void*>(&_M_storage); }
      .           
      .                 const void*
      .                 _M_addr() const noexcept
      .                 { return static_cast<const void*>(&_M_storage); }
      .           
      .                 _Tp*
214,504 ( 0.03%)        _M_ptr() noexcept
268,130 ( 0.04%)        { return static_cast<_Tp*>(_M_addr()); }
321,756 ( 0.05%)  => /usr/include/c++/13.2.1/ext/aligned_buffer.h:__gnu_cxx::__aligned_membuf<PredecessorNode*>::_M_addr() (53,626x)
      .           
      .                 const _Tp*
      .                 _M_ptr() const noexcept
      .                 { return static_cast<const _Tp*>(_M_addr()); }
      .               };
      .           
      .           #if _GLIBCXX_INLINE_VERSION
      .             template<typename _Tp>
-- line 81 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_set.h
--------------------------------------------------------------------------------
Ir               

-- line 161 ----------------------------------------
      .           
      .                 // allocation/deallocation
      .                 /**
      .                  *  @brief  Default constructor creates no elements.
      .                  */
      .           #if __cplusplus < 201103L
      .                 set() : _M_t() { }
      .           #else
268,130 ( 0.04%)        set() = default;
1,716,032 ( 0.27%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_Rb_tree() (26,813x)
      .           #endif
      .           
      .                 /**
      .                  *  @brief  Creates a %set with no elements.
      .                  *  @param  __comp  Comparator to use.
      .                  *  @param  __a  An allocator object.
      .                  */
      .                 explicit
-- line 177 ----------------------------------------
-- line 275 ----------------------------------------
      .           	: _M_t(_Key_alloc_type(__a))
      .           	{ _M_t._M_insert_range_unique(__first, __last); }
      .           
      .                 /**
      .                  *  The dtor only erases the elements, and note that if the elements
      .                  *  themselves are pointers, the pointed-to memory is not touched in any
      .                  *  way. Managing the pointer is the user's responsibility.
      .                  */
268,130 ( 0.04%)        ~set() = default;
8,553,925 ( 1.35%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::~_Rb_tree() (26,813x)
      .           #endif
      .           
      .                 /**
      .                  *  @brief  %Set assignment operator.
      .                  *
      .                  *  Whether the allocator is copied depends on the allocator traits.
      .                  */
      .           #if __cplusplus < 201103L
-- line 291 ----------------------------------------
-- line 503 ----------------------------------------
      .                  *
      .                  *  This function attempts to insert an element into the %set.  A %set
      .                  *  relies on unique keys and thus an element is only inserted if it is
      .                  *  not already present in the %set.
      .                  *
      .                  *  Insertion requires logarithmic time.
      .                  */
      .                 std::pair<iterator, bool>
214,504 ( 0.03%)        insert(const value_type& __x)
      .                 {
      .           	std::pair<typename _Rep_type::iterator, bool> __p =
187,691 ( 0.03%)  	  _M_t._M_insert_unique(__x);
21,976,952 ( 3.46%)  => /usr/include/c++/13.2.1/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<PredecessorNode*>, bool> std::_Rb_tree<PredecessorNode*, PredecessorNode*, std::_Identity<PredecessorNode*>, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::_M_insert_unique<PredecessorNode* const&>(PredecessorNode* const&) (26,813x)
241,317 ( 0.04%)  	return std::pair<iterator, bool>(__p.first, __p.second);
1,260,211 ( 0.20%)  => /usr/include/c++/13.2.1/bits/stl_pair.h:std::pair<std::_Rb_tree_const_iterator<PredecessorNode*>, bool>::pair<std::_Rb_tree_iterator<PredecessorNode*>&, bool&, true>(std::_Rb_tree_iterator<PredecessorNode*>&, bool&) (26,813x)
134,065 ( 0.02%)        }
      .           
      .           #if __cplusplus >= 201103L
      .                 std::pair<iterator, bool>
      .                 insert(value_type&& __x)
      .                 {
      .           	std::pair<typename _Rep_type::iterator, bool> __p =
      .           	  _M_t._M_insert_unique(std::move(__x));
      .           	return std::pair<iterator, bool>(__p.first, __p.second);
-- line 524 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir               

-- line 225 ----------------------------------------
      .              *
      .              *  This is the simple classic generic implementation.  It will work on
      .              *  temporary expressions, since they are only evaluated once, unlike a
      .              *  preprocessor macro.
      .             */
      .             template<typename _Tp>
      .               _GLIBCXX14_CONSTEXPR
      .               inline const _Tp&
269,000 ( 0.04%)      min(const _Tp& __a, const _Tp& __b)
      .               {
      .                 // concept requirements
      .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      .                 //return __b < __a ? __b : __a;
403,500 ( 0.06%)        if (__b < __a)
 53,626 ( 0.01%)  	return __b;
 40,437 ( 0.01%)        return __a;
134,500 ( 0.02%)      }
      .           
      .             /**
      .              *  @brief This does what you think it does.
      .              *  @ingroup sorting_algorithms
      .              *  @param  __a  A thing of arbitrary type.
      .              *  @param  __b  Another thing of arbitrary type.
      .              *  @return   The greater of the parameters.
      .              *
      .              *  This is the simple classic generic implementation.  It will work on
      .              *  temporary expressions, since they are only evaluated once, unlike a
      .              *  preprocessor macro.
      .             */
      .             template<typename _Tp>
      .               _GLIBCXX14_CONSTEXPR
      .               inline const _Tp&
188,116 ( 0.03%)      max(const _Tp& __a, const _Tp& __b)
      .               {
      .                 // concept requirements
      .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      .                 //return  __a < __b ? __b : __a;
282,174 ( 0.04%)        if (__a < __b)
 40,428 ( 0.01%)  	return __b;
 26,815 ( 0.00%)        return __a;
 94,058 ( 0.01%)      }
      .           
      .             /**
      .              *  @brief This does what you think it does.
      .              *  @ingroup sorting_algorithms
      .              *  @param  __a  A thing of arbitrary type.
      .              *  @param  __b  Another thing of arbitrary type.
      .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
      .              *  @return   The lesser of the parameters.
-- line 273 ----------------------------------------
-- line 308 ----------------------------------------
      .                 return __a;
      .               }
      .           
      .             // Fallback implementation of the function in bits/stl_iterator.h used to
      .             // remove the __normal_iterator wrapper. See copy, fill, ...
      .             template<typename _Iterator>
      .               _GLIBCXX20_CONSTEXPR
      .               inline _Iterator
363,888 ( 0.06%)      __niter_base(_Iterator __it)
      .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
363,888 ( 0.06%)      { return __it; }
      .           
      .             template<typename _Ite, typename _Seq>
      .               _Ite
      .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
      .           		 std::random_access_iterator_tag>&);
      .           
      .             // Reverse the __niter_base transformation to get a
      .             // __normal_iterator back again (this assumes that __normal_iterator
-- line 326 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/RU_ALL.h
--------------------------------------------------------------------------------
Ir               

-- line 21 ----------------------------------------
      .           //Customized version of the linked list extension that is specifically used for the RUALL of Jeremy's Trie.
      .           const uint64_t NotifFlag = 4; 
      .           
      .           //Node that is used to set pNode.notifyThreshold
      .           class NotifyDescNode{
      .               public:
      .               PredecessorNode *pNode;
      .               RU_ALL_Node *next;
301,950 ( 0.05%)      NotifyDescNode(PredecessorNode *p) : pNode(p), next(nullptr) {
      .           
100,650 ( 0.02%)      }
      .           };
      .           
      .           class RU_ALL_INS_DescNode{
      .               public:
      .               RU_ALL_Node *newNode;
      .               RU_ALL_Node *next;
121,284 ( 0.02%)      RU_ALL_INS_DescNode(RU_ALL_Node *newNode) : newNode(newNode), next(nullptr) {
      .           
 40,428 ( 0.01%)      }
      .           };
      .           
      .           
      .           typedef record_manager<reclaimer_debra<>, allocator_new<>, pool_none<>, RU_ALL_INS_DescNode, NotifyDescNode> DescManager;
      .           
      .           //Linearizable lock-free sorted linked list based on the PODC Paper by Mikhail Fomitchev and Eric Ruppert.
      .           //compare is the function used to compare the nodes of the linked list
      .           template <int(*compare)(RU_ALL_Node*, RU_ALL_Node*)>
      .           class RU_ALL_TYPE {
      .               public:
      .                   RU_ALL_Node tail, head; //Head, tail of the linked list. 
      .                   DescManager *const descMgr; //Record manager used to allocate insert_descriptor nodes.
      .               public:
     25 ( 0.00%)          RU_ALL_TYPE() : tail(), head(), descMgr(new DescManager(NUM_THREADS)){
 15,177 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::record_manager(int, int) (1x)
    187 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
    124 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/ListNode.h:RU_ALL_Node::RU_ALL_Node() (2x)
      6 ( 0.00%)              head.successor.store((uintptr_t)&tail);
      7 ( 0.00%)          }
      4 ( 0.00%)          ~RU_ALL_TYPE(){ 
      .                       //Deinitialize all threads.
     28 ( 0.00%)              for(int i = 0;i < NUM_THREADS;++i){
     48 ( 0.00%)                  descMgr->deinitThread(i);
7,973,775 ( 1.26%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::deinitThread(int) (8x)
      .                       }
     14 ( 0.00%)              delete descMgr;
1,000,052 ( 0.16%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::~record_manager() (1x)
    163 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
      3 ( 0.00%)          }
      .           
 67,370 ( 0.01%)          uintptr_t helpNotify(RU_ALL_Node *prev, NotifyDescNode *desc){
 20,211 ( 0.00%)              RU_ALL_Node *next = desc->next;
 20,211 ( 0.00%)              assert(next != &tail);
 13,474 ( 0.00%)              assert(next != 0);
      .                       UpdateNode *expected;
 47,159 ( 0.01%)              if(prev == &head)expected = &INFINITY_THRES;
      .                       else expected = (UpdateNode*)prev;
      .                       //Update notify threshold.
 80,844 ( 0.01%)              desc->pNode->notifyThreshold.compare_exchange_strong(expected, (UpdateNode*)next);
693,911 ( 0.11%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::compare_exchange_strong(UpdateNode*&, UpdateNode*, std::memory_order) (6,737x)
      .                       
 20,211 ( 0.00%)              uintptr_t result = (uintptr_t)desc + NotifFlag;
 33,685 ( 0.01%)              prev->successor.compare_exchange_strong(result, (uintptr_t)next);
      .                       
      .           
      .                       //Return contents of prev->successor immediately following CAS...
 33,685 ( 0.01%)              if(result == (uintptr_t)desc + NotifFlag){
 67,370 ( 0.01%)                  descMgr->retire(threadID(), desc);
1,904,522 ( 0.30%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::retire<NotifyDescNode>(int, NotifyDescNode*) (6,737x)
 60,633 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (6,737x)
 13,474 ( 0.00%)                  return (uintptr_t)next;
      .                       }
      .                       else{
      .                           return result;
      .                       } 
 40,422 ( 0.01%)          }
      .           
134,760 ( 0.02%)          uintptr_t helpInsert(RU_ALL_Node *prev, RU_ALL_INS_DescNode *desc){
 13,476 ( 0.00%)              uintptr_t expected = 0;
 26,952 ( 0.00%)              uintptr_t result = expected;
107,808 ( 0.02%)              desc->newNode->successor.compare_exchange_strong(result, (uintptr_t)desc->next);
      .           
      .                       //If insert node was marked....
 53,904 ( 0.01%)              if((result & STATUS_MASK) == Marked){ 
      .                           expected = (uintptr_t)desc + InsFlag;
      .                           result = expected;
      .                           //newNode has already been removed.
      .                           //Attempt to CAS to remove descriptor.
      .                           prev->successor.compare_exchange_strong(result, (uintptr_t)desc->next);
      .                           if(result == expected){
      .                               descMgr->retire(threadID(), desc);
      .                               return (uintptr_t)desc->next;
      .                           }
      .                           else{
      .                               return result;
      .                           }
      .                       }
      .                       else{
 40,428 ( 0.01%)                  expected = (uintptr_t)desc + InsFlag;
 26,952 ( 0.00%)                  result = expected;
      .                           //Attempt to complete insertion of insert node.
 80,856 ( 0.01%)                  prev->successor.compare_exchange_strong(result, (uintptr_t)desc->newNode);
 40,428 ( 0.01%)                  if(result == expected){
134,760 ( 0.02%)                      descMgr->retire(threadID(), desc);
2,534,950 ( 0.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::retire<RU_ALL_INS_DescNode>(int, RU_ALL_INS_DescNode*) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
 40,428 ( 0.01%)                      return (uintptr_t)desc->newNode;
      .                           }
      .                           else{
      .                               return result;
      .                           }
      .                       }
 80,856 ( 0.01%)          }
      .                   
      .                   //Precondition: prev.successor was <delNode, DelFlag> at an earlier point, and delNode is Marked.
121,284 ( 0.02%)          uintptr_t helpMarked(RU_ALL_Node *prev, RU_ALL_Node *delNode){
 67,380 ( 0.01%)              RU_ALL_Node *next = (RU_ALL_Node*)((uintptr_t)delNode->successor & NEXT_MASK);
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
 40,428 ( 0.01%)              uintptr_t expected = (uintptr_t)delNode + DelFlag;
 26,952 ( 0.00%)              uintptr_t result = expected;
 67,380 ( 0.01%)              prev->successor.compare_exchange_strong(result, (uintptr_t)next);
      .                       
 67,380 ( 0.01%)              if(result == expected)return (uintptr_t)next;
      .                       else return result;
 67,380 ( 0.01%)          }
      .                   //Precondition, prev.successor was <delNode, DelFlag> at an earlier point.
121,284 ( 0.02%)          uintptr_t helpRemove(RU_ALL_Node *prev, RU_ALL_Node *delNode){
 80,856 ( 0.01%)              delNode->backlink = prev;
983,748 ( 0.15%)  => /usr/include/c++/13.2.1/atomic:std::atomic<RU_ALL_Node*>::operator=(RU_ALL_Node*) (13,476x)
 53,904 ( 0.01%)              uintptr_t succ = delNode->successor.load(); //The value of delNode's successor pointer
 40,428 ( 0.01%)              uintptr_t state = succ & STATUS_MASK;
 40,428 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
      .           
 40,428 ( 0.01%)              while(state != Marked){ //While delNode is not marked...
 26,952 ( 0.00%)                  if(state == DelFlag){ //Help with deletion of its successor, if it is flagged....
      .                               succ = helpRemove(delNode, (RU_ALL_Node*)next);
      .                           }
 26,952 ( 0.00%)                  else if(state == InsFlag){ //Help with insertion while it points to an insertion descriptor...
      .                               succ = helpInsert(delNode, (RU_ALL_INS_DescNode*)next);
      .                           }
 26,952 ( 0.00%)                  else if(state == NotifFlag){
      .                               succ = helpNotify(delNode, (NotifyDescNode*)next);
      .                           }
      .                           else{ //Attempt to mark the node if the status was normal...
 40,428 ( 0.01%)                      uintptr_t markedSuccessor = (uintptr_t)next + Marked;
 26,952 ( 0.00%)                      succ = next;
 67,380 ( 0.01%)                      delNode->successor.compare_exchange_strong(succ, markedSuccessor); //Try to update from <next, Normal> to <next, Marked>
 53,904 ( 0.01%)                      if(succ == next)break; //The CAS succeeded!
      .                           }
      .                           state = succ & STATUS_MASK;
      .                           next = succ & NEXT_MASK;
      .                       }
 94,332 ( 0.01%)              succ = helpMarked(prev, delNode);
2,331,348 ( 0.37%)  => FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpMarked(RU_ALL_Node*, RU_ALL_Node*) (13,476x)
 13,476 ( 0.00%)              return succ;
 67,380 ( 0.01%)          }
      .           
      .                   //Used to compare two nodes in the list
      .                   //Returns a positive value if n1 must be later in the list than n2
      .                   inline int __attribute__((always_inline)) compNode(RU_ALL_Node *n1, RU_ALL_Node *n2){
161,712 ( 0.03%)              if(n1 == &tail)return 1;
 13,476 ( 0.00%)              else return compare(n1,n2);
      .                   }
      .           
121,284 ( 0.02%)          void insert(RU_ALL_Node *node){
107,808 ( 0.02%)              if((node->successor & STATUS_MASK) == Marked)return;
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
      .           
 94,332 ( 0.01%)              descMgr->initThread(threadID());
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
252,315 ( 0.04%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::initThread(int) (13,476x)
134,760 ( 0.02%)              auto guard = descMgr->getGuard(threadID());
8,847,049 ( 1.39%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::getGuard(int, bool) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
      .           
 40,428 ( 0.01%)              RU_ALL_Node *curr = &head;
 53,904 ( 0.01%)              uintptr_t succ = curr->successor;
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
 40,428 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
 40,428 ( 0.01%)              uint64_t state = succ & STATUS_MASK;
148,236 ( 0.02%)              RU_ALL_INS_DescNode *newDesc = descMgr->template allocate<RU_ALL_INS_DescNode>(threadID(), node);
4,087,561 ( 0.64%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RU_ALL_INS_DescNode* record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::allocate<RU_ALL_INS_DescNode, RU_ALL_Node*>(int, RU_ALL_Node*) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
 53,904 ( 0.01%)              while(next != (uintptr_t)node){
 26,952 ( 0.00%)                  if(state == Normal){
134,760 ( 0.02%)                      if(compNode((RU_ALL_Node*)next,node) <= 0){ //node should be placed further along in the list if next <= node
      .                                   curr = (RU_ALL_Node*)next;
      .                                   succ = curr->successor;
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                                   continue;
      .                               }
107,808 ( 0.02%)                      if((node->successor & STATUS_MASK) == Marked){
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
      .                                   descMgr->retire(threadID(), newDesc);
      .                                   return;
      .                               }
 40,428 ( 0.01%)                      newDesc->next = (RU_ALL_Node*)next; //Set the next of the insert descriptor node.
 26,952 ( 0.00%)                      succ = next;
 80,856 ( 0.01%)                      curr->successor.compare_exchange_strong(succ, (uintptr_t)newDesc + InsFlag);
 40,428 ( 0.01%)                      if(succ == next){ //If the CAS succeeded....
 80,856 ( 0.01%)                          helpInsert(curr, (RU_ALL_INS_DescNode*)newDesc);
5,944,378 ( 0.94%)  => FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpInsert(RU_ALL_Node*, RU_ALL_INS_DescNode*) (13,476x)
 26,952 ( 0.00%)                          return;
      .                               }
      .                               //Read next and state from curr.successor.
      .                               next = succ & NEXT_MASK;
      .                               state = succ & STATUS_MASK;
      .                           }
      .                           else if(state == InsFlag){
      .                               succ = helpInsert(curr, (RU_ALL_INS_DescNode*)next);
      .                               if(((RU_ALL_INS_DescNode*)next)->newNode == node){
-- line 208 ----------------------------------------
-- line 230 ----------------------------------------
      .                               if((RU_ALL_Node*)next == curr){ //Help remove curr from the list.
      .                                   succ = helpMarked(prev, curr);
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                               curr = prev;
      .                           }
      .                       }
148,236 ( 0.02%)          }
2,520,012 ( 0.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (13,476x)
121,284 ( 0.02%)          void remove(RU_ALL_Node *node){
 94,332 ( 0.01%)              descMgr->initThread(threadID());
242,568 ( 0.04%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::initThread(int) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
134,760 ( 0.02%)              auto guard = descMgr->getGuard(threadID());
8,895,661 ( 1.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::getGuard(int, bool) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
      .           
 40,428 ( 0.01%)              RU_ALL_Node *curr = &head;
 53,904 ( 0.01%)              uintptr_t succ = curr->successor;
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
 40,428 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
 40,428 ( 0.01%)              uint64_t state = succ & STATUS_MASK;
      .                       while(1){
 26,952 ( 0.00%)                  if(state == Normal){
134,760 ( 0.02%)                      if(compNode((RU_ALL_Node*)next, node) > 0)return;
 40,428 ( 0.01%)                      if((RU_ALL_Node*)next != node){ //Advance...
      .                                   curr = (RU_ALL_Node*)next;
      .                                   succ = curr->successor;
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                               else{
 26,952 ( 0.00%)                          succ = (uintptr_t)node;
 80,856 ( 0.01%)                          curr->successor.compare_exchange_strong(succ, (uintptr_t)node + DelFlag);
 53,904 ( 0.01%)                          if(succ == (uintptr_t)node){
 80,856 ( 0.01%)                              helpRemove(curr, node);
5,889,012 ( 0.93%)  => FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpRemove(RU_ALL_Node*, RU_ALL_Node*) (13,476x)
 13,476 ( 0.00%)                              return;
      .                                   }
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                           }
      .                           else if(state == InsFlag){
      .                               succ = helpInsert(curr, (RU_ALL_INS_DescNode*)next);
      .                               next = succ & NEXT_MASK;
-- line 269 ----------------------------------------
-- line 291 ----------------------------------------
      .                               if(next == (uintptr_t)curr){ //Help remove curr from the list.
      .                                   succ = helpMarked(prev, curr);
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                               curr = prev;
      .                           }
      .                       }
121,284 ( 0.02%)          }
2,520,012 ( 0.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (13,476x)
      .           
      .                   //Special RU-ALL traversal algorithms here: 
      .                   //Returns the head of the linked list, or null if the list is empty...
134,065 ( 0.02%)          RU_ALL_Node *first(PredecessorNode *pNode){
187,691 ( 0.03%)              return next(pNode, &head);
46,927,242 ( 7.39%)  => FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::next(PredecessorNode*, RU_ALL_Node*) (26,813x)
 53,626 ( 0.01%)          }
      .           
      .                   //Returns the node following node, or null if bottom was following node.
335,500 ( 0.05%)          RU_ALL_Node *next(PredecessorNode *pNode, RU_ALL_Node *node){
234,850 ( 0.04%)              descMgr->initThread(threadID());
301,950 ( 0.05%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (33,550x)
613,912 ( 0.10%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::initThread(int) (33,550x)
335,500 ( 0.05%)              auto guard = descMgr->getGuard(threadID());
22,061,281 ( 3.47%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::getGuard(int, bool) (33,550x)
301,950 ( 0.05%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (33,550x)
      .           
134,200 ( 0.02%)              uintptr_t succ = node->successor;
1,543,300 ( 0.24%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (33,550x)
100,650 ( 0.02%)              uintptr_t next = succ & NEXT_MASK;
100,650 ( 0.02%)              uint64_t state = succ & STATUS_MASK;
369,050 ( 0.06%)              NotifyDescNode *notifyDesc = descMgr->allocate<NotifyDescNode>(threadID(), pNode);
12,231,156 ( 1.93%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:NotifyDescNode* record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::allocate<NotifyDescNode, PredecessorNode*>(int, PredecessorNode*) (33,550x)
301,950 ( 0.05%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (33,550x)
134,200 ( 0.02%)              while(next != (uintptr_t)&tail){ //Continue while next != tail...
 13,474 ( 0.00%)                  if(state == Normal){
 20,211 ( 0.00%)                      notifyDesc->next = (RU_ALL_Node*)next;
 13,474 ( 0.00%)                      succ = next;
      .           
 40,422 ( 0.01%)                      node->successor.compare_exchange_strong(succ, (uintptr_t)notifyDesc + NotifFlag);
 20,211 ( 0.00%)                      if(succ == next){
 40,422 ( 0.01%)                          helpNotify(node, notifyDesc);
3,743,723 ( 0.59%)  => FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::helpNotify(RU_ALL_Node*, NotifyDescNode*) (6,737x)
 13,474 ( 0.00%)                          return (RU_ALL_Node*)next; //CAS succeeded, therefore pNode->notifyThreshold was updated to next 
      .                                                           //while prev.next was equal to next.
      .                               } 
      .                           }
      .                           else if(state == DelFlag){ //Help with deletion of its successor, if it is flagged....
      .                               succ = helpRemove(node, (RU_ALL_Node*)next);
      .                           }
      .                           else if(state == InsFlag){ //Help with insertion while it points to an insertion descriptor...
      .                               succ = helpInsert(node, (RU_ALL_INS_DescNode*)next);
-- line 332 ----------------------------------------
-- line 337 ----------------------------------------
      .                           else{ //node is marked, so node.next is permanently equal to next. No need to help!
      .                               pNode->notifyThreshold = (UpdateNode*)next;
      .                               descMgr->retire(threadID(), notifyDesc); //notifyDesc was not used
      .                               return (RU_ALL_Node*)next;
      .                           }
      .                           next = succ & NEXT_MASK;
      .                           state = succ & STATUS_MASK;
      .                       }
268,130 ( 0.04%)              descMgr->retire(threadID(), notifyDesc); //notifyDesc was not used
7,610,445 ( 1.20%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::retire<NotifyDescNode>(int, NotifyDescNode*) (26,813x)
241,317 ( 0.04%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (26,813x)
 26,813 ( 0.00%)              return nullptr;
335,500 ( 0.05%)          }
6,273,850 ( 0.99%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (33,550x)
      .                   char stat_to_char(uint64_t status){
      .                       if(status == Normal){
      .                           return ' ';
      .                       }
      .                       else if(status == NotifFlag){
      .                           return 'F';
      .                       }
      .                       else if(status == DelFlag){
-- line 355 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/move.h
--------------------------------------------------------------------------------
Ir                 

-- line 43 ----------------------------------------
        .           
        .             // Used, in C++03 mode too, by allocators, etc.
        .             /**
        .              *  @brief Same as C++11 std::addressof
        .              *  @ingroup utilities
        .              */
        .             template<typename _Tp>
        .               inline _GLIBCXX_CONSTEXPR _Tp*
  920,772 ( 0.14%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  920,772 ( 0.14%)      { return __builtin_addressof(__r); }
        .           
        .           #if __cplusplus >= 201103L
        .           
        .             /**
        .              *  @addtogroup utilities
        .              *  @{
        .              */
        .           
-- line 60 ----------------------------------------
-- line 62 ----------------------------------------
        .              *  @brief  Forward an lvalue.
        .              *  @return The parameter cast to the specified type.
        .              *
        .              *  This function is used to implement "perfect forwarding".
        .              */
        .             template<typename _Tp>
        .               _GLIBCXX_NODISCARD
        .               constexpr _Tp&&
1,691,040 ( 0.27%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
1,691,040 ( 0.27%)      { return static_cast<_Tp&&>(__t); }
        .           
        .             /**
        .              *  @brief  Forward an rvalue.
        .              *  @return The parameter cast to the specified type.
        .              *
        .              *  This function is used to implement "perfect forwarding".
        .              */
        .             template<typename _Tp>
-- line 79 ----------------------------------------
-- line 89 ----------------------------------------
        .             /**
        .              *  @brief  Convert a value to an rvalue.
        .              *  @param  __t  A thing of arbitrary type.
        .              *  @return The parameter cast to an rvalue-reference to allow moving it.
        .             */
        .             template<typename _Tp>
        .               _GLIBCXX_NODISCARD
        .               constexpr typename std::remove_reference<_Tp>::type&&
   60,711 ( 0.01%)      move(_Tp&& __t) noexcept
   60,711 ( 0.01%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        .           
        .           
        .             template<typename _Tp>
        .               struct __move_if_noexcept_cond
        .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        .                               is_copy_constructible<_Tp>>::type { };
        .           
        .             /**
-- line 106 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h
--------------------------------------------------------------------------------
Ir                 

-- line 68 ----------------------------------------
        .               public:
        .                   blockbag<T> * currentBag;  // pointer to current epoch bag for this process
        .           #ifdef DEAMORTIZE_FREE_CALLS
        .                   blockbag<T> * deamortizedFreeables;
        .                   int numFreesPerStartOp;
        .           #endif
        .                   int checked;               // how far we've come in checking the announced epochs of other threads
        .                   int opsSinceRead;
    5,376 ( 0.00%)          ThreadData() {}
        .               private:
        .                   PAD;
        .               };
        .           
        .               PAD;
        .               ThreadData threadData[MAX_THREADS_POW2];
        .               PAD;
        .           
-- line 84 ----------------------------------------
-- line 138 ----------------------------------------
        .                               sum[j] += threadData[tid].epochbags[j]->computeSize();
        .                           }
        .                       }
        .                       ss<<sum[j]<<" ";
        .                   }
        .                   return ss.str();
        .               }
        .           
1,946,950 ( 0.31%)      inline static bool quiescenceIsPerRecordType() { return false; }
        .           
  973,475 ( 0.15%)      inline bool isQuiescent(const int tid) {
3,115,120 ( 0.49%)          return QUIESCENT(threadData[tid].announcedEpoch.load(std::memory_order_relaxed));
  389,390 ( 0.06%)      }
        .           
        .               inline static bool isProtected(const int tid, T * const obj) {
        .                   return true;
        .               }
        .               inline static bool isQProtected(const int tid, T * const obj) {
        .                   return false;
        .               }
        .               inline static bool protect(const int tid, T * const obj, CallbackType notRetiredCallback, CallbackArg callbackArg, bool memoryBarrier = true) {
-- line 158 ----------------------------------------
-- line 182 ----------------------------------------
        .                        * want to make sure this is actually happening,
        .                        * and we want to prove to ourselves that the bags are empty
        .                        * (or close to empty) when the experiment starts!!!
        .                        */
        .                   }
        .               }
        .           
        .               // rotate the epoch bags and reclaim any objects retired two epochs ago.
   28,224 ( 0.00%)      inline void rotateEpochBags(const int tid) {
  122,304 ( 0.02%)          int nextIndex = (threadData[tid].index+1) % NUMBER_OF_EPOCH_BAGS;
  127,008 ( 0.02%)          blockbag<T> * const freeable = threadData[tid].epochbags[(nextIndex+NUMBER_OF_ALWAYS_EMPTY_EPOCH_BAGS) % NUMBER_OF_EPOCH_BAGS];
        .           #ifdef GSTATS_HANDLE_STATS
        .                   GSTATS_APPEND(tid, limbo_reclamation_event_size, freeable->computeSize());
        .                   GSTATS_ADD(tid, limbo_reclamation_event_count, 1);
        .                   TIMELINE_START_C(tid, tid < 96);
        .                   // DURATION_START(tid);
        .           #endif
        .           
    4,704 ( 0.00%)          int numLeftover = 0;
        .           #ifdef DEAMORTIZE_FREE_CALLS
   61,152 ( 0.01%)          auto freelist = threadData[tid].deamortizedFreeables;
   28,224 ( 0.00%)          if (!freelist->isEmpty()) {
   14,056 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<DelNode>::isEmpty() (502x)
   11,774 ( 0.00%)              numLeftover += (freelist->isEmpty()
    5,772 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::isEmpty() (481x)
    5,046 ( 0.00%)                      ? 0
   23,548 ( 0.00%)                      : (freelist->getSizeInBlocks()-1)*BLOCK_SIZE + freelist->getHeadSize());
    8,177 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::getHeadSize() (481x)
    3,367 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::getSizeInBlocks() (481x)
        .           
        .                       // // "CATCH-UP" bulk free
        .                       // this->pool->addMoveFullBlocks(tid, freelist);
        .           
        .           #   if defined DEAMORTIZE_ADAPTIVELY
        .                       // adaptive deamortized free count
        .                       if (numLeftover >= BLOCK_SIZE) {
        .                           ++threadData[tid].numFreesPerStartOp;
-- line 214 ----------------------------------------
-- line 216 ----------------------------------------
        .                           --threadData[tid].numFreesPerStartOp;
        .                           if (threadData[tid].numFreesPerStartOp < 1) {
        .                               threadData[tid].numFreesPerStartOp = 1;
        .                           }
        .                       }
        .           #   endif
        .                   }
        .                   // TIMELINE_BLIP_Llu(tid, "numFreesPerStartOp", threadData[tid].numFreesPerStartOp);
   23,520 ( 0.00%)          freelist->appendMoveFullBlocks(freeable);
   18,072 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<DelNode>::appendMoveFullBlocks(blockbag<DelNode>*) (502x)
        .           #else
        .                   numLeftover += (freeable->getSizeInBlocks()-1)*BLOCK_SIZE + freeable->getHeadSize();
        .                   this->pool->addMoveFullBlocks(tid, freeable); // moves any full blocks (may leave a non-full block behind)
        .           #endif
        .                   SOFTWARE_BARRIER;
        .           
        .           #ifdef GSTATS_HANDLE_STATS
        .                   // DURATION_END(tid, duration_rotateAndFree);
-- line 232 ----------------------------------------
-- line 235 ----------------------------------------
        .                   // ss<<numLeftover<<":"<<threadData[tid].numFreesPerStartOp;
        .                   // TIMELINE_END_Ls(tid, "rotateEpochBags", ss.str().c_str()); //threadData[tid].localvar_announcedEpoch);
        .                   if (tid < 96) {
        .                       // TIMELINE_END_Llu(tid, "rotateEpochBags", numLeftover);
        .                       TIMELINE_BLIP_Llu(tid, "freelistAppend", numLeftover);
        .                   }
        .           #endif
        .           
   61,152 ( 0.01%)          threadData[tid].index = nextIndex;
  122,304 ( 0.02%)          threadData[tid].currentBag = threadData[tid].epochbags[nextIndex];
   18,816 ( 0.00%)      }
        .           
        .               template <typename... Rest>
        .               class BagRotator {
        .               public:
   14,640 ( 0.00%)          BagRotator() {}
   14,640 ( 0.00%)          inline void rotateAllEpochBags(const int tid, void * const * const reclaimers, const int i) {
    7,320 ( 0.00%)          }
        .               };
        .           
        .               template <typename First, typename... Rest>
   47,040 ( 0.01%)      class BagRotator<First, Rest...> : public BagRotator<Rest...> {
    3,012 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::BagRotator<>::BagRotator() (502x)
        .               public:
   32,928 ( 0.01%)          inline void rotateAllEpochBags(const int tid, void * const * const reclaimers, const int i) {
        .                       typedef typename Pool::template rebindAlloc<First>::other classAlloc;
        .                       typedef typename Pool::template rebind2<First, classAlloc>::other classPool;
        .           
   47,040 ( 0.01%)              ((reclaimer_debra<First, classPool> * const) reclaimers[i])->rotateEpochBags(tid);
  149,978 ( 0.02%)  => FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<NotifyNode, pool_none<NotifyNode, allocator_new<NotifyNode> > >::rotateEpochBags(int) (502x)
   32,928 ( 0.01%)              ((BagRotator<Rest...> *) this)->rotateAllEpochBags(tid, reclaimers, 1+i);
    4,518 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::BagRotator<>::rotateAllEpochBags(int, void* const*, int) (502x)
   14,112 ( 0.00%)          }
        .               };
        .           
        .               // objects reclaimed by this epoch manager.
        .               // returns true if the call rotated the epoch bags for thread tid
        .               // (and reclaimed any objects retired two epochs ago).
        .               // otherwise, the call returns false.
        .               template <typename First, typename... Rest>
2,531,035 ( 0.40%)      inline bool startOp(const int tid, void * const * const reclaimers, const int numReclaimers, const bool readOnly = false) {
        .                   SOFTWARE_BARRIER; // prevent any bookkeeping from being moved after this point by the compiler.
  194,695 ( 0.03%)          bool result = false;
        .           
  584,085 ( 0.09%)          long readEpoch = epoch;
2,531,035 ( 0.40%)          const long ann = threadData[tid].localvar_announcedEpoch;
2,531,035 ( 0.40%)          threadData[tid].localvar_announcedEpoch = readEpoch;
        .           
        .                   // if our announced epoch was different from the current epoch
  584,085 ( 0.09%)          if (readEpoch != ann /* invariant: ann is not quiescent */) {
        .                       // rotate the epoch bags and
        .                       // reclaim any objects retired two epochs ago.
   29,280 ( 0.00%)              threadData[tid].checked = 0;
    7,320 ( 0.00%)              BagRotator<First, Rest...> rotator;
   23,092 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::BagRotator<DelNode, InsNode, PredecessorNode, NotifyNode>::BagRotator() (502x)
        .                       //auto time = get_server_clock();
        .                       //GSTATS_APPEND(tid, thread_reclamation_start, time);
   14,640 ( 0.00%)              rotator.rotateAllEpochBags(tid, reclaimers, 0);
  730,915 ( 0.12%)  => FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::BagRotator<DelNode, InsNode, PredecessorNode, NotifyNode>::rotateAllEpochBags(int, void* const*, int) (502x)
        .                       //auto time2 = get_server_clock();
        .                       //GSTATS_APPEND(tid, thread_reclamation_end, time);
        .                       //this->template rotateAllEpochBags<First, Rest...>(tid, reclaimers, 0);
    2,440 ( 0.00%)              result = true;
        .                   }
        .           
        .           #ifdef DEAMORTIZE_FREE_CALLS
        .                   // TODO: make this work for each object type
        .           #   if defined DEAMORTIZE_ADAPTIVELY
        .                   for (int i=0;i<threadData[tid].numFreesPerStartOp;++i) {
        .                       if (!threadData[tid].deamortizedFreeables->isEmpty()) {
        .                           this->pool->add(tid, threadData[tid].deamortizedFreeables->remove());
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           #   else
3,309,815 ( 0.52%)          if (!threadData[tid].deamortizedFreeables->isEmpty()) {
1,120,056 ( 0.18%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<DelNode>::isEmpty() (40,002x)
  550,137 ( 0.09%)              this->pool->add(tid, threadData[tid].deamortizedFreeables->remove());
1,576,534 ( 0.25%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> >::add(int, RU_ALL_INS_DescNode*) (13,037x)
1,095,763 ( 0.17%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<RU_ALL_INS_DescNode>::remove() (13,037x)
        .                   }
        .                   // if (!threadData[tid].deamortizedFreeables->isEmpty()) {
        .                   //     this->pool->add(tid, threadData[tid].deamortizedFreeables->remove());
        .                   // }
        .                   // if (!threadData[tid].deamortizedFreeables->isEmpty()) {
        .                   //     this->pool->add(tid, threadData[tid].deamortizedFreeables->remove());
        .                   // }
        .           #   endif
        .           #endif
        .           
        .                   // we should announce AFTER rotating bags if we're going to do so!!
        .                   // (very problematic interaction with lazy dirty page purging in jemalloc triggered by bag rotation,
        .                   //  which causes massive non-quiescent regions if non-Q announcement happens before bag rotation)
        .                   SOFTWARE_BARRIER;
2,920,425 ( 0.46%)          threadData[tid].announcedEpoch.store(readEpoch, std::memory_order_relaxed); // note: this must be written, regardless of whether the announced epochs are the same, because the quiescent bit will vary
        .           #if defined GSTATS_HANDLE_STATS
        .                   GSTATS_SET(tid, thread_announced_epoch, readEpoch);
        .           #endif
        .                   SOFTWARE_BARRIER;
        .                   // note: readEpoch, when written to announcedEpoch[tid],
        .                   //       sets the state to non-quiescent and non-neutralized
        .           
        .           #ifndef DEBRA_DISABLE_READONLY_OPT
        .                   if (!readOnly) {
        .           #endif
        .                       // incrementally scan the announced epochs of all threads
7,982,495 ( 1.26%)              if (++threadData[tid].opsSinceRead == MIN_OPS_BEFORE_READ) {
  233,580 ( 0.04%)                  threadData[tid].opsSinceRead = 0;
  253,045 ( 0.04%)                  int otherTid = threadData[tid].checked;
  272,510 ( 0.04%)                  long otherAnnounce = threadData[otherTid].announcedEpoch.load(std::memory_order_relaxed);
  145,868 ( 0.02%)                  if (BITS_EPOCH(otherAnnounce) == readEpoch || QUIESCENT(otherAnnounce)) {
  739,670 ( 0.12%)                      const int c = ++threadData[tid].checked;
   77,860 ( 0.01%)                      if (c >= this->NUM_PROCESSES /*&& c > MIN_OPS_BEFORE_CAS_EPOCH*/) {
   17,010 ( 0.00%)                          if (__sync_bool_compare_and_swap(&epoch, readEpoch, readEpoch+EPOCH_INCREMENT)) {
        .           #if defined GSTATS_HANDLE_STATS
        .                                       // GSTATS_SET_IX(tid, num_prop_epoch_latency, GSTATS_TIMER_SPLIT(tid, timersplit_epoch), readEpoch+EPOCH_INCREMENT);
        .                                       TIMELINE_BLIP_Llu(tid, "advanceEpoch", readEpoch);
        .           #endif
        .                                   }
        .                               }
        .                           }
        .                       }
        .           #ifndef DEBRA_DISABLE_READONLY_OPT
        .                   }
        .           #endif
  194,695 ( 0.03%)          return result;
1,168,170 ( 0.18%)      }
        .           
  973,475 ( 0.15%)      inline void endOp(const int tid) {
5,256,765 ( 0.83%)          threadData[tid].announcedEpoch.store(GET_WITH_QUIESCENT(threadData[tid].localvar_announcedEpoch), std::memory_order_relaxed);
  584,085 ( 0.09%)      }
        .           
        .               // for all schemes except reference counting
  523,890 ( 0.08%)      inline void retire(const int tid, T* p) {
1,397,040 ( 0.22%)          threadData[tid].currentBag->add(p);
  796,462 ( 0.13%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::add(InsertDescNode*) (13,476x)
        .                   DEBUG2 this->debug->addRetired(tid, 1);
  261,945 ( 0.04%)      }
        .           
        .               void debugPrintStatus(const int tid) {
        .                   if (tid == 0) {
        .                       std::cout<<"global_epoch_counter="<<epoch/EPOCH_INCREMENT<<std::endl;
        .                   }
        .               }
        .           
      224 ( 0.00%)      void initThread(const int tid) {
      364 ( 0.00%)          for (int i=0;i<NUMBER_OF_EPOCH_BAGS;++i) {
    1,344 ( 0.00%)              if (threadData[tid].epochbags[i] == NULL) {
    2,604 ( 0.00%)                  threadData[tid].epochbags[i] = new blockbag<T>(tid, this->pool->blockpools[tid]);
    3,682 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::blockbag(int, blockpool<InsertDescNode>*) (12x)
    2,733 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (12x)
        .                       }
        .                   }
      672 ( 0.00%)          threadData[tid].currentBag = threadData[tid].epochbags[0];
        .           #ifdef DEAMORTIZE_FREE_CALLS
      812 ( 0.00%)          threadData[tid].deamortizedFreeables = new blockbag<T>(tid, this->pool->blockpools[tid]);
    1,187 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::blockbag(int, blockpool<InsertDescNode>*) (4x)
      887 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (4x)
      336 ( 0.00%)          threadData[tid].numFreesPerStartOp = 1;
        .           #endif
      336 ( 0.00%)          threadData[tid].opsSinceRead = 0;
      336 ( 0.00%)          threadData[tid].checked = 0;
        .           #ifdef GSTATS_HANDLE_STATS
        .                   GSTATS_CLEAR_TIMERS;
        .           #endif
      196 ( 0.00%)      }
        .           
      168 ( 0.00%)      void deinitThread(const int tid) {
        .                   // WARNING: this moves objects to the pool immediately,
        .                   // which is only safe if this thread is deinitializing specifically
        .                   // because *ALL THREADS* have already finished accessing
        .                   // the data structure and are now quiescent!!
      364 ( 0.00%)          for (int i=0;i<NUMBER_OF_EPOCH_BAGS;++i) {
    1,344 ( 0.00%)              if (threadData[tid].epochbags[i]) {
    1,680 ( 0.00%)                  this->pool->addMoveAll(tid, threadData[tid].epochbags[i]);
   82,234 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<InsertDescNode, allocator_new<InsertDescNode> >::addMoveAll(int, blockbag<InsertDescNode>*) (12x)
    1,848 ( 0.00%)                  delete threadData[tid].epochbags[i];
    2,101 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (12x)
    1,188 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::~blockbag() (12x)
    1,176 ( 0.00%)                  threadData[tid].epochbags[i] = NULL;
        .                       }
        .                   }
        .           #ifdef DEAMORTIZE_FREE_CALLS
      504 ( 0.00%)          this->pool->addMoveAll(tid, threadData[tid].deamortizedFreeables);
      244 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<InsertDescNode, allocator_new<InsertDescNode> >::addMoveAll(int, blockbag<InsertDescNode>*) (4x)
      560 ( 0.00%)          delete threadData[tid].deamortizedFreeables;
      689 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (4x)
      396 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::~blockbag() (4x)
        .           #endif
      112 ( 0.00%)      }
        .           
       70 ( 0.00%)      reclaimer_debra(const int numProcesses, Pool *_pool, debugInfo * const _debug, RecoveryMgr<void *> * const _recoveryMgr = NULL)
    5,481 ( 0.00%)              : reclaimer_interface<T, Pool>(numProcesses, _pool, _debug, _recoveryMgr) {
      768 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<NotifyDescNode, pool_none<NotifyDescNode, allocator_new<NotifyDescNode> > >::ThreadData::ThreadData() (128x)
       22 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<NotifyDescNode, pool_none<NotifyDescNode, allocator_new<NotifyDescNode> > >::reclaimer_interface(int, pool_none<NotifyDescNode, allocator_new<NotifyDescNode> >*, debugInfo*, RecoveryMgr<void*>*) (1x)
        .                   VERBOSE std::cout<<"constructor reclaimer_debra helping="<<this->shouldHelp()<<std::endl;// scanThreshold="<<scanThreshold<<std::endl;
       14 ( 0.00%)          epoch = 0;
      259 ( 0.00%)          for (int tid=0;tid<numProcesses;++tid) {
      672 ( 0.00%)              threadData[tid].index = 0;
      672 ( 0.00%)              threadData[tid].localvar_announcedEpoch = GET_WITH_QUIESCENT(0);
      784 ( 0.00%)              threadData[tid].announcedEpoch.store(GET_WITH_QUIESCENT(0), std::memory_order_relaxed);
      728 ( 0.00%)              for (int i=0;i<NUMBER_OF_EPOCH_BAGS;++i) {
    2,352 ( 0.00%)                  threadData[tid].epochbags[i] = NULL;
        .                       }
        .           #ifdef DEAMORTIZE_FREE_CALLS
      672 ( 0.00%)              threadData[tid].deamortizedFreeables = NULL;
        .           #endif
        .                   }
       49 ( 0.00%)      }
       28 ( 0.00%)      ~reclaimer_debra() {
        .           //        VERBOSE DEBUG std::cout<<"destructor reclaimer_debra"<<std::endl;
        .           //        for (int tid=0;tid<this->NUM_PROCESSES;++tid) {
        .           //            // move contents of all bags into pool
        .           //            for (int i=0;i<NUMBER_OF_EPOCH_BAGS;++i) {
        .           //                if (threadData[tid].epochbags[i]) {
        .           //                    this->pool->addMoveAll(tid, threadData[tid].epochbags[i]);
        .           //                    delete threadData[tid].epochbags[i];
        .           //                }
        .           //            }
        .           //        }
       42 ( 0.00%)      }
        6 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::~reclaimer_interface() (1x)
        .           
        .           };
        .           
        .           #endif
        .           

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/new
--------------------------------------------------------------------------------
Ir               

-- line 167 ----------------------------------------
      .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
      .           void operator delete[](void*, std::size_t, std::align_val_t)
      .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
      .           #endif // __cpp_sized_deallocation
      .           #endif // __cpp_aligned_new
      .           
      .           // Default placement versions of operator new.
      .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
892,570 ( 0.14%)  { return __p; }
      .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
      .           { return __p; }
      .           
      .           // Default placement versions of operator delete.
      .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
      .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
      .           //@}
      .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../setbench/common/recordmgr/blockbag.h
--------------------------------------------------------------------------------
Ir                 

-- line 33 ----------------------------------------
        .                   public:
        .                       block<T> *next;
        .                       size_t nextCount; // intrusive pointer used for *other* purposes (outside this file -- currently only in lockfreeblockstack.h)
        .                   private:
        .                       size_t size;
        .                       T * data[BLOCK_SIZE];
        .                   public:
        .           
   15,848 ( 0.00%)              block(block<T> * const _next) : next(_next) {
    4,528 ( 0.00%)                  size = 0;
    4,528 ( 0.00%)                  nextCount = 0;
    6,792 ( 0.00%)              }
    9,056 ( 0.00%)              ~block() {
    9,056 ( 0.00%)                  assert(size == 0);
    6,792 ( 0.00%)              }
        .           
  267,993 ( 0.04%)              bool isFull() {
  357,324 ( 0.06%)                  return size == BLOCK_SIZE;
  178,662 ( 0.03%)              }
  955,113 ( 0.15%)              bool isEmpty() {
1,273,484 ( 0.20%)                  return size == 0;
  636,742 ( 0.10%)              }
        .                       // precondition: !isFull()
  436,575 ( 0.07%)              void push(T * const obj) {
  349,260 ( 0.05%)                  assert(size < BLOCK_SIZE);
  261,945 ( 0.04%)                  const int sz = size;
        .                           //assert(interruptible[((long) ((int *) pthread_getspecific(pthreadkey)))*PREFETCH_SIZE_WORDS] == false);
  523,890 ( 0.08%)                  data[size] = obj;
        .                           SOFTWARE_BARRIER;
  436,575 ( 0.07%)                  size = sz+1;
  261,945 ( 0.04%)              }
        .                       // precondition: !isEmpty()
  349,260 ( 0.05%)              T* pop() {
  349,260 ( 0.05%)                  assert(size > 0);
  349,260 ( 0.05%)                  const int sz = size-1;
  349,260 ( 0.05%)                  size = sz;
  436,575 ( 0.07%)                  return data[sz];
  174,630 ( 0.03%)              }
        .                       T* peek(const int ix) {
        .                           assert(ix >= 0);
        .                           //assert(ix < size);
        .                           return data[ix];
        .                       }
        .                       // warning: linear time
        .                       bool contains(T* const obj) {
        .                           for (int i=0;i<size;++i) {
-- line 78 ----------------------------------------
-- line 111 ----------------------------------------
        .                           }
        .                       }
        .                       void replace(const int ix, T* const obj) {
        .                           assert(ix >= 0);
        .                           assert(ix < size);
        .                           assert(obj);
        .                           data[ix] = obj;
        .                       }
    6,954 ( 0.00%)              int computeSize() {
    4,636 ( 0.00%)                  return size;
    4,636 ( 0.00%)              }
        .                       // this function is occasionally useful if, for instance,
        .                       // you use a bump allocator, which hands out objects from
        .                       // a huge slab of memory.
        .                       // then, in the destructor for a data structure, we can clear
        .                       // a block without worrying about leaking memory,
        .                       // since we will just free the whole slab at once.
        .                       void clearWithoutFreeingElements() {
        .                           SOFTWARE_BARRIER;
-- line 129 ----------------------------------------
-- line 295 ----------------------------------------
        .                   void debugPrintBag() {
        .                       std::cout<<"("<<computeSize()<<","<<computeSizeInBlocks()<<") =";
        .                       block<T> * curr = head;
        .                       while (curr) {
        .                           std::cout<<" "<<curr->computeSize()<<"["<<((long)curr)<<"]";
        .                           curr = curr->next;
        .                       }
        .                   }
   12,096 ( 0.00%)          int computeSizeInBlocks() {
    4,032 ( 0.00%)              int result = 0;
   12,096 ( 0.00%)              block<T> *curr = head;
  237,494 ( 0.04%)              while (curr) {
  112,699 ( 0.02%)                  ++result;
  338,097 ( 0.05%)                  curr = curr->next;
        .                       }
    4,032 ( 0.00%)              return result;
    8,064 ( 0.00%)          }
        .           
        .               public:
        .                   blockbag() {}
    1,008 ( 0.00%)          blockbag(const int tid, blockpool<T> * const _pool) : pool(_pool) {
        .           //            VERBOSE DEBUG std::cout<<"constructor blockbag"<<std::endl;
      336 ( 0.00%)              owner = tid;
        .           //            std::cout<<"bag owner="<<owner<<std::endl;
      224 ( 0.00%)              reclaimCount = 0;
      224 ( 0.00%)              debugFreed = 0;
      224 ( 0.00%)              sizeInBlocks = 1;
      784 ( 0.00%)              head = pool->allocateBlock(NULL);
    4,180 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockpool.h:blockpool<InsNode>::allocateBlock(block<InsNode>*) (16x)
      448 ( 0.00%)              tail = head;
        .                       DEBUG2 assert(computeSizeInBlocks() == sizeInBlocks);
        .                       DEBUG2 assert(computeSize() == 0);
        .                       DEBUG2 validate();
      336 ( 0.00%)          }
      448 ( 0.00%)          ~blockbag() {
        .           //            VERBOSE DEBUG std::cout<<"destructor blockbag;";
      560 ( 0.00%)              assert(isEmpty());
      448 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<PredecessorNode>::isEmpty() (16x)
        .                       // clear the bag AND FREE EVERY BLOCK IN IT
      896 ( 0.00%)              while (head) {
      336 ( 0.00%)                  block<T> * const temp = head;
      560 ( 0.00%)                  head = head->next;
        .                           //DEBUG ++debugFreed;
      672 ( 0.00%)                  pool->deallocateBlock(temp);
    1,313 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockpool.h:blockpool<PredecessorNode>::deallocateBlock(block<PredecessorNode>*) (16x)
        .                       }
        .           //            VERBOSE DEBUG std::cout<<" freed "<<debugFreed<<std::endl;
      448 ( 0.00%)          }
        .           
        .                   int getOwner() {
        .                       return owner;
        .                   }
        .           
    6,728 ( 0.00%)          int getHeadSize() {
    6,728 ( 0.00%)              return head->computeSize();
    5,194 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyDescNode>::computeSize() (742x)
    3,364 ( 0.00%)          }
        .           
        .                   inline void incrementReclaimCount() {
        .                       SOFTWARE_BARRIER;
        .                       ++reclaimCount;
        .                       SOFTWARE_BARRIER;
        .                   }
        .                   inline long long getReclaimCount() {
        .                       SOFTWARE_BARRIER;
-- line 355 ----------------------------------------
-- line 358 ----------------------------------------
        .           
        .                   blockbag_iterator<T> begin() {
        .                       return blockbag_iterator<T>(head, this);
        .                   }
        .                   blockbag_iterator<T> end() {
        .                       return blockbag_iterator<T>(NULL, this);
        .                   }
        .           
  436,575 ( 0.07%)          void add(T * const obj) {
        .                       DEBUG2 validate();
        .                       int oldsize; DEBUG2 oldsize = computeSize();
  523,890 ( 0.08%)              head->push(obj);
  350,376 ( 0.06%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsertDescNode>::push(InsertDescNode*) (13,476x)
  523,890 ( 0.08%)              if (head->isFull()) {
  121,284 ( 0.02%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsertDescNode>::isFull() (13,476x)
        .                           int oldNumBlocks; DEBUG2 oldNumBlocks = computeSizeInBlocks();
   17,216 ( 0.00%)                  block<T> *newblock = pool->allocateBlock(head);
   50,018 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockpool.h:blockpool<InsertDescNode>::allocateBlock(block<InsertDescNode>*) (329x)
   10,760 ( 0.00%)                  ++sizeInBlocks;
        .                           //DEBUG2 std::cout<<"((("<<((long)head)<<" full. prepending "<<((long)newblock)<<")))";
        .                           SOFTWARE_BARRIER;
    6,456 ( 0.00%)                  head = newblock;
        .                           DEBUG2 assert(oldNumBlocks + 1 == computeSizeInBlocks());
        .                           DEBUG2 assert(sizeInBlocks == computeSizeInBlocks());
        .                       }
        .                       DEBUG2 assert(oldsize + 1 == computeSize());
        .                       DEBUG2 validate();
  261,945 ( 0.04%)          }
        .           
        .                   template <typename Alloc>
        .                   void add(const int tid, T * const obj, lockfreeblockbag<T> * const sharedBag, const int thresh, Alloc * const alloc) {
        .                       DEBUG2 validate();
        .                       int oldsize; DEBUG2 oldsize = computeSize();
        .                       head->push(obj);
        .                       if (head->isFull()) {
        .                           int oldNumBlocks; DEBUG2 oldNumBlocks = computeSizeInBlocks();
-- line 390 ----------------------------------------
-- line 401 ----------------------------------------
        .                               sharedBag->addBlock(b);
        .                               MEMORY_STATS alloc->debug->addGiven(tid, 1);
        .                               //DEBUG2 COUTATOMIC("  thread "<<this->tid<<" sharedBag("<<(sizeof(T)==sizeof(Node<long,long>)?"Node":"SCXRecord")<<") now contains "<<sharedBag->size()<<" blocks"<<std::endl);
        .                               DEBUG2 assert(oldsize + 1 - BLOCK_SIZE == computeSize());
        .                           }
        .                       }
        .                       DEBUG2 validate();
        .                   }
1,398,952 ( 0.22%)          bool isEmpty() {
3,636,276 ( 0.57%)              return head->next == NULL && head->isEmpty();
    4,806 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsNode>::isEmpty() (534x)
  699,476 ( 0.11%)          }
        .                   // precondition: !isEmpty, !curr->isEmpty()
        .                   // returns true if a subsequent invocation of curr->peek(ix) will return
        .                   //         an item that was previously EARLIER in iterator order, and false otherwise.
        .                   bool erase(block<T> * const curr, const int ix) {
        .                       assert(!isEmpty());
        .                       assert(!curr->isEmpty());
        .                       DEBUG2 validate();
        .                       if (head->isEmpty()) {
-- line 419 ----------------------------------------
-- line 445 ----------------------------------------
        .                           T* obj = head->pop();
        .                           curr->replace(ix, obj);
        .                           DEBUG2 validate();
        .                           return true;
        .                       }
        .                   }
        .           
        .                   // precondition: !isEmpty()
  349,260 ( 0.05%)          T* remove() {
  523,890 ( 0.08%)              assert(!isEmpty());
   88,599 ( 0.01%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<NotifyNode>::isEmpty() (6,737x)
        .                       DEBUG2 validate();
        .                       int oldsize; DEBUG2 oldsize = computeSize();
        .                       T *result;
  523,890 ( 0.08%)              if (head->isEmpty()) {
   60,633 ( 0.01%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyNode>::isEmpty() (6,737x)
   12,912 ( 0.00%)                  result = head->next->pop();
    3,772 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyNode>::pop() (164x)
        .                           int oldNumBlocks; DEBUG2 oldNumBlocks = computeSizeInBlocks();
    6,456 ( 0.00%)                  block<T> * const temp = head;
   10,760 ( 0.00%)                  head = head->next;
   12,912 ( 0.00%)                  pool->deallocateBlock(temp);
   14,773 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/blockpool.h:blockpool<NotifyNode>::deallocateBlock(block<NotifyNode>*) (164x)
   10,760 ( 0.00%)                  --sizeInBlocks;
        .                           DEBUG2 assert(oldNumBlocks - 1 == computeSizeInBlocks());
        .                           DEBUG2 assert(sizeInBlocks == computeSizeInBlocks());
        .                           DEBUG2 assert(oldsize - 1 == computeSize());
        .                           DEBUG2 validate();
    4,304 ( 0.00%)                  return result;
        .                       } else {
  425,815 ( 0.07%)                  result = head->pop();
  151,179 ( 0.02%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<NotifyNode>::pop() (6,573x)
        .                           DEBUG2 validate();
   85,163 ( 0.01%)                  return result;
        .                       }
  174,630 ( 0.03%)          }
        .           
        .           
        .                   template <typename Alloc>
        .                   T* remove(const int tid, lockfreeblockbag<T> * const sharedBag, Alloc * const alloc) {
        .                       DEBUG2 validate();
        .                       int oldsize; DEBUG2 oldsize = computeSize();
        .                       T *result;
        .                       if (head->isEmpty()) {
-- line 483 ----------------------------------------
-- line 613 ----------------------------------------
        .           //        }
        .           //        block<T> * const getPredecessorBlock(block<T> * const curr) {
        .           //            block<T> * result = head;
        .           //            while (result && result != curr) {
        .           //                result = result->next;
        .           //            }
        .           //            return result;
        .           //        }
   28,224 ( 0.00%)          void appendMoveFullBlocks(blockbag<T> * const other, block<T> * predecessor) {
    9,408 ( 0.00%)              assert(other);
   18,816 ( 0.00%)              assert(other->head);
    9,408 ( 0.00%)              assert(predecessor);
        .                       DEBUG2 validate();
        .           
        .                       // other consists of one maybe-full block followed by
        .                       // zero or more full blocks.
        .                       // our goal is to append all blocks in the other bag
        .                       // starting with predecessor->next to our own bag.
   18,816 ( 0.00%)              if (predecessor->next != NULL) {
        .                           DEBUG2 assert(predecessor->next->computeSize() == BLOCK_SIZE);
   12,096 ( 0.00%)                  assert(predecessor->next->isFull());
    2,961 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:block<InsertDescNode>::isFull() (329x)
   10,080 ( 0.00%)                  tail->next = predecessor->next;
    8,064 ( 0.00%)                  tail = other->tail;
   16,128 ( 0.00%)                  assert(head && tail);
   10,080 ( 0.00%)                  sizeInBlocks = computeSizeInBlocks();
    8,225 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::computeSizeInBlocks() (329x)
        .                           // remove all blocks after predecessor in the other bag
    4,032 ( 0.00%)                  predecessor->next = NULL;
    6,048 ( 0.00%)                  other->tail = predecessor;
   10,080 ( 0.00%)                  other->sizeInBlocks = other->computeSizeInBlocks();
    6,251 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::computeSizeInBlocks() (329x)
   16,128 ( 0.00%)                  assert(other->head && other->tail);
        .                       }
        .                       DEBUG2 other->validate();
        .                       DEBUG2 validate();
   14,112 ( 0.00%)          }
   23,520 ( 0.00%)          void appendMoveFullBlocks(blockbag<T> * const other) {
   32,928 ( 0.01%)              appendMoveFullBlocks(other, other->head);
   57,351 ( 0.01%)  => FomitchevRuppert/../setbench/common/recordmgr/blockbag.h:blockbag<InsertDescNode>::appendMoveFullBlocks(blockbag<InsertDescNode>*, block<InsertDescNode>*) (1,180x)
   14,112 ( 0.00%)          }
        .                   void appendMoveAll(blockbag<T> * const other) {
        .                       assert(other);
        .                       DEBUG2 validate();
        .                       appendMoveFullBlocks(other);
        .                       while (!other->isEmpty()) {
        .                           add(other->remove());
        .                       }
        .                       sizeInBlocks = computeSizeInBlocks();
-- line 657 ----------------------------------------
-- line 661 ----------------------------------------
        .                       int result = 0;
        .                       block<T> *curr = head;
        .                       while (curr) {
        .                           result += curr->computeSize();
        .                           curr = curr->next;
        .                       }
        .                       return result;
        .                   }
    5,046 ( 0.00%)          int getSizeInBlocks() {
    3,364 ( 0.00%)              return sizeInBlocks;
    3,364 ( 0.00%)          }
        .                   // this function is occasionally useful if, for instance,
        .                   // you use a bump allocator, which hands out objects from
        .                   // a huge slab of memory.
        .                   // then, in the destructor for a data structure, we can clear
        .                   // a blockbag without worrying about leaking memory,
        .                   // since we will just free the whole slab at once.
        .                   void clearWithoutFreeingElements() {
        .                       // free all blocks except for head.
-- line 679 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .               classPool       *pool;
        .               classReclaim    *reclaim;
        .           
        .               const int NUM_PROCESSES;
        .               debugInfo debugInfoRecord;
        .               RecoveryMgr<void *> * const recoveryMgr;
        .               PAD;
        .           
       63 ( 0.00%)      record_manager_single_type(const int numProcesses, RecoveryMgr<void *> * const _recoveryMgr)
       84 ( 0.00%)              : NUM_PROCESSES(numProcesses), debugInfoRecord(debugInfo(numProcesses)), recoveryMgr(_recoveryMgr) {
      468 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/debug_info.h:debugInfo::debugInfo(int) (1x)
        .                   VERBOSE DEBUG COUTATOMIC("constructor record_manager_single_type"<<std::endl);
       91 ( 0.00%)          alloc = new classAlloc(numProcesses, &debugInfoRecord);
      201 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
       29 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<InsertDescNode>::allocator_new(int, debugInfo*) (1x)
      105 ( 0.00%)          pool = new classPool(numProcesses, alloc, &debugInfoRecord);
    2,071 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<InsertDescNode, allocator_new<InsertDescNode> >::pool_none(int, allocator_new<InsertDescNode>*, debugInfo*) (1x)
      201 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
      126 ( 0.00%)          reclaim = new classReclaim(numProcesses, pool, &debugInfoRecord, recoveryMgr);
    2,853 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::reclaimer_debra(int, pool_none<InsertDescNode, allocator_new<InsertDescNode> >*, debugInfo*, RecoveryMgr<void*>*) (1x)
      350 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
       49 ( 0.00%)      }
       35 ( 0.00%)      ~record_manager_single_type() {
        .                   VERBOSE DEBUG COUTATOMIC("destructor record_manager_single_type"<<std::endl);
       70 ( 0.00%)          delete reclaim;
      224 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
       16 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<NotifyDescNode, pool_none<NotifyDescNode, allocator_new<NotifyDescNode> > >::~reclaimer_debra() (1x)
       70 ( 0.00%)          delete pool;
   31,885 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<NotifyDescNode, allocator_new<NotifyDescNode> >::~pool_none() (1x)
       80 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
       70 ( 0.00%)          delete alloc;
       80 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
       16 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<NotifyDescNode>::~allocator_new() (1x)
       56 ( 0.00%)      }
        6 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/debug_info.h:debugInfo::~debugInfo() (1x)
        .           
      140 ( 0.00%)      void initThread(const int tid) {
      168 ( 0.00%)          alloc->initThread(tid);
       28 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<DelNode>::initThread(int) (4x)
      168 ( 0.00%)          pool->initThread(tid);
       28 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<DelNode, allocator_new<DelNode> >::initThread(int) (4x)
      168 ( 0.00%)          reclaim->initThread(tid);
    9,542 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<DelNode, pool_none<DelNode, allocator_new<DelNode> > >::initThread(int) (4x)
        .           //        endOp(tid);
       84 ( 0.00%)      }
        .           
      140 ( 0.00%)      void deinitThread(const int tid) {
      168 ( 0.00%)          reclaim->deinitThread(tid);
  118,375 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::deinitThread(int) (4x)
      168 ( 0.00%)          pool->deinitThread(tid);
       28 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> >::deinitThread(int) (4x)
      168 ( 0.00%)          alloc->deinitThread(tid);
       28 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/allocator_new.h:allocator_new<RU_ALL_INS_DescNode>::deinitThread(int) (4x)
       84 ( 0.00%)      }
        .           
        .               inline void clearCounters() {
        .                   debugInfoRecord.clear();
        .               }
        .           
        .               inline static bool shouldHelp() { // FOR DEBUGGING PURPOSES
        .                   return Reclaim::shouldHelp();
        .               }
-- line 111 ----------------------------------------
-- line 132 ----------------------------------------
        .               }
        .           
        .               inline static bool supportsCrashRecovery() {
        .                   return Reclaim::supportsCrashRecovery();
        .               }
        .               inline static bool quiescenceIsPerRecordType() {
        .                   return Reclaim::quiescenceIsPerRecordType();
        .               }
  973,475 ( 0.15%)      inline bool isQuiescent(const int tid) {
1,168,170 ( 0.18%)          return reclaim->isQuiescent(tid);
3,569,618 ( 0.56%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::isQuiescent(int) (60,502x)
  389,390 ( 0.06%)      }
        .           
        .               // for epoch based reclamation
  973,475 ( 0.15%)      inline void endOp(const int tid) {
        .           //        VERBOSE DEBUG2 COUTATOMIC("record_manager_single_type::endOp(tid="<<tid<<")"<<std::endl);
1,168,170 ( 0.18%)          reclaim->endOp(tid);
5,021,666 ( 0.79%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::endOp(int) (60,502x)
  584,085 ( 0.09%)      }
        .               template <typename First, typename... Rest>
1,752,255 ( 0.28%)      inline void startOp(const int tid, void * const * const reclaimers, const int numReclaimers, const bool readOnly = false) {
        .           //        assert(isQuiescent(tid));
1,752,255 ( 0.28%)          reclaim->template startOp<First, Rest...>(tid, reclaimers, numReclaimers, readOnly);
23,579,597 ( 3.71%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:bool reclaimer_debra<InsertDescNode, pool_none<InsertDescNode, allocator_new<InsertDescNode> > >::startOp<InsertDescNode>(int, void* const*, int, bool) (94,191x)
  584,085 ( 0.09%)      }
        .           
        .               template <typename First, typename... Rest>
        .               inline void debugGCSingleThreaded(void * const * const reclaimers, const int numReclaimers) {
        .                   reclaim->template debugGCSingleThreaded<First, Rest...>(reclaimers, numReclaimers);
        .               }
        .           
        .               // for all schemes except reference counting
  523,890 ( 0.08%)      inline void retire(const int tid, record_pointer p) {
  349,260 ( 0.05%)          assert(!Reclaim::supportsCrashRecovery() || isQuiescent(tid));
   67,380 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<void, pool_interface<void, allocator_interface<void> > >::supportsCrashRecovery() (13,476x)
  611,205 ( 0.10%)          reclaim->retire(tid, p);
1,133,446 ( 0.18%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<RU_ALL_INS_DescNode, pool_none<RU_ALL_INS_DescNode, allocator_new<RU_ALL_INS_DescNode> > >::retire(int, RU_ALL_INS_DescNode*) (13,476x)
  261,945 ( 0.04%)      }
        .           
        .               // for all schemes
        .               template <class... Types>
  786,709 ( 0.12%)      inline record_pointer allocate(const int tid, Types ...args) {
  484,040 ( 0.08%)          assert(!Reclaim::supportsCrashRecovery() || isQuiescent(tid));
       40 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<long, pool_interface<long, allocator_interface<long> > >::supportsCrashRecovery() (8x)
  934,659 ( 0.15%)          return pool->get(tid, args...);
    5,400 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/pool_none.h:DelNode* pool_none<DelNode, allocator_new<DelNode> >::get<long, int, decltype(nullptr)>(int, long, int, decltype(nullptr)) (8x)
  242,020 ( 0.04%)      }
        .               inline void deallocate(const int tid, record_pointer p) {
        .                   assert(!Reclaim::supportsCrashRecovery() || isQuiescent(tid));
        .                   pool->add(tid, p);
        .               }
        .           
        .               void printStatus(void) {
        .                   long long allocated = debugInfoRecord.getTotalAllocated();
        .                   long long allocatedBytes = allocated * sizeof(Record);
-- line 179 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/unordered_set.h
--------------------------------------------------------------------------------
Ir               

-- line 96 ----------------------------------------
      .              *
      .              *  Base is _Hashtable, dispatched at compile time via template
      .              *  alias __uset_hashtable.
      .              */
      .             template<typename _Value,
      .           	   typename _Hash = hash<_Value>,
      .           	   typename _Pred = equal_to<_Value>,
      .           	   typename _Alloc = allocator<_Value>>
536,260 ( 0.08%)      class unordered_set
3,995,137 ( 0.63%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() (26,813x)
      .               {
      .                 typedef __uset_hashtable<_Value, _Hash, _Pred, _Alloc>  _Hashtable;
      .                 _Hashtable _M_h;
      .           
      .               public:
      .                 // typedefs:
      .                 ///@{
      .                 /// Public typedefs.
-- line 112 ----------------------------------------
-- line 134 ----------------------------------------
      .           #if __cplusplus > 201402L
      .                 using node_type = typename _Hashtable::node_type;
      .                 using insert_return_type = typename _Hashtable::insert_return_type;
      .           #endif
      .           
      .                 // construct/destroy/copy
      .           
      .                 /// Default constructor.
536,260 ( 0.08%)        unordered_set() = default;
2,949,430 ( 0.46%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<InsNode*, InsNode*, std::allocator<InsNode*>, std::__detail::_Identity, std::equal_to<InsNode*>, std::hash<InsNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() (26,813x)
      .           
      .                 /**
      .                  *  @brief  Default constructor creates no elements.
      .                  *  @param __n  Minimal initial number of buckets.
      .                  *  @param __hf  A hash functor.
      .                  *  @param __eql  A key equality functor.
      .                  *  @param __a  An allocator object.
      .                  */
-- line 150 ----------------------------------------
-- line 684 ----------------------------------------
      .                  *  @param  __x  Element to located.
      .                  *  @return  Number of elements with specified key.
      .                  *
      .                  *  This function only makes sense for unordered_multisets; for
      .                  *  unordered_set the result will either be 0 (not present) or 1
      .                  *  (present).
      .                  */
      .                 size_type
 33,685 ( 0.01%)        count(const key_type& __x) const
 47,159 ( 0.01%)        { return _M_h.count(__x); }
1,536,036 ( 0.24%)  => /usr/include/c++/13.2.1/bits/hashtable.h:std::_Hashtable<DelNode*, DelNode*, std::allocator<DelNode*>, std::__detail::_Identity, std::equal_to<DelNode*>, std::hash<DelNode*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::count(DelNode* const&) const (6,737x)
      .           
      .           #if __cplusplus > 201703L
      .                 template<typename _Kt>
      .           	auto
      .           	count(const _Kt& __k) const
      .           	-> decltype(_M_h._M_count_tr(__k))
      .           	{ return _M_h._M_count_tr(__k); }
      .           #endif
-- line 701 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13.2.1/bits/vector.tcc
--------------------------------------------------------------------------------
Ir               

-- line 103 ----------------------------------------
      .             template<typename _Tp, typename _Alloc>
      .               template<typename... _Args>
      .           #if __cplusplus > 201402L
      .                 _GLIBCXX20_CONSTEXPR
      .                 typename vector<_Tp, _Alloc>::reference
      .           #else
      .                 void
      .           #endif
121,278 ( 0.02%)        vector<_Tp, _Alloc>::
      .                 emplace_back(_Args&&... __args)
      .                 {
121,278 ( 0.02%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
      .           	  {
      .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
      .           	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
      .           				     std::forward<_Args>(__args)...);
      .           	    ++this->_M_impl._M_finish;
      .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
      .           	  }
      .           	else
262,769 ( 0.04%)  	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
10,832,104 ( 1.70%)  => /usr/include/c++/13.2.1/bits/vector.tcc:void std::vector<DelNode*, std::allocator<DelNode*> >::_M_realloc_insert<DelNode*>(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >, DelNode*&&) (13,474x)
404,220 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::end() (13,474x)
 80,844 ( 0.01%)  => /usr/include/c++/13.2.1/bits/move.h:DelNode*&& std::forward<DelNode*>(std::remove_reference<DelNode*>::type&) (13,474x)
      .           #if __cplusplus > 201402L
 60,639 ( 0.01%)  	return back();
1,320,452 ( 0.21%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::back() (13,474x)
      .           #endif
 60,639 ( 0.01%)        }
      .           #endif
      .           
      .             template<typename _Tp, typename _Alloc>
      .               _GLIBCXX20_CONSTEXPR
      .               typename vector<_Tp, _Alloc>::iterator
      .               vector<_Tp, _Alloc>::
      .           #if __cplusplus >= 201103L
      .               insert(const_iterator __position, const value_type& __x)
-- line 135 ----------------------------------------
-- line 437 ----------------------------------------
      .           #endif
      .               }
      .           
      .           #if __cplusplus >= 201103L
      .             template<typename _Tp, typename _Alloc>
      .               template<typename... _Args>
      .                 _GLIBCXX20_CONSTEXPR
      .                 void
202,169 ( 0.03%)        vector<_Tp, _Alloc>::
      .                 _M_realloc_insert(iterator __position, _Args&&... __args)
      .           #else
      .             template<typename _Tp, typename _Alloc>
      .               void
      .               vector<_Tp, _Alloc>::
      .               _M_realloc_insert(iterator __position, const _Tp& __x)
      .           #endif
      .               {
      .                 const size_type __len =
121,296 ( 0.02%)  	_M_check_len(size_type(1), "vector::_M_realloc_insert");
    727 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_M_check_len(unsigned long, char const*) const (3x)
 60,648 ( 0.01%)        pointer __old_start = this->_M_impl._M_start;
 60,648 ( 0.01%)        pointer __old_finish = this->_M_impl._M_finish;
202,160 ( 0.03%)        const size_type __elems_before = __position - begin();
    102 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >::difference_type __gnu_cxx::operator-<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >(__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > > const&) (3x)
     87 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::begin() (3x)
121,296 ( 0.02%)        pointer __new_start(this->_M_allocate(__len));
    756 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_M_allocate(unsigned long) (3x)
 40,432 ( 0.01%)        pointer __new_finish(__new_start);
      .                 __try
      .           	{
      .           	  // The order of the three operations is dictated by the C++11
      .           	  // case, where the moves could alter a new element belonging
      .           	  // to the existing vector.  This is an issue only for callers
      .           	  // taking the element by lvalue ref (see last bullet of C++11
      .           	  // [res.on.arguments]).
181,947 ( 0.03%)  	  _Alloc_traits::construct(this->_M_impl,
     18 ( 0.00%)  => /usr/include/c++/13.2.1/bits/move.h:std::vector<TrieNode, std::allocator<TrieNode> > const& std::forward<std::vector<TrieNode, std::allocator<TrieNode> > const&>(std::remove_reference<std::vector<TrieNode, std::allocator<TrieNode> > const&>::type&) (3x)
 40,444 ( 0.01%)  				   __new_start + __elems_before,
      .           #if __cplusplus >= 201103L
      .           				   std::forward<_Args>(__args)...);
      .           #else
      .           				   __x);
      .           #endif
 20,216 ( 0.00%)  	  __new_finish = pointer();
      .           
      .           #if __cplusplus >= 201103L
      .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
      .           	    {
202,160 ( 0.03%)  	      __new_finish = _S_relocate(__old_start, __position.base(),
  1,200 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_S_relocate(std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > >&) (3x)
     18 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >::base() const (3x)
 80,864 ( 0.01%)  					 __new_start, _M_get_Tp_allocator());
     18 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_M_get_Tp_allocator() (3x)
      .           
 20,216 ( 0.00%)  	      ++__new_finish;
      .           
202,160 ( 0.03%)  	      __new_finish = _S_relocate(__position.base(), __old_finish,
    246 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_S_relocate(std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<TrieNode, std::allocator<TrieNode> >*, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > >&) (3x)
     18 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >::base() const (3x)
 80,864 ( 0.01%)  					 __new_finish, _M_get_Tp_allocator());
     18 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_M_get_Tp_allocator() (3x)
      .           	    }
      .           	  else
      .           #endif
      .           	    {
      .           	      __new_finish
      .           		= std::__uninitialized_move_if_noexcept_a
      .           		(__old_start, __position.base(),
      .           		 __new_start, _M_get_Tp_allocator());
-- line 494 ----------------------------------------
-- line 511 ----------------------------------------
      .           	  _M_deallocate(__new_start, __len);
      .           	  __throw_exception_again;
      .           	}
      .           #if __cplusplus >= 201103L
      .                 if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
      .           #endif
      .           	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      .                 _GLIBCXX_ASAN_ANNOTATE_REINIT;
101,080 ( 0.02%)        _M_deallocate(__old_start,
    257 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::_Vector_base<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::_M_deallocate(std::vector<TrieNode, std::allocator<TrieNode> >*, unsigned long) (3x)
 80,873 ( 0.01%)  		    this->_M_impl._M_end_of_storage - __old_start);
 60,648 ( 0.01%)        this->_M_impl._M_start = __new_start;
 60,648 ( 0.01%)        this->_M_impl._M_finish = __new_finish;
121,308 ( 0.02%)        this->_M_impl._M_end_of_storage = __new_start + __len;
141,524 ( 0.02%)      }
      .           
      .             template<typename _Tp, typename _Alloc>
      .               _GLIBCXX20_CONSTEXPR
      .               void
      .               vector<_Tp, _Alloc>::
      .               _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
      .               {
      .                 if (__n != 0)
-- line 532 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: trie.h
--------------------------------------------------------------------------------
Ir                 

-- line 30 ----------------------------------------
        .           //TODO add comments everywhere
        .           using std::vector;
        .           using std::unordered_set;
        .           using std::set;
        .           using std::string;
        .           using std::deque;
        .           
        .           inline int __attribute__((always_inline)) compareUpdate(ListNode *u1, ListNode *u2){
   80,856 ( 0.01%)      UpdateNode *a = (UpdateNode*)u1;
   80,856 ( 0.01%)      UpdateNode *b = (UpdateNode*)u2;
  107,808 ( 0.02%)      return a->key - b->key;
        .           }
        .           
        .           
        .           inline int __attribute__((always_inline)) reverseCompareUpdate(RU_ALL_Node *u1, RU_ALL_Node *u2){
   80,856 ( 0.01%)      UpdateNode *a = (UpdateNode*)u1;
   80,856 ( 0.01%)      UpdateNode *b = (UpdateNode*)u2;
  107,808 ( 0.02%)      return b->key - a->key;
        .           }
        .           
        .           
        .           //TODO ifdef debug
        .           class Trie{
        .               private:
        .               const int b;
        .               const int64_t universeSize; //Equal to 2^b 
        .               vector<vector<TrieNode>> trieNodes;
        .               vector<LatestList> latest;
        .               NodeRecordManager recordMgr;
        .               P_ALL_TYPE P_ALL;
        .               LinkedList_FRE<compareUpdate> U_ALL;
        .               RU_ALL_TYPE<reverseCompareUpdate> RU_ALL;
        .               public:
       55 ( 0.00%)      Trie(int size) : b(size), universeSize(1 << b), latest(universeSize), recordMgr(NUM_THREADS), P_ALL(), U_ALL(), RU_ALL()
   29,997 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::record_manager(int, int) (1x)
   15,574 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::RU_ALL_TYPE() (1x)
    9,169 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::LinkedList_FRE() (1x)
    1,447 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::vector(unsigned long, std::allocator<LatestList> const&) (1x)
      192 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::P_ALL_TYPE() (1x)
       48 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::vector() (1x)
        .               {
        3 ( 0.00%)          threadInit();
    9,181 ( 0.00%)  => trie.h:Trie::threadInit() (1x)
       10 ( 0.00%)          auto guard = recordMgr.getGuard(threadID());
    1,582 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::getGuard(int, bool) (1x)
        9 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (1x)
        .                   
        .                   //Initialize the binary trie nodes for each level of the trie.
       26 ( 0.00%)          for(int i = 0; i <= b;++i){
       36 ( 0.00%)              int64_t rowSize = (1 << i); //Row size = 2^i
       24 ( 0.00%)              vector<TrieNode> trieNodeRow(rowSize);
    2,483 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::vector(unsigned long, std::allocator<TrieNode> const&) (4x)
       24 ( 0.00%)              trieNodes.push_back(trieNodeRow);
   10,391 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::push_back(std::vector<TrieNode, std::allocator<TrieNode> > const&) (4x)
       12 ( 0.00%)          }
    1,522 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::~vector() (4x)
        .           
        9 ( 0.00%)          vector<TrieNode> &baseRow = trieNodes[b];
       14 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (1x)
        .           
        .                   //Initialize the latest lists for each key in the universe.
        .                   //Initialize row b of binary trie nodes.
        .                   //Initially, each latest list's head = a DelNode with
       46 ( 0.00%)          for(int64_t key = 0; key < universeSize;++key){
      112 ( 0.00%)              DelNode *initialDelNode = recordMgr.allocate<DelNode>(threadID(), key, b, nullptr);
    6,264 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:DelNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<DelNode, long, int, decltype(nullptr)>(int, long, int, decltype(nullptr)) (8x)
       72 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (8x)
        .                       //delList.insert(initialDelNode);
       56 ( 0.00%)              initialDelNode->upper0Boundary = b; // The initial delNodes for the trie have upper0Boundary = b.
      488 ( 0.00%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::operator=(int) (8x)
       80 ( 0.00%)              latest[key].head = initialDelNode;
      584 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator=(UpdateNode*) (8x)
       88 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::operator[](unsigned long) (8x)
       40 ( 0.00%)              initialDelNode->status = ACTIVE;
      376 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::operator=(STATUS) (8x)
       72 ( 0.00%)              baseRow[key].dNodePtr = initialDelNode;
      584 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator=(DelNode*) (8x)
       88 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (8x)
        .                       //initialDelNode->retireCounter += 2;
        .                   }
        .           
        .                   //Initialize rows 1 through b-1, such that every trieNode that is a parent of two trieNodes
        .                   //Has its dNodePtr set to the dNodePtr of its left child.
       16 ( 0.00%)          for(int row = b-1; row >= 0; row--){
       21 ( 0.00%)              int64_t rowSize = (1 << row);
       24 ( 0.00%)              vector<TrieNode> &trieNodeRow = trieNodes[row];
       42 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (3x)
       27 ( 0.00%)              vector<TrieNode> &childRow = trieNodes[row + 1];
       42 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (3x)
       43 ( 0.00%)              for(int64_t i = 0; i < rowSize;++i){
       21 ( 0.00%)                  int64_t leftChild = 2 * i;
       56 ( 0.00%)                  DelNode *dNode = childRow[leftChild].dNodePtr;
      378 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const (7x)
       77 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (7x)
       63 ( 0.00%)                  trieNodeRow[i].dNodePtr = dNode;
      511 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator=(DelNode*) (7x)
       77 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (7x)
        .                           //dNode->retireCounter += 1;
        .                       }
        .                   }
        .           
        3 ( 0.00%)          verifyLists();
      169 ( 0.00%)  => trie.h:Trie::verifyLists() (1x)
       12 ( 0.00%)      }
      187 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (1x)
        8 ( 0.00%)      ~Trie(){
        3 ( 0.00%)          threadInit();
       56 ( 0.00%)  => trie.h:Trie::threadInit() (1x)
        8 ( 0.00%)          recordMgr.startOp(threadID());
    2,798 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::startOp(int, bool) (1x)
        9 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (1x)
        .                   
        .                   //Attempt to retire all of the UpdateNodes stored in the latest lists
        .                   //And all of the dNodePtrs.
       75 ( 0.00%)          for(vector<TrieNode> &trieNodeRow : trieNodes){
      155 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >(__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > > const&) (5x)
       44 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >::operator++() (4x)
       30 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::end() (1x)
       29 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::begin() (1x)
       28 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::vector<TrieNode, std::allocator<TrieNode> >*, std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > > >::operator*() const (4x)
      282 ( 0.00%)              for(TrieNode &tNode : trieNodeRow){
      589 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<TrieNode*, std::vector<TrieNode, std::allocator<TrieNode> > >(__gnu_cxx::__normal_iterator<TrieNode*, std::vector<TrieNode, std::allocator<TrieNode> > > const&, __gnu_cxx::__normal_iterator<TrieNode*, std::vector<TrieNode, std::allocator<TrieNode> > > const&) (19x)
      165 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<TrieNode*, std::vector<TrieNode, std::allocator<TrieNode> > >::operator++() (15x)
      120 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::end() (4x)
      116 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::begin() (4x)
      105 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<TrieNode*, std::vector<TrieNode, std::allocator<TrieNode> > >::operator*() const (15x)
       60 ( 0.00%)                  DelNode *dNode = tNode.dNodePtr;
      810 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const (15x)
        .                           //int reclaim = dNode->retireCounter.fetch_add(-1);
        .                           //if(reclaim == 1)dNode->retire(recordMgr);
        .                       }
        .                   }
      131 ( 0.00%)          for(LatestList &list : latest){
      279 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<LatestList*, std::vector<LatestList, std::allocator<LatestList> > >(__gnu_cxx::__normal_iterator<LatestList*, std::vector<LatestList, std::allocator<LatestList> > > const&, __gnu_cxx::__normal_iterator<LatestList*, std::vector<LatestList, std::allocator<LatestList> > > const&) (9x)
       88 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<LatestList*, std::vector<LatestList, std::allocator<LatestList> > >::operator++() (8x)
       56 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<LatestList*, std::vector<LatestList, std::allocator<LatestList> > >::operator*() const (8x)
       30 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::end() (1x)
       29 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::begin() (1x)
       32 ( 0.00%)              UpdateNode *uNode = list.head;
      432 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const (8x)
       40 ( 0.00%)              UpdateNode *next = uNode->latestNext;
      432 ( 0.00%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const (8x)
        .                       if(next){
        .                           //int reclaim = next->retireCounter.fetch_add(-1);
        .                           //if(reclaim == 1){
        .                           //    next->retire(recordMgr);
        .                           //}
        .                       }
        .                       //int reclaim = uNode->retireCounter.fetch_add(-1);
        .                       //if(reclaim == 1){
        .                          // uNode->retire(recordMgr);
        .                       //}
        .                   }
        3 ( 0.00%)          verifyLists();
      169 ( 0.00%)  => trie.h:Trie::verifyLists() (1x)
        .           
        7 ( 0.00%)          recordMgr.endOp(threadID());
      173 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::endOp(int) (1x)
        9 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (1x)
       28 ( 0.00%)          for(int i = 0;i < NUM_THREADS;++i){
       48 ( 0.00%)              recordMgr.deinitThread(i);
6,470,577 ( 1.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::deinitThread(int) (8x)
        .                   }
       31 ( 0.00%)      }
8,974,087 ( 1.41%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::~RU_ALL_TYPE() (1x)
  104,848 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::~LinkedList_FRE() (1x)
   78,547 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::~record_manager() (1x)
    1,297 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::~vector() (1x)
      244 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::~vector() (1x)
        6 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::~P_ALL_TYPE() (1x)
1,096,320 ( 0.17%)      UpdateNode *findLatest(int64_t x){
1,973,376 ( 0.31%)          UpdateNode *l = latest[x].head;
11,840,256 ( 1.86%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const (219,264x)
2,411,904 ( 0.38%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::operator[](unsigned long) (219,264x)
1,754,112 ( 0.28%)          if(l->status == INACTIVE){
8,551,296 ( 1.35%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::operator STATUS() const (219,264x)
        .                       UpdateNode *m = l->latestNext;
        .                       if(m)return m;
        .                   }
  219,264 ( 0.03%)          return l;
  438,528 ( 0.07%)      }
  334,040 ( 0.05%)      bool firstActivated(UpdateNode *u){
  668,080 ( 0.11%)          UpdateNode *l = latest[u->key].head;
3,607,632 ( 0.57%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const (66,808x)
  734,888 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::operator[](unsigned long) (66,808x)
  334,040 ( 0.05%)          return (u == l) || (l->status == INACTIVE && u == l->latestNext);
  133,616 ( 0.02%)      }
        .               bool search(int64_t x){
        .                   assert(x >= 0 && x <= universeSize);
        .                   threadInit();
        .                   auto guard = recordMgr.getGuard(threadID());
        .           
        .                   UpdateNode *l = findLatest(x);
        .                   return l->type == INS; //Return whether the root of the latest was an insert node.
        .               }
        .           
1,034,316 ( 0.16%)      char interpretedBit(TrieNode *t, int height){
  689,544 ( 0.11%)          UpdateNode *dNode = t->dNodePtr;
9,308,844 ( 1.47%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const (172,386x)
1,206,702 ( 0.19%)          UpdateNode *uNode = findLatest(dNode->key);
22,237,794 ( 3.50%)  => trie.h:Trie::findLatest(long) (172,386x)
  853,348 ( 0.13%)          if(uNode->type == INS)return 1;
        .                   else{
  180,968 ( 0.03%)              DelNode *d = (DelNode*)uNode; //uNode must have type = DEL
  752,670 ( 0.12%)              if (height >= d->lower1Boundary.minRead()) return 1;
6,876,784 ( 1.08%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::minRead() (90,484x)
  711,108 ( 0.11%)              else if(height <= d->upper0Boundary)return 0;
3,423,825 ( 0.54%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::operator int() const (76,085x)
   24,871 ( 0.00%)              else return 1;
        .                   }
  344,772 ( 0.05%)      }
        .           
        .           
        .               //Help to activate the update node created by an insert or delete operation....
        .               void helpActivate(UpdateNode *uNode){
        .                   if (uNode->status == INACTIVE){
        .                       U_ALL.insert(uNode);
        .                       RU_ALL.insert(uNode);
        .           
-- line 179 ----------------------------------------
-- line 189 ----------------------------------------
        .                               //TODO might help with knowing if a node can be reclaimed...
        .                           }
        .                       }
        .                   }
        .               }
        .               
        .           
        .               //Notify predecessor operation by placing a new notify node in the notify list.
  181,899 ( 0.03%)      void sendNotification(NotifyNode *newNotifyNode, PredecessorNode *pNode){
        .                   while(1){
  101,055 ( 0.02%)              NotifyNode *nNode = pNode->notifyListHead;
1,091,394 ( 0.17%)  => /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::operator NotifyNode*() const (20,211x)
   60,633 ( 0.01%)              newNotifyNode->next = nNode;
  181,899 ( 0.03%)              if(!firstActivated(newNotifyNode->updateNode))return; //If the updateNode is no longer the first activated one, no need to continue....
1,758,357 ( 0.28%)  => trie.h:Trie::firstActivated(UpdateNode*) (20,211x)
        .           
        .                       //Otherwise, attempt to put newNotifyNode at the head of the notifyList for pNode.
   40,422 ( 0.01%)              NotifyNode *expected = nNode;
  141,477 ( 0.02%)              pNode->notifyListHead.compare_exchange_strong(expected,newNotifyNode); 
2,081,733 ( 0.33%)  => /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::compare_exchange_strong(NotifyNode*&, NotifyNode*, std::memory_order) (20,211x)
   60,633 ( 0.01%)              if(expected == nNode){
   20,211 ( 0.00%)                  return; //Succeeded in putting newNotifyNode at the head of the notifyList.
        .                       }
        .                   }
  101,055 ( 0.02%)      }
        .           
        .                   //Traverse through the Update Announcement Linked List
  470,260 ( 0.07%)      void traverseUALL(int64_t x, vector<InsNode*> &I, vector<DelNode*> &D){
  396,421 ( 0.06%)          UpdateNode *uNode = (UpdateNode*)U_ALL.first();   
44,028,630 ( 6.93%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::first() (47,026x)
  262,356 ( 0.04%)          while(uNode && uNode->key <= x){
  343,621 ( 0.05%)              if(uNode->status != INACTIVE && firstActivated(uNode)){
1,758,531 ( 0.28%)  => trie.h:Trie::firstActivated(UpdateNode*) (20,213x)
  788,307 ( 0.12%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::operator STATUS() const (20,213x)
  134,764 ( 0.02%)                  if(uNode->type == INS)I.push_back((InsNode*)uNode);
7,018,084 ( 1.10%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::push_back(InsNode*&&) (6,739x)
   94,318 ( 0.01%)                  else D.push_back((DelNode*)uNode);
13,351,742 ( 2.10%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::push_back(DelNode*&&) (13,474x)
        .                       }
  282,982 ( 0.04%)              uNode = (UpdateNode*)U_ALL.next(uNode);
18,690,555 ( 2.94%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::next(ListNode*) (20,213x)
        .                   }                                                                                             
  282,156 ( 0.04%)      }
        .           
        .               //Send notifications to predecessor operations.
  181,917 ( 0.03%)      void notifyPredOps(UpdateNode *uNode){
   60,639 ( 0.01%)          vector<InsNode*> I; 
  970,224 ( 0.15%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::vector() (20,213x)
   60,639 ( 0.01%)          vector <DelNode*> D;
  970,224 ( 0.15%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::vector() (20,213x)
  121,278 ( 0.02%)          traverseUALL(INT64_MAX, I, D);
47,635,421 ( 7.50%)  => trie.h:Trie::traverseUALL(long, std::vector<InsNode*, std::allocator<InsNode*> >&, std::vector<DelNode*, std::allocator<DelNode*> >&) (20,213x)
        .           
  101,065 ( 0.02%)          PredecessorNode *pNode = (PredecessorNode*)P_ALL.first();
1,542,927 ( 0.24%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::first() (20,213x)
  101,061 ( 0.02%)          while(pNode){
        .                       int64_t tau;
  101,055 ( 0.02%)              UpdateNode *notifyThres = pNode->notifyThreshold;
1,091,394 ( 0.17%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const (20,211x)
   60,633 ( 0.01%)              tau = notifyThres->key;
        .           
  141,477 ( 0.02%)              if(firstActivated(uNode)){ //Once false this should not become true again - say to jeremy....
1,758,357 ( 0.28%)  => trie.h:Trie::firstActivated(UpdateNode*) (20,211x)
        .                           #warning updateNodeMax is created as a copy node of node in UALL with largest key < pNode.key 
   20,211 ( 0.00%)                  int64_t maxKey = -1;
   20,211 ( 0.00%)                  InsNode *updateNodeMax = nullptr;
  363,798 ( 0.06%)                  for(InsNode* insNode : I){
  626,541 ( 0.10%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >(__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&, __gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&) (20,211x)
  606,330 ( 0.10%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::end() (20,211x)
  586,119 ( 0.09%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::begin() (20,211x)
        .                               if(insNode->key < pNode->key){
        .                                   if(insNode->key > maxKey)maxKey = insNode->key;
        .                               }
        .                           }
   40,422 ( 0.01%)                  if(maxKey != -1)updateNodeMax = recordMgr.allocate<InsNode>(threadID(), maxKey); 
        .           
        .           
  282,954 ( 0.04%)                  NotifyNode *newNotif = recordMgr.allocate<NotifyNode>(threadID(), uNode, updateNodeMax, tau);
11,414,370 ( 1.80%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:NotifyNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<NotifyNode, UpdateNode*, InsNode*, long>(int, UpdateNode*, InsNode*, long) (20,211x)
  181,899 ( 0.03%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (20,211x)
  121,266 ( 0.02%)                  sendNotification(newNotif,pNode);
5,820,768 ( 0.92%)  => trie.h:Trie::sendNotification(NotifyNode*, PredecessorNode*) (20,211x)
        .                       }
  141,477 ( 0.02%)              pNode = (PredecessorNode*)P_ALL.next(pNode);
1,306,978 ( 0.21%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::next(ListNode*) (20,211x)
        .                   }
  242,556 ( 0.04%)      }
2,919,648 ( 0.46%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::~vector() (20,213x)
2,918,296 ( 0.46%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::~vector() (20,213x)
        .           
   33,695 ( 0.01%)      void insertBinaryTrie(UpdateNode *v){
        .                   //For each binary trie node t on the path from the parent of the leaf with v.key to the root, do 
   20,217 ( 0.00%)          int64_t key = v->key;
  114,563 ( 0.02%)          for(int depth = b-1;depth >= 0;--depth){
   20,217 ( 0.00%)              key = key >> 1;
  262,821 ( 0.04%)              TrieNode &t = trieNodes[depth][key]; //Start from parent of 
  283,038 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (20,217x)
  222,387 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (20,217x)
   80,868 ( 0.01%)              UpdateNode *dNodePtr = t.dNodePtr;
1,091,718 ( 0.17%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const (20,217x)
  141,519 ( 0.02%)              UpdateNode *uNode = findLatest(dNodePtr->key);
2,607,993 ( 0.41%)  => trie.h:Trie::findLatest(long) (20,217x)
        .           
   80,868 ( 0.01%)              if (uNode->type == DEL){
   14,008 ( 0.00%)                  DelNode *delNode = (DelNode*)uNode;
   28,016 ( 0.00%)                  int height = b - depth;
   93,695 ( 0.01%)                  if (height < delNode->lower1Boundary.minRead() && height <= delNode->upper0Boundary){
  532,304 ( 0.08%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::minRead() (7,004x)
  214,560 ( 0.03%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::operator int() const (4,768x)
   12,306 ( 0.00%)                      v->target = delNode;
  149,723 ( 0.02%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator=(DelNode*) (2,051x)
   20,510 ( 0.00%)                      if(firstActivated(v) == false)return;
  178,437 ( 0.03%)  => trie.h:Trie::firstActivated(UpdateNode*) (2,051x)
   12,306 ( 0.00%)                      delNode->lower1Boundary.minWrite(height);
   61,530 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::minWrite(int) (2,051x)
        .                           }
        .                       }
        .                   }
   13,478 ( 0.00%)      }
        .               
        .           
        .               //               0
        .               //           0       1
        .               //         0   1    2  3
        .               //       0  1 2 3  4 5 6 7
        .               // If the index is odd, it is the right child. Subtract 1 to get the left child.
        .               // If the index is even, it is the left child. Add 1 to get the right child.
        .               #define siblingIndex(index) (index + 1 - ((index & 1) * 2))
        .           
   53,896 ( 0.01%)      void deleteBinaryTrie(DelNode *v){
  101,055 ( 0.02%)          TrieNode *t = &trieNodes[b][v->key]; //Get leaf of the trie with v.key
   94,318 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (6,737x)
   74,107 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (6,737x)
   60,633 ( 0.01%)          TrieNode *root = &trieNodes[0][0];
   94,318 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (6,737x)
   74,107 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (6,737x)
        .                   
   20,211 ( 0.00%)          int depth = b;
   20,211 ( 0.00%)          int64_t key = v->key;
   39,364 ( 0.01%)          while(t != root){
   43,236 ( 0.01%)              int height = b - depth;
  194,562 ( 0.03%)              TrieNode *sibling = &trieNodes[depth][siblingIndex(key)];
  151,326 ( 0.02%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (10,809x)
  118,899 ( 0.02%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (10,809x)
  225,432 ( 0.04%)              if(interpretedBit(t, height) == 1 || interpretedBit(sibling, height) == 1)return;
6,701,557 ( 1.05%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (21,618x)
        .           
        .                       //t = t->parent.
    4,122 ( 0.00%)              --depth;
   16,488 ( 0.00%)              height = b-depth;
   24,732 ( 0.00%)              key = key / 2;
   53,586 ( 0.01%)              t = &trieNodes[depth][key];
   57,708 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (4,122x)
   45,342 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (4,122x)
        .           
   16,488 ( 0.00%)              DelNode *d = t->dNodePtr;
  222,588 ( 0.04%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const (4,122x)
   41,220 ( 0.01%)              if(firstActivated(v) == false)return;
  358,614 ( 0.06%)  => trie.h:Trie::firstActivated(UpdateNode*) (4,122x)
   74,196 ( 0.01%)              if(v->stop || v->lower1Boundary.minRead() != b+1)return;
  313,272 ( 0.05%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../BoundedMinReg/minreg.h:MinReg64::minRead() (4,122x)
  193,734 ( 0.03%)  => /usr/include/c++/13.2.1/atomic:std::atomic<bool>::operator bool() const (4,122x)
        .                       
    8,244 ( 0.00%)              DelNode *expected = d;
   24,732 ( 0.00%)              t->dNodePtr.compare_exchange_strong(expected, v);
  424,566 ( 0.07%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::compare_exchange_strong(DelNode*&, DelNode*, std::memory_order) (4,122x)
   12,366 ( 0.00%)              if(expected != d){
        .                           d = t->dNodePtr;
        .                           if(firstActivated(v) == false)return;
        .                           if(v->stop || v->lower1Boundary.minRead() != b+1)return;
        .                           expected = d;
        .                           t->dNodePtr.compare_exchange_strong(expected, v);
        .                           if(expected != d){
        .                               //Retire v if v is no longer in shared memory? (TODO maybe this is silly.)
        .                               return;
-- line 316 ----------------------------------------
-- line 317 ----------------------------------------
        .                           }
        .                           else{
        .                               //Retire d if it is no longer in shared memory.
        .                           }
        .                       }
        .                       else{
        .                           //Retire d if it is no longer in shared memory?
        .                       }
  119,538 ( 0.02%)              TrieNode *left = &trieNodes[depth+1][key * 2], *right = &trieNodes[depth+1][key *2 +1];
  115,416 ( 0.02%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (8,244x)
   90,684 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (8,244x)
   86,562 ( 0.01%)              if(interpretedBit(left, height - 1) == 1 || interpretedBit(right, height- 1))return;
2,860,668 ( 0.45%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (8,244x)
   24,732 ( 0.00%)              v->upper0Boundary = height;
  251,442 ( 0.04%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<int>::operator=(int) (4,122x)
        .                   }
   33,685 ( 0.01%)      }
        .           
        .               /**
        .               Insert operation on the binary trie.
        .               */
  121,482 ( 0.02%)      void insert(int64_t x){
   80,988 ( 0.01%)          assert(x >= 0 && x <= universeSize);
   40,494 ( 0.01%)          threadInit();
  767,351 ( 0.12%)  => trie.h:Trie::threadInit() (13,498x)
  134,980 ( 0.02%)          auto guard = recordMgr.getGuard(threadID());
8,973,636 ( 1.41%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::getGuard(int, bool) (13,498x)
  121,482 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,498x)
   80,988 ( 0.01%)          UpdateNode *dNode = findLatest(x), *expected;
1,741,242 ( 0.27%)  => trie.h:Trie::findLatest(long) (13,498x)
   67,510 ( 0.01%)          if (dNode->type == INS)return; //x already in S, nothing to do!
        .                   //dNode has type DEL and its child, if it has one, is of type INS
        .           
   74,129 ( 0.01%)          InsNode *iNode = recordMgr.allocate<InsNode, int64_t>(threadID(), x);
5,191,567 ( 0.82%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:InsNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<InsNode, long>(int, long) (6,739x)
   60,651 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (6,739x)
   40,434 ( 0.01%)          iNode->latestNext = dNode;
  491,947 ( 0.08%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator=(UpdateNode*) (6,739x)
        .           
   33,695 ( 0.01%)          UpdateNode *latestNext = dNode->latestNext;
  363,906 ( 0.06%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const (6,739x)
   13,478 ( 0.00%)          if(latestNext){
        .                       latestNext->status = STALE;
        .                       //dNode->latestNext = nullptr
        .                       UpdateNode *expected = latestNext;
        .                       dNode->latestNext.compare_exchange_strong(expected, nullptr); 
        .                       if(expected == latestNext){
        .                           //If this is the thread that unlinked latestNext from the latest list, 
        .                           //Attempt to retire latestNext. TODO...
        .                       }
        .                   }
   13,478 ( 0.00%)          expected = dNode;
   80,868 ( 0.01%)          latest[x].head.compare_exchange_strong(expected, iNode);
  694,117 ( 0.11%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::compare_exchange_strong(UpdateNode*&, UpdateNode*, std::memory_order) (6,739x)
   74,129 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::operator[](unsigned long) (6,739x)
   20,217 ( 0.00%)          if (expected != dNode){
        .                       helpActivate(expected);
        .                       //No other thread has seen iNode, so iNode can be retired.
        .                       iNode->retire(recordMgr);
        .                       return;
        .                   }
        .           
   67,390 ( 0.01%)          U_ALL.insert(iNode);
12,688,378 ( 2.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::insert(ListNode*) (6,739x)
   67,390 ( 0.01%)          RU_ALL.insert(iNode);
13,398,106 ( 2.11%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::insert(RU_ALL_Node*) (6,739x)
        .           
    6,739 ( 0.00%)          STATUS expectedStatus = INACTIVE;
   47,173 ( 0.01%)          iNode->status.compare_exchange_strong( expectedStatus, ACTIVE);
1,017,589 ( 0.16%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::compare_exchange_strong(STATUS&, STATUS, std::memory_order) (6,739x)
   33,695 ( 0.01%)          dNode->status = STALE;
  316,733 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::operator=(STATUS) (6,739x)
        .                   
        .                   //iNode->latestNext = nullptr
   13,478 ( 0.00%)          expected = dNode;
   47,173 ( 0.01%)          iNode->latestNext.compare_exchange_strong(expected,nullptr); 
  694,117 ( 0.11%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::compare_exchange_strong(UpdateNode*&, UpdateNode*, std::memory_order) (6,739x)
        .                   if(expected == dNode){
        .                       //TODO retire dNode if possible now that 
        .                   }
        .                   
   33,695 ( 0.01%)          insertBinaryTrie(iNode);
6,290,777 ( 0.99%)  => trie.h:Trie::insertBinaryTrie(UpdateNode*) (6,739x)
   33,695 ( 0.01%)          notifyPredOps(iNode); //Notify predecessor operations that this insertion is in progress...
24,547,713 ( 3.86%)  => trie.h:Trie::notifyPredOps(UpdateNode*) (6,739x)
        .           
        .                   //for each node uNode in U-ALL with uNode.key = x before and including v do
        .                       //uNode.status = STALE
        .           
   67,390 ( 0.01%)          U_ALL.remove(iNode);
10,186,508 ( 1.60%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::remove(ListNode*) (6,739x)
   67,390 ( 0.01%)          RU_ALL.remove(iNode);
10,575,095 ( 1.66%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::remove(RU_ALL_Node*) (6,739x)
        .                   //TODO stuff for retiring iNode if possible....
  141,719 ( 0.02%)      }
2,524,126 ( 0.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (13,498x)
        .               
        .           
  144,793 ( 0.02%)      void remove(int64_t x){
   78,978 ( 0.01%)          assert(x >= 0 && x <= universeSize);
   39,489 ( 0.01%)          threadInit();
  746,831 ( 0.12%)  => trie.h:Trie::threadInit() (13,163x)
  131,630 ( 0.02%)          auto guard = recordMgr.getGuard(threadID());
8,732,709 ( 1.37%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::getGuard(int, bool) (13,163x)
  118,467 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,163x)
        .           
   78,978 ( 0.01%)          UpdateNode *iNode = findLatest(x), *expected;
1,698,027 ( 0.27%)  => trie.h:Trie::findLatest(long) (13,163x)
   65,504 ( 0.01%)          if(iNode->type == DEL)return; //x is not in S, nothing to do!
        .                   //iNode has type INS. If it has a child, its child has type DEL.
        .           
        .                   //PredecessorNode *pNode = new PredecessorNode(x);
   74,107 ( 0.01%)          PredecessorNode *pNode = recordMgr.allocate<PredecessorNode>(threadID(),x);
3,792,044 ( 0.60%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:PredecessorNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<PredecessorNode, long>(int, long) (6,737x)
   60,633 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (6,737x)
   40,422 ( 0.01%)          int64_t delPred = predHelper(pNode);
64,554,308 (10.16%)  => trie.h:Trie::predHelper(PredecessorNode*) (6,737x)
        .           
        .                   //Initialize update node for this delete operation.
  134,740 ( 0.02%)          DelNode *dNode = recordMgr.allocate<DelNode>(threadID(), x, b, iNode, delPred,pNode);
5,544,921 ( 0.87%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:DelNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<DelNode, long, int, UpdateNode*, long, PredecessorNode*>(int, long, int, UpdateNode*, long, PredecessorNode*) (6,737x)
   60,633 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (6,737x)
        .                   //delList.insert(v);
   40,422 ( 0.01%)          dNode->latestNext = iNode;
  491,801 ( 0.08%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator=(UpdateNode*) (6,737x)
        .               
        .                   
   33,685 ( 0.01%)          UpdateNode *latestNext = iNode->latestNext;
  363,798 ( 0.06%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::operator UpdateNode*() const (6,737x)
   20,211 ( 0.00%)          if(latestNext){
        .                       latestNext->status = STALE;
        .                       //iNode->latestNext = nullptr; 
        .                       bool unlink = iNode->latestNext.compare_exchange_strong(latestNext, nullptr);
        .                       if(unlink){  //If this operation unlinked the insNode from the latest list...
        .                           //int retire = latestNext->retireCounter.fetch_add(-1);
        .                           //if(retire == 1)latestNext->retire(recordMgr);
        .                           //assert(retire > 0);
        .                       }   
        .                   }
   33,685 ( 0.01%)          notifyPredOps(iNode);
17,223,812 ( 2.71%)  => trie.h:Trie::notifyPredOps(UpdateNode*) (6,737x)
   13,474 ( 0.00%)          expected = iNode;
   80,844 ( 0.01%)          latest[x].head.compare_exchange_strong(expected, dNode);
  693,911 ( 0.11%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::compare_exchange_strong(UpdateNode*&, UpdateNode*, std::memory_order) (6,737x)
   74,107 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<LatestList, std::allocator<LatestList> >::operator[](unsigned long) (6,737x)
        .           
   26,948 ( 0.00%)          if(expected != iNode){
        .                       //There was a different node, expected, instead of iNode at the head of the latest list.
        .                       //We will help activate it.
        .                       helpActivate(expected);
        .           
        .                       //Remove pNode from P_ALL.
        .                       P_ALL.remove(pNode);
        .                       dNode->retire(recordMgr); //Retire dNode and the pNode. 
        .                       return;
        .                   }
        .           
   67,370 ( 0.01%)          U_ALL.insert(dNode);
13,017,652 ( 2.05%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::insert(ListNode*) (6,737x)
   67,370 ( 0.01%)          RU_ALL.insert(dNode);
13,347,137 ( 2.10%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::insert(RU_ALL_Node*) (6,737x)
        .           
    6,737 ( 0.00%)          STATUS expectedStatus = INACTIVE;
   47,159 ( 0.01%)          dNode->status.compare_exchange_strong(expectedStatus, ACTIVE);
1,017,287 ( 0.16%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::compare_exchange_strong(STATUS&, STATUS, std::memory_order) (6,737x)
   33,685 ( 0.01%)          iNode->status = STALE;
  316,639 ( 0.05%)  => /usr/include/c++/13.2.1/atomic:std::atomic<STATUS>::operator=(STATUS) (6,737x)
        .           
   33,685 ( 0.01%)          UpdateNode *target = iNode->target;
  363,798 ( 0.06%)  => /usr/include/c++/13.2.1/atomic:std::atomic<DelNode*>::operator DelNode*() const (6,737x)
   22,624 ( 0.00%)          if(target)target->stop = true;
  139,080 ( 0.02%)  => /usr/include/c++/13.2.1/atomic:std::atomic<bool>::operator=(bool) (1,830x)
        .                   //v->latestNext = nullptr; 
   53,896 ( 0.01%)          bool unlink = dNode->latestNext.compare_exchange_strong(iNode, nullptr);
  693,911 ( 0.11%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::compare_exchange_strong(UpdateNode*&, UpdateNode*, std::memory_order) (6,737x)
        .                   if(unlink){  
        .                       //If this CAS unlinked iNode from the latest list, decrement its retire counter and retire it if necessary.
        .                   }
   74,107 ( 0.01%)          PredecessorNode *pNode2 = recordMgr.allocate<PredecessorNode>(threadID(), x);
4,602,969 ( 0.72%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:PredecessorNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<PredecessorNode, long>(int, long) (6,737x)
   60,633 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (6,737x)
   40,422 ( 0.01%)          int64_t delPred2 = predHelper(pNode2);
97,130,625 (15.29%)  => trie.h:Trie::predHelper(PredecessorNode*) (6,737x)
   20,211 ( 0.00%)          dNode->delPred2 = delPred2;
        .           
   33,685 ( 0.01%)          deleteBinaryTrie(dNode);
13,541,957 ( 2.13%)  => trie.h:Trie::deleteBinaryTrie(DelNode*) (6,737x)
   33,685 ( 0.01%)          notifyPredOps(dNode);
40,740,630 ( 6.41%)  => trie.h:Trie::notifyPredOps(UpdateNode*) (6,737x)
        .           
        .                   // Delete pNode and pNode2 from P-ALL.
   40,422 ( 0.01%)          P_ALL.remove(pNode);
4,682,215 ( 0.74%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::remove(ListNode*) (6,737x)
   40,422 ( 0.01%)          P_ALL.remove(pNode2);
4,224,099 ( 0.66%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::remove(ListNode*) (6,737x)
        .           
   40,422 ( 0.01%)          pNode2->retire(recordMgr); //pNode2 is no longer in shared memory, so it can be retired.
6,548,639 ( 1.03%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../trieNodeTypes.h:PredecessorNode::retire(record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>&) (6,737x)
        .                   //pNode is still in shared memory but it will be retired when v is retired.
        .           
        .           
   67,370 ( 0.01%)          U_ALL.remove(dNode);
10,188,396 ( 1.60%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::remove(ListNode*) (6,737x)
   67,370 ( 0.01%)          RU_ALL.remove(dNode);
10,570,250 ( 1.66%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::remove(RU_ALL_Node*) (6,737x)
        .           
        .                   //TODO Try to retire dNode if possible....
  177,856 ( 0.03%)      }
2,461,481 ( 0.39%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (13,163x)
        .           
        .               //    0
        .               //   0 0
        .               // 0 0 0 0 
        .           
        .               //y = 3 
        .               //height = 2  
  160,878 ( 0.03%)      int64_t traverseBinaryTrie(int64_t y, int64_t &depth){
  107,252 ( 0.02%)          if(b <= 1)return -1;
        .           
        .                   //Get interpreted bit
        .                   //TrieNode *t = &trieNodes[b][y];
  509,447 ( 0.08%)          TrieNode *tSibling = &trieNodes[b][siblingIndex(y)], 
  375,382 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (26,813x)
  294,943 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (26,813x)
  509,447 ( 0.08%)                              *tParent = &trieNodes[b-1][y / 2];
  375,382 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (26,813x)
  294,943 ( 0.05%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (26,813x)
  134,065 ( 0.02%)          depth = b;
  241,317 ( 0.04%)          int height = b - depth;
  214,504 ( 0.03%)          char i1 = interpretedBit(tParent, height + 1);
7,203,295 ( 1.13%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (26,813x)
  187,691 ( 0.03%)          char i2 = interpretedBit(tSibling, height);
7,406,066 ( 1.17%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (26,813x)
        .                   
        .                   //While i1 = 0, i2 == 0, or t is the leftChild of tParent
  419,599 ( 0.07%)          while(i1 == 0 || (y % 2 == 0) || i2 == 0){
   38,702 ( 0.01%)              y = y >> 1;
  193,510 ( 0.03%)              --depth;
  348,318 ( 0.05%)              height = b - depth;
  154,808 ( 0.02%)              if(depth == 0){
   13,062 ( 0.00%)                  return -1; //Interpreted bit of root node was 0 on previous iteration. Return <-1, null>
        .                       }
        .           
        .                       //t = tParent;
  579,078 ( 0.09%)              tSibling = &trieNodes[depth][siblingIndex(y)];
  450,394 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (32,171x)
  353,881 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (32,171x)
  579,078 ( 0.09%)              tParent = &trieNodes[depth - 1][y / 2];
  450,394 ( 0.07%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (32,171x)
  353,881 ( 0.06%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (32,171x)
        .                       
  257,368 ( 0.04%)              i1 = interpretedBit(tParent,height + 1);
8,809,395 ( 1.39%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (32,171x)
  225,197 ( 0.04%)              i2 = interpretedBit(tSibling, height);
8,596,847 ( 1.35%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (32,171x)
        .                   }
        .           
        .                   //Go to left child of parent. Subtract 1 from y if it is odd. 
   20,282 ( 0.00%)          y = y - (y & 1);
        .                   //t = &trieNodes[depth][y];
        .               
  296,019 ( 0.05%)          while(depth < b){
        .                       //Right child is at 2*y + 1, left child is at 2 * y.
  133,763 ( 0.02%)              int64_t rightIndex = y * 2 + 1, leftIndex = y * 2;
   76,436 ( 0.01%)              int childDepth = depth + 1;
   57,327 ( 0.01%)              int childHeight = height - 1;
  248,417 ( 0.04%)              TrieNode *right = &trieNodes[childDepth][rightIndex];
  267,526 ( 0.04%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (19,109x)
  210,199 ( 0.03%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (19,109x)
  191,090 ( 0.03%)              if(interpretedBit(right, childHeight) == 1){
4,891,361 ( 0.77%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (19,109x)
   27,392 ( 0.00%)                  y = rightIndex;
   54,784 ( 0.01%)                  depth = childDepth;
   27,392 ( 0.00%)                  height = childHeight;
   13,696 ( 0.00%)                  continue;
        .                       }
   70,369 ( 0.01%)              TrieNode *left = &trieNodes[childDepth][leftIndex];
   75,782 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (5,413x)
   59,543 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (5,413x)
   54,130 ( 0.01%)              if(interpretedBit(left, childHeight) == 1){
1,165,398 ( 0.18%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (5,413x)
   10,826 ( 0.00%)                  y = leftIndex;
   21,652 ( 0.00%)                  depth = childDepth;
   10,826 ( 0.00%)                  height = childHeight;
    5,413 ( 0.00%)                  continue;
        .                       }
        .                       
        .                       //Interpreted bits of left and right nodes are 0. No predecessor found.
        .                       return -2;
        .                   }
   20,282 ( 0.00%)          return y;
   53,626 ( 0.01%)      }
        .               
        .           
        .           
  268,130 ( 0.04%)      void traverseAndInsertPALL(PredecessorNode *newNode, deque<PredecessorNode*> &q){
   80,439 ( 0.01%)          set<PredecessorNode*> qSet;
1,984,162 ( 0.31%)  => /usr/include/c++/13.2.1/bits/stl_set.h:std::set<PredecessorNode*, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::set() (26,813x)
  160,878 ( 0.03%)          PredecessorNode *first = (PredecessorNode*)(P_ALL.head.successor.load() & NEXT_MASK);
   53,626 ( 0.01%)          PredecessorNode *pNode = first;
        .                   
        .                   //Traverse P_ALL from start to end
  187,691 ( 0.03%)          while(pNode){
  134,065 ( 0.02%)              q.push_back(pNode);
1,850,097 ( 0.29%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::push_back(PredecessorNode* const&) (26,813x)
  134,065 ( 0.02%)              qSet.insert(pNode);
24,014,740 ( 3.78%)  => /usr/include/c++/13.2.1/bits/stl_set.h:std::set<PredecessorNode*, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::insert(PredecessorNode* const&) (26,813x)
  187,691 ( 0.03%)              pNode = (PredecessorNode*)P_ALL.next(pNode);
1,722,769 ( 0.27%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::next(ListNode*) (26,813x)
        .                   }
        .           
        .                   //Insert newNode into P_ALL
        .                   while(1){
        .                       //Set newNode's next to first.
  134,065 ( 0.02%)              newNode->successor = (uintptr_t)first;
1,635,593 ( 0.26%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator=(unsigned long) (26,813x)
   53,626 ( 0.01%)              uintptr_t expected = (uintptr_t)first;
        .           
  160,878 ( 0.03%)              P_ALL.head.successor.compare_exchange_strong(expected, (uintptr_t)newNode);
  107,252 ( 0.02%)              if(expected == (uintptr_t)first){
  134,065 ( 0.02%)                  q.push_front(newNode); //Put newNode at the front of q.
11,154,968 ( 1.76%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::push_front(PredecessorNode* const&) (26,813x)
   26,813 ( 0.00%)                  return; //newNode was successfully inserted
        .                       }
        .                       int64_t state = (int64_t)(expected & STATUS_MASK);
        .                       ListNode *next = (ListNode*)(expected & NEXT_MASK);
        .                       if(state == DelFlag){
        .                           first = (PredecessorNode*)(P_ALL.helpRemove(&P_ALL.head, next) & NEXT_MASK);
        .                       }
        .           
        .                       vector<PredecessorNode*> qPrime;
-- line 567 ----------------------------------------
-- line 577 ----------------------------------------
        .                       //This way q is sorted from the most recently inserted PNode to the least recently inserted PNode.
        .                       for(vector<PredecessorNode*>::reverse_iterator iter = qPrime.rbegin(); iter != qPrime.rend(); ++iter){
        .                           PredecessorNode *p = *iter;
        .                           
        .                           q.push_front(p);
        .                           qSet.insert(p);
        .                       }
        .                   }
  241,317 ( 0.04%)      }
8,822,055 ( 1.39%)  => /usr/include/c++/13.2.1/bits/stl_set.h:std::set<PredecessorNode*, std::less<PredecessorNode*>, std::allocator<PredecessorNode*> >::~set() (26,813x)
        .           
        .               //Traverse the reverse update announcement linked list.
  268,130 ( 0.04%)      void traverseRUALL(PredecessorNode *pNode, unordered_set<InsNode *> &I, unordered_set<DelNode*> &D){
  274,867 ( 0.04%)          UpdateNode *uNode = (UpdateNode*)RU_ALL.first(pNode); //Atomically set pNode.notifyThreshold....
47,302,624 ( 7.45%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::first(PredecessorNode*) (26,813x)
   93,913 ( 0.01%)          while(uNode){
   60,633 ( 0.01%)              assert(uNode != &RU_ALL.tail);
   40,422 ( 0.01%)              if(uNode->key < pNode->key){
        .                           if(uNode->status != INACTIVE && firstActivated(uNode)){
        .                               if(uNode->type == INS) I.insert((InsNode*)uNode);
        .                               else D.insert((DelNode*)uNode);
        .                           }
        .                       }
  101,055 ( 0.02%)              uNode = (UpdateNode*)RU_ALL.next(pNode,uNode); //Atomically set pNode.notifyThreshold....
11,460,864 ( 1.80%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/RU_ALL.h:RU_ALL_TYPE<&(reverseCompareUpdate(RU_ALL_Node*, RU_ALL_Node*))>::next(PredecessorNode*, RU_ALL_Node*) (6,737x)
        .                   }
  187,691 ( 0.03%)          pNode->notifyThreshold.store(&ZERO_THRES);
1,689,219 ( 0.27%)  => /usr/include/c++/13.2.1/atomic:std::atomic<UpdateNode*>::store(UpdateNode*, std::memory_order) (26,813x)
  160,878 ( 0.03%)      }
        .           
  241,317 ( 0.04%)      int64_t predHelper(PredecessorNode *pNode){
   80,439 ( 0.01%)          deque<PredecessorNode*> Q;
15,525,797 ( 2.44%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::deque() (26,813x)
  160,878 ( 0.03%)          vector<InsNode*> I_1, I_2;
2,574,048 ( 0.41%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::vector() (53,626x)
  160,878 ( 0.03%)          vector<DelNode*> D_1, D_2;
2,574,048 ( 0.41%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::vector() (53,626x)
   80,439 ( 0.01%)          unordered_set<InsNode*> I_0;
3,217,560 ( 0.51%)  => /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<InsNode*, std::hash<InsNode*>, std::equal_to<InsNode*>, std::allocator<InsNode*> >::unordered_set() (26,813x)
   80,439 ( 0.01%)          unordered_set<DelNode*> D_0;
3,217,560 ( 0.51%)  => /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<DelNode*, std::hash<DelNode*>, std::equal_to<DelNode*>, std::allocator<DelNode*> >::unordered_set() (26,813x)
   80,439 ( 0.01%)          int64_t y = pNode->key;
        .                   int64_t depthT;
        .                   
        .           
  160,878 ( 0.03%)          traverseAndInsertPALL(pNode, Q);
56,734,675 ( 8.93%)  => trie.h:Trie::traverseAndInsertPALL(PredecessorNode*, std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >&) (26,813x)
  160,878 ( 0.03%)          traverseRUALL(pNode,I_0, D_0);
61,640,296 ( 9.70%)  => trie.h:Trie::traverseRUALL(PredecessorNode*, std::unordered_set<InsNode*, std::hash<InsNode*>, std::equal_to<InsNode*>, std::allocator<InsNode*> >&, std::unordered_set<DelNode*, std::hash<DelNode*>, std::equal_to<DelNode*>, std::allocator<DelNode*> >&) (26,813x)
  187,691 ( 0.03%)          int64_t pred0 = traverseBinaryTrie(y, depthT);
47,901,655 ( 7.54%)  => trie.h:Trie::traverseBinaryTrie(long, long&) (26,813x)
  160,878 ( 0.03%)          traverseUALL(y, I_1, D_1);
40,267,306 ( 6.34%)  => trie.h:Trie::traverseUALL(long, std::vector<InsNode*, std::allocator<InsNode*> >&, std::vector<DelNode*, std::allocator<DelNode*> >&) (26,813x)
        .           
        .                   //Traverse pNode's notify list...
  134,065 ( 0.02%)          NotifyNode *nNode = pNode->notifyListHead;
1,447,902 ( 0.23%)  => /usr/include/c++/13.2.1/atomic:std::atomic<NotifyNode*>::operator NotifyNode*() const (26,813x)
   80,439 ( 0.01%)          while(nNode){
        .                       if(nNode->key < y){
        .                           if(nNode->key > nNode->notifyThreshold){
        .                               if(nNode->updateNode->type == INS)I_2.push_back((InsNode*)nNode->updateNode);
        .                               else D_2.push_back((DelNode*)nNode->updateNode);
        .           
        .                               if(nNode->updateNodeMax)I_2.push_back(nNode->updateNodeMax);
        .                           }
        .                           else{
-- line 628 ----------------------------------------
-- line 632 ----------------------------------------
        .                       }
        .                       nNode = nNode->next;
        .                   }
        .                   
        .                   //pred1 = key of ins node in I_1 with greatest key
        .                   //pred2 = key of ins node in I_2 with greatest key
        .                   //pred3 = key of del node in d1_minus_d0 with largest key
        .                   //pred4 = key of del node in d2_minus_d0 with largest key
   53,626 ( 0.01%)          int64_t pred1 = -1, pred2 = -1, pred3, pred4;
  482,634 ( 0.08%)          for(InsNode *i : I_1){
  831,203 ( 0.13%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >(__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&, __gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&) (26,813x)
  804,390 ( 0.13%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::end() (26,813x)
  777,577 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::begin() (26,813x)
        .                       if(i->key > pred1)pred1 = i->key;
        .           
        .                   }
  482,634 ( 0.08%)          for(InsNode *i : I_2){
  831,203 ( 0.13%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > >(__gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&, __gnu_cxx::__normal_iterator<InsNode**, std::vector<InsNode*, std::allocator<InsNode*> > > const&) (26,813x)
  804,390 ( 0.13%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::end() (26,813x)
  777,577 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::begin() (26,813x)
        .                       if(i->key > pred2)pred2 = i->key;
        .                   }
        .           
        .                   //Create D1 - D0 and D2 - D0
  583,689 ( 0.09%)          for(DelNode *d : D_1){
1,040,050 ( 0.16%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&, __gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&) (33,550x)
  804,390 ( 0.13%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::end() (26,813x)
  777,577 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::begin() (26,813x)
   74,107 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >::operator++() (6,737x)
   47,159 ( 0.01%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >::operator*() const (6,737x)
   60,633 ( 0.01%)              if(D_0.count(d) == 0){
1,616,880 ( 0.25%)  => /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<DelNode*, std::hash<DelNode*>, std::equal_to<DelNode*>, std::allocator<DelNode*> >::count(DelNode* const&) const (6,737x)
   26,948 ( 0.00%)                  if(d->key > pred3)pred3 = d->key;
        .                       }
        .                   }
  482,634 ( 0.08%)          for(DelNode *d : D_2){
  831,203 ( 0.13%)  => /usr/include/c++/13.2.1/bits/stl_iterator.h:bool __gnu_cxx::operator!=<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > >(__gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&, __gnu_cxx::__normal_iterator<DelNode**, std::vector<DelNode*, std::allocator<DelNode*> > > const&) (26,813x)
  804,390 ( 0.13%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::end() (26,813x)
  777,577 ( 0.12%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::begin() (26,813x)
        .                       if(D_0.count(d) == 0){
        .                           if(d->key > pred4)pred4 = d->key;
        .                       }
        .                   }
        .           
   26,813 ( 0.00%)          int k = -1;
  107,252 ( 0.02%)          if(pred1 > k) k = pred1;
  107,252 ( 0.02%)          if(pred2 > k) k = pred2;
  153,998 ( 0.02%)          if(pred3 > k) k = pred3;
  136,450 ( 0.02%)          if(pred4 > k) k = pred4;
        .                   
        .                   //Binary trie traversal stopped at an internal node t at depth depthT
   53,626 ( 0.01%)          if(pred0 == -2){
        .                       //The minimum key among the leaves of the subtree rooted by t
        .                       //pred0 * 2^(b - depthT)
        .                       int minU_t = pred0 * (1 << (b - depthT)); 
        .                       if(k < minU_t){
        .                           //D_0 must contain a DEL node with key that is in the 
        .                           //range of keys of leaves in the subtree rooted by t
        .                           unordered_set<PredecessorNode*> predNodes;
        .                           predNodes.insert(pNode);
-- line 676 ----------------------------------------
-- line 755 ----------------------------------------
        .                           pred0 = -1;
        .                           for(int64_t v : R){
        .                               if(v > pred0)pred0 = v;
        .                           }
        .                       }
        .                   }
        .           
        .                   //Return the max among pred0 and k.
  111,448 ( 0.02%)          if(pred0 > k)return pred0;
   49,430 ( 0.01%)          else return k;
  750,764 ( 0.12%)      }
17,562,305 ( 2.76%)  => /usr/include/c++/13.2.1/bits/stl_deque.h:std::deque<PredecessorNode*, std::allocator<PredecessorNode*> >::~deque() (26,813x)
6,460,832 ( 1.02%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<DelNode*, std::allocator<DelNode*> >::~vector() (53,626x)
5,684,356 ( 0.89%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<InsNode*, std::allocator<InsNode*> >::~vector() (53,626x)
4,264,101 ( 0.67%)  => /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<DelNode*, std::hash<DelNode*>, std::equal_to<DelNode*>, std::allocator<DelNode*> >::~unordered_set() (26,813x)
4,263,267 ( 0.67%)  => /usr/include/c++/13.2.1/bits/unordered_set.h:std::unordered_set<InsNode*, std::hash<InsNode*>, std::equal_to<InsNode*>, std::allocator<InsNode*> >::~unordered_set() (26,813x)
  120,051 ( 0.02%)      int64_t predecessor(int64_t y){
   80,034 ( 0.01%)          assert(y >= 0 && y <= universeSize);
        .           
   40,017 ( 0.01%)          threadInit();
  758,220 ( 0.12%)  => trie.h:Trie::threadInit() (13,339x)
  133,390 ( 0.02%)          auto guard = recordMgr.getGuard(threadID());
8,877,018 ( 1.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::getGuard(int, bool) (13,339x)
  120,051 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,339x)
        .                   
  146,729 ( 0.02%)          PredecessorNode *p = recordMgr.allocate<PredecessorNode>(threadID(), y);
7,571,980 ( 1.19%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:PredecessorNode* record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::allocate<PredecessorNode, long>(int, long) (13,339x)
  120,051 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,339x)
   80,034 ( 0.01%)          int64_t pred = predHelper(p);
128,689,937 (20.26%)  => trie.h:Trie::predHelper(PredecessorNode*) (13,339x)
   80,034 ( 0.01%)          P_ALL.remove(p);
8,363,553 ( 1.32%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/P_ALL.h:P_ALL_TYPE::remove(ListNode*) (13,339x)
   80,034 ( 0.01%)          p->retire(recordMgr); //PredNode p can be retired, since it is no longer in shared memory.
6,167,085 ( 0.97%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../trieNodeTypes.h:PredecessorNode::retire(record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>&) (13,339x)
   26,678 ( 0.00%)          return pred;
  120,051 ( 0.02%)      }
2,494,393 ( 0.39%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (13,339x)
        .               void printS(){
        .                   std::ostringstream stream;
        .                   int firstElem = 1;
        .                   stream << "\n\t\tS: {";
        .                   for(int64_t i = 0;i < universeSize;++i){
        .                       if(search(i)){
        .                           stream << ((!firstElem) ? ", " : "") << std::to_string(i);
        .                           if(firstElem)firstElem = 0;
        .                       }
        .                   }
        .                   stream << "}\n";
        .                   std::cout << stream.str();
        .               }
        .               //TODO ifdef debug
        9 ( 0.00%)      string interpretedBitsString(){
        8 ( 0.00%)          std::ostringstream stream;
    1,087 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      591 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/sstream:std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::basic_ostringstream() (1x)
        .                   TrieNode *curNode;
        .                   //For each level
       26 ( 0.00%)          for(int depth = 0;depth <= b;++depth){
       24 ( 0.00%)              stream << "\t\t";
      754 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (4x)
        .                       //Add spaces for fancy formatting.
       52 ( 0.00%)              int numSpaces = (1 << b) - (1 << depth);
       88 ( 0.00%)              for(int space = 0;space < numSpaces; ++space){
       89 ( 0.00%)                  stream << ' ';
    1,039 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    1,673 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char) (17x)
        .                       }
       16 ( 0.00%)              int height = b - depth;
        .                       //For every trie node at the given depth, print interpreted bit.
      270 ( 0.00%)              for(uint64_t n = 0; n < trieNodes[depth].size();++n){
      266 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (19x)
      228 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::size() const (19x)
      195 ( 0.00%)                  curNode = &trieNodes[depth][n];
      210 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (15x)
      165 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (15x)
      379 ( 0.00%)                  stream << std::to_string(interpretedBit(curNode, height)) << ' ';
    1,341 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
    5,669 ( 0.00%)  => /usr/include/c++/13.2.1/bits/basic_string.h:std::__cxx11::to_string(int) (15x)
    4,786 ( 0.00%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (15x)
    1,155 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char) (15x)
    2,055 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (15x)
       90 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (15x)
        .                       } 
       24 ( 0.00%)              stream << "\n"; 
      664 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ostream:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) (4x)
        .                   }
       12 ( 0.00%)          return stream.str();
    1,129 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      209 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/sstream:std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::str() const (1x)
       15 ( 0.00%)      }
    1,093 ( 0.00%)  => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
      166 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/sstream:std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream() (1x)
        8 ( 0.00%)      void printInterpretedBits(){
       15 ( 0.00%)          std::cout << interpretedBitsString();
   25,577 ( 0.00%)  => trie.h:Trie::interpretedBitsString[abi:cxx11]() (1x)
      430 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (1x)
       85 ( 0.00%)  => /usr/src/debug/gcc/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (1x)
        7 ( 0.00%)      }
        .           
        .               //Verify that the interpreted bits of the structure are correct.
      105 ( 0.00%)      bool verifyInterpretedBits(int index=0, int depth=0){
       76 ( 0.00%)          if(depth == b)return true;
        .                   else{
       28 ( 0.00%)              int height = b - depth;
       21 ( 0.00%)              int leftIndex = index << 1;
       21 ( 0.00%)              int rightIndex = leftIndex + 1;
       98 ( 0.00%)              TrieNode *node = &trieNodes[depth][index];
       14 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (1x)
       11 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (1x)
      105 ( 0.00%)              TrieNode *leftChild = &trieNodes[depth+1][leftIndex];
       14 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (1x)
       11 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (1x)
      105 ( 0.00%)              TrieNode *rightChild = &trieNodes[depth+1][rightIndex];
       14 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<std::vector<TrieNode, std::allocator<TrieNode> >, std::allocator<std::vector<TrieNode, std::allocator<TrieNode> > > >::operator[](unsigned long) (1x)
       11 ( 0.00%)  => /usr/include/c++/13.2.1/bits/stl_vector.h:std::vector<TrieNode, std::allocator<TrieNode> >::operator[](unsigned long) (1x)
        .                       
       77 ( 0.00%)              if(interpretedBit(node, height) != 
      346 ( 0.00%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (1x)
      125 ( 0.00%)                              (interpretedBit(leftChild, height-1) || interpretedBit(rightChild, height-1)))return false;
      346 ( 0.00%)  => trie.h:Trie::interpretedBit(TrieNode*, int) (1x)
        .           
       70 ( 0.00%)              if(!verifyInterpretedBits(leftIndex, depth+1))return false;
    3,000 ( 0.00%)  => trie.h:Trie::verifyInterpretedBits(int, int)'2 (1x)
       70 ( 0.00%)              else if(!verifyInterpretedBits(rightIndex, depth+1))return false;
    3,772 ( 0.00%)  => trie.h:Trie::verifyInterpretedBits(int, int)'2 (1x)
        7 ( 0.00%)              return true;
        .                   }
       45 ( 0.00%)      }
        .           
        .               //Verify that all of the lists are empty
        8 ( 0.00%)      void verifyLists(){
       16 ( 0.00%)          assert(RU_ALL.head.successor == (uintptr_t)&RU_ALL.tail);
       92 ( 0.00%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (2x)
       16 ( 0.00%)          assert(U_ALL.head.successor == (uintptr_t)&U_ALL.tail);
       92 ( 0.00%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (2x)
       16 ( 0.00%)          assert(P_ALL.head.successor == (uintptr_t)&P_ALL.tail);
       92 ( 0.00%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (2x)
        6 ( 0.00%)      }
        .           
        .               //TODO ifdef debug
        .               void printOpLog(){
        .           
        .               }
        .           
        .               //Initialize this thread with the record manager if this hasn't happened already.
  200,010 ( 0.03%)      void threadInit(){
  160,008 ( 0.03%)          assert(threadID() != -1);
  360,018 ( 0.06%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (40,002x)
  280,014 ( 0.04%)          recordMgr.initThread(threadID());
  761,563 ( 0.12%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::initThread(int) (40,002x)
  360,018 ( 0.06%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (40,002x)
  160,008 ( 0.03%)      }
        .           };

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/list_extension.h
--------------------------------------------------------------------------------
Ir               

-- line 21 ----------------------------------------
      .           //Additional status used when a ListNode's successor is an insert descriptor node.
      .           const uint64_t InsFlag = 3; 
      .           
      .           //Definition of the Insert Descriptor Node object.
      .           class InsertDescNode{
      .               public:
      .               ListNode *newNode;
      .               ListNode *next;
121,284 ( 0.02%)      InsertDescNode(ListNode *ins) : newNode(ins), next(nullptr) {
      .           
 40,428 ( 0.01%)      }
      .           };
      .           typedef record_manager<reclaimer_debra<>, allocator_new<>, pool_none<>, InsertDescNode> InsertDescManager;
      .           
      .           //Linearizable lock-free sorted linked list based on the PODC Paper by Mikhail Fomitchev and Eric Ruppert
      .           //With an additional extension.
      .           //compare is the function used to compare the nodes of the linked list
      .           template <int(*compare)(ListNode*, ListNode*)>
      .           class LinkedList_FRE {
      .               public:
      .                   ListNode tail, head; //Head, tail of the linked list. 
      .                   InsertDescManager *const descMgr; //Record manager used to allocate insert_descriptor nodes.
      .               public:
     25 ( 0.00%)          LinkedList_FRE() : tail(), head(), descMgr(new InsertDescManager(NUM_THREADS)){
  8,772 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::record_manager(int, int) (1x)
    187 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
    124 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/ListNode.h:ListNode::ListNode() (2x)
      6 ( 0.00%)              head.successor.store((uintptr_t)&tail);
      7 ( 0.00%)          }
      4 ( 0.00%)          ~LinkedList_FRE(){ 
      .                       //Deinitialize all threads.
     28 ( 0.00%)              for(int i = 0;i < NUM_THREADS;++i){
     48 ( 0.00%)                  descMgr->deinitThread(i);
 88,528 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::deinitThread(int) (8x)
      .                       }
     14 ( 0.00%)              delete descMgr;
 16,060 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::~record_manager() (1x)
    163 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
      3 ( 0.00%)          }
      .           
134,760 ( 0.02%)           uintptr_t helpInsert(ListNode *prev, InsertDescNode *desc){
 13,476 ( 0.00%)              uintptr_t expected = 0;
 26,952 ( 0.00%)              uintptr_t result = expected;
107,808 ( 0.02%)              desc->newNode->successor.compare_exchange_strong(result, (uintptr_t)desc->next);
      .           
      .                       //If insert node was marked....
 53,904 ( 0.01%)              if((result & STATUS_MASK) == Marked){ 
      .                           expected = (uintptr_t)desc + InsFlag;
      .                           result = expected;
      .                           //newNode has already been removed.
      .                           //Attempt to CAS to remove descriptor.
      .                           prev->successor.compare_exchange_strong(result, (uintptr_t)desc->next);
      .                           if(result == expected){
      .                               descMgr->retire(threadID(), desc);
      .                               return (uintptr_t)desc->next;
      .                           }
      .                           else{
      .                               return result;
      .                           }
      .                       }
      .                       else{
 40,428 ( 0.01%)                  expected = (uintptr_t)desc + InsFlag;
 26,952 ( 0.00%)                  result = expected;
      .                           //Attempt to complete insertion of insert node.
 80,856 ( 0.01%)                  prev->successor.compare_exchange_strong(result, (uintptr_t)desc->newNode);
 40,428 ( 0.01%)                  if(result == expected){
134,760 ( 0.02%)                      descMgr->retire(threadID(), desc);
2,534,866 ( 0.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::retire<InsertDescNode>(int, InsertDescNode*) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
 40,428 ( 0.01%)                      return (uintptr_t)desc->newNode;
      .                           }
      .                           else{
      .                               return result;
      .                           }
      .                       }
 80,856 ( 0.01%)          }
      .                   
      .                   //Precondition: prev.successor was <delNode, DelFlag> at an earlier point, and delNode is Marked.
121,284 ( 0.02%)          uintptr_t helpMarked(ListNode *prev, ListNode *delNode){
 67,380 ( 0.01%)              ListNode *next = (ListNode*)((uintptr_t)delNode->successor & NEXT_MASK);
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
 40,428 ( 0.01%)              uintptr_t expected = (uintptr_t)delNode + DelFlag;
 26,952 ( 0.00%)              uintptr_t result = expected;
 67,380 ( 0.01%)              prev->successor.compare_exchange_strong(result, (uintptr_t)next);
      .                       
 67,380 ( 0.01%)              if(result == expected)return (uintptr_t)next;
      .                       else return result;
 67,380 ( 0.01%)          }
      .                   //Precondition, prev.successor was <delNode, DelFlag> at an earlier point.
121,284 ( 0.02%)          uintptr_t helpRemove(ListNode *prev, ListNode *delNode){
 80,856 ( 0.01%)              delNode->backlink = prev;
983,748 ( 0.15%)  => /usr/include/c++/13.2.1/atomic:std::atomic<ListNode*>::operator=(ListNode*) (13,476x)
 53,904 ( 0.01%)              uintptr_t succ = delNode->successor.load(); //The value of delNode's successor pointer
 40,428 ( 0.01%)              uintptr_t state = succ & STATUS_MASK;
 40,428 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
      .           
 40,428 ( 0.01%)              while(state != Marked){ //While delNode is not marked...
 26,952 ( 0.00%)                  if(state == DelFlag){ //Help with deletion of its successor, if it is flagged....
      .                               succ = helpRemove(delNode, (ListNode*)next);
      .                           }
 26,952 ( 0.00%)                  else if(state == InsFlag){ //Help with insertion while it points to an insertion descriptor...
      .                               succ = helpInsert(delNode, (InsertDescNode*)next);
      .                           }
      .                           else{ //Attempt to mark the node if the status was normal...
 40,428 ( 0.01%)                      uintptr_t markedSuccessor = (uintptr_t)next + Marked;
 26,952 ( 0.00%)                      succ = next;
 67,380 ( 0.01%)                      delNode->successor.compare_exchange_strong(succ, markedSuccessor); //Try to update from <next, Normal> to <next, Marked>
 53,904 ( 0.01%)                      if(succ == next)break; //The CAS succeeded!
      .                           }
      .                           state = succ & STATUS_MASK;
      .                           next = succ & NEXT_MASK;
      .                       }
 94,332 ( 0.01%)              succ = helpMarked(prev, delNode);
2,331,348 ( 0.37%)  => FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpMarked(ListNode*, ListNode*) (13,476x)
 13,476 ( 0.00%)              return succ;
 67,380 ( 0.01%)          }
      .           
      .                   //Used to compare two nodes in the list
      .                   //Returns 1 if n1 must be placed after n2
      .                   //Returns 0 if n1 may be placed after or before n2.
      .                   //Returns -1 if n1 must be placed before n2
      .                   inline int __attribute__((always_inline)) compNode(ListNode *n1, ListNode *n2){
161,712 ( 0.03%)              if(n1 == &tail)return 1;
 13,476 ( 0.00%)              else return compare(n1,n2);
      .                   }
      .           
121,284 ( 0.02%)          void insert(ListNode *node){
107,808 ( 0.02%)              if((node->successor & STATUS_MASK) == Marked)return;
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
      .           
 94,332 ( 0.01%)              descMgr->initThread(threadID());
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
247,641 ( 0.04%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::initThread(int) (13,476x)
134,760 ( 0.02%)              auto guard = descMgr->getGuard(threadID());
8,157,672 ( 1.28%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::getGuard(int, bool) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
      .           
 40,428 ( 0.01%)              ListNode *curr = &head;
 53,904 ( 0.01%)              uintptr_t succ = curr->successor;
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
 40,428 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
 40,428 ( 0.01%)              uint64_t state = succ & STATUS_MASK;
148,236 ( 0.02%)              InsertDescNode *newDesc = descMgr->template allocate<InsertDescNode>(threadID(), node);
3,742,483 ( 0.59%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:InsertDescNode* record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::allocate<InsertDescNode, ListNode*>(int, ListNode*) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
 53,904 ( 0.01%)              while(next != (uintptr_t)node){
 26,952 ( 0.00%)                  if(state == Normal){
134,760 ( 0.02%)                      if(compNode((ListNode*)next,node) <= 0){ //node should be placed further along in the list if next <= node
      .                                   curr = (ListNode*)next;
      .                                   succ = curr->successor;
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                                   continue;
      .                               }
107,808 ( 0.02%)                      if((node->successor & STATUS_MASK) == Marked)return;
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
 40,428 ( 0.01%)                      newDesc->next = (ListNode*)next; //Set the next of the insert descriptor node.
 26,952 ( 0.00%)                      succ = next;
 80,856 ( 0.01%)                      curr->successor.compare_exchange_strong(succ, (uintptr_t)newDesc + InsFlag);
 40,428 ( 0.01%)                      if(succ == next){ //If the CAS succeeded....
 80,856 ( 0.01%)                          helpInsert(curr, (InsertDescNode*)newDesc);
5,944,294 ( 0.94%)  => FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpInsert(ListNode*, InsertDescNode*) (13,476x)
 26,952 ( 0.00%)                          return;
      .                               }
      .                               //Read next and state from curr.successor.
      .                               next = succ & NEXT_MASK;
      .                               state = succ & STATUS_MASK;
      .                           }
      .                           else if(state == InsFlag){
      .                               succ = helpInsert(curr, (InsertDescNode*)next);
      .                               if(((InsertDescNode*)next)->newNode == node)return;
-- line 170 ----------------------------------------
-- line 184 ----------------------------------------
      .                               if((ListNode*)next == curr){ //Help remove curr from the list.
      .                                   succ = helpMarked(prev, curr);
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                               curr = prev;
      .                           }
      .                       }
148,236 ( 0.02%)          }
2,520,012 ( 0.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (13,476x)
121,284 ( 0.02%)          void remove(ListNode *node){
 94,332 ( 0.01%)              descMgr->initThread(threadID());
242,568 ( 0.04%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::initThread(int) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
134,760 ( 0.02%)              auto guard = descMgr->getGuard(threadID());
8,152,172 ( 1.28%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::getGuard(int, bool) (13,476x)
121,284 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (13,476x)
      .           
 40,428 ( 0.01%)              ListNode *curr = &head;
 53,904 ( 0.01%)              uintptr_t succ = curr->successor;
619,896 ( 0.10%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (13,476x)
 40,428 ( 0.01%)              uintptr_t next = succ & NEXT_MASK;
 40,428 ( 0.01%)              uint64_t state = succ & STATUS_MASK;
      .                       while(1){
 26,952 ( 0.00%)                  if(state == Normal){
134,760 ( 0.02%)                      if(compNode((ListNode*)next, node) > 0)return;
 40,428 ( 0.01%)                      if((ListNode*)next != node){ //Advance...
      .                                   curr = (ListNode*)next;
      .                                   succ = curr->successor;
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                               else{
 26,952 ( 0.00%)                          succ = (uintptr_t)node;
 80,856 ( 0.01%)                          curr->successor.compare_exchange_strong(succ, (uintptr_t)node + DelFlag);
 53,904 ( 0.01%)                          if(succ == (uintptr_t)node){
 80,856 ( 0.01%)                              helpRemove(curr, node);
5,862,060 ( 0.92%)  => FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::helpRemove(ListNode*, ListNode*) (13,476x)
 13,476 ( 0.00%)                              return;
      .                                   }
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                           }
      .                           else if(state == InsFlag){
      .                               succ = helpInsert(curr, (InsertDescNode*)next);
      .                               next = succ & NEXT_MASK;
-- line 223 ----------------------------------------
-- line 240 ----------------------------------------
      .                               if(next == (uintptr_t)curr){ //Help remove curr from the list.
      .                                   succ = helpMarked(prev, curr);
      .                                   next = succ & NEXT_MASK;
      .                                   state = succ & STATUS_MASK;
      .                               }
      .                               curr = prev;
      .                           }
      .                       }
121,284 ( 0.02%)          }
2,520,012 ( 0.40%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (13,476x)
      .           
      .                   //List traversal algorithms here: 
      .           
      .                   //Returns the head of the linked list, or null if the list is empty...
188,104 ( 0.03%)          ListNode *first(){
282,156 ( 0.04%)              return next(&head);
43,464,318 ( 6.84%)  => FomitchevRuppert/list_extension.h:LinkedList_FRE<&(compareUpdate(ListNode*, ListNode*))>::next(ListNode*) (47,026x)
 94,052 ( 0.01%)          }
605,151 ( 0.10%)          ListNode *next(ListNode *node){
470,673 ( 0.07%)              descMgr->initThread(threadID());
1,215,254 ( 0.19%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::initThread(int) (67,239x)
605,151 ( 0.10%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (67,239x)
672,390 ( 0.11%)              auto guard = descMgr->getGuard(threadID());
40,519,176 ( 6.38%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::getGuard(int, bool) (67,239x)
605,151 ( 0.10%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../common.h:threadID(int) (67,239x)
      .                       
268,956 ( 0.04%)              uintptr_t succ = node->successor;
3,092,994 ( 0.49%)  => /usr/include/c++/13.2.1/bits/atomic_base.h:std::__atomic_base<unsigned long>::operator unsigned long() const (67,239x)
201,717 ( 0.03%)              uintptr_t next = succ & NEXT_MASK;
201,717 ( 0.03%)              uint64_t state = succ & STATUS_MASK;
134,478 ( 0.02%)              if(state == InsFlag){
      .                           next = (uintptr_t)((InsertDescNode*)next)->next;
      .                       }
      .           
      .                       //If the following ListNode was the tail, then return nullptr.
201,717 ( 0.03%)              if(next == (uintptr_t)(&tail)){
 94,052 ( 0.01%)                  return nullptr;
      .                       }
 20,213 ( 0.00%)              else return (ListNode*)next; //Otherwise, return the following ListNode.
672,390 ( 0.11%)          }
12,573,693 ( 1.98%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::MemoryReclamationGuard::~MemoryReclamationGuard() (67,239x)
      .           
      .                   ListNode *next(ListNode *node, uint64_t &state){
      .                       descMgr->initThread(threadID());
      .                       auto guard = descMgr->getGuard(threadID());
      .                       
      .                       uintptr_t succ = node->successor;
      .                       uintptr_t next = succ & NEXT_MASK;
      .                       state = succ & STATUS_MASK;
-- line 280 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: FomitchevRuppert/../setbench/common/recordmgr/record_manager.h
--------------------------------------------------------------------------------
Ir                 

-- line 19 ----------------------------------------
        .           #include <typeinfo>
        .           
        .           inline CallbackReturn callbackReturnTrue(CallbackArg arg) {
        .               return true;
        .           }
        .           
        .           // compile time check for duplicate template parameters
        .           // compare first with rest to find any duplicates
       35 ( 0.00%)  template <typename T> void check_duplicates(void) {}
        .           template <typename T, typename First, typename... Rest>
       28 ( 0.00%)  void check_duplicates(void) {
       49 ( 0.00%)      if (typeid(T) == typeid(First)) {
       72 ( 0.00%)  => /usr/include/c++/13.2.1/typeinfo:std::type_info::operator==(std::type_info const&) const (1x)
        .                   throw std::logic_error("duplicate template arguments provided to RecordManagerSet");
        .               }
        7 ( 0.00%)      check_duplicates<T, Rest...>();
       94 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void check_duplicates<DelNode, NotifyNode>() (1x)
       35 ( 0.00%)  }
        .           
        .           // base case: empty template
        .           // this is a compile time check for invalid arguments
        .           template <class Reclaim, class Alloc, class Pool, typename... Rest>
        .           class RecordManagerSet {
        .               PAD;
        .           public:
       24 ( 0.00%)      RecordManagerSet(const int numProcesses, RecoveryMgr<void *> * const _recoveryMgr) {}
        .               template <typename T>
        .               record_manager_single_type<T, Reclaim, Alloc, Pool> * get(T * const recordType) {
        .                   throw std::logic_error("invalid type passed to RecordManagerSet::get()");
        .                   return NULL;
        .               }
        .               void clearCounters(void) {}
       84 ( 0.00%)      void registerThread(const int tid) {}
       84 ( 0.00%)      void unregisterThread(const int tid) {}
        .               void printStatus() {}
        .               inline void qUnprotectAll(const int tid) {}
1,752,255 ( 0.28%)      inline void getReclaimers(const int tid, void ** const reclaimers, int index) {}
        .               inline void endOp(const int tid) {}
        .               inline void leaveQuiescentStateForEach(const int tid, const bool readOnly = false) {}
        .               inline void startOp(const int tid, const bool callForEach, const bool readOnly = false) {}
        .               inline void debugGCSingleThreaded() {
        .                   printf("DEBUG: record_manager::debugGCSingleThreaded()\n");
        .               }
        .           };
        .           
        .           // "recursive" case
        .           template <class Reclaim, class Alloc, class Pool, typename First, typename... Rest>
        .           class RecordManagerSet<Reclaim, Alloc, Pool, First, Rest...> : RecordManagerSet<Reclaim, Alloc, Pool, Rest...> {
        .               PAD;
        .               record_manager_single_type<First, Reclaim, Alloc, Pool> * const mgr;
        .           	PAD;
        .           public:
       63 ( 0.00%)      RecordManagerSet(const int numProcesses, RecoveryMgr<void *> * const _recoveryMgr)
        .                   : RecordManagerSet<Reclaim, Alloc, Pool, Rest...>(numProcesses, _recoveryMgr)
      126 ( 0.00%)          , mgr(new record_manager_single_type<First, Reclaim, Alloc, Pool>(numProcesses, _recoveryMgr))
    6,247 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::record_manager_single_type(int, RecoveryMgr<void*>*) (1x)
      187 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
        8 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >>::RecordManagerSet(int, RecoveryMgr<void*>*) (1x)
        .                   {
        .                   //cout<<"RecordManagerSet with First="<<typeid(First).name()<<" and sizeof...(Rest)="<<sizeof...(Rest)<<std::endl;
        7 ( 0.00%)          check_duplicates<First, Rest...>(); // check if first is in {rest...}
        5 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:void check_duplicates<InsertDescNode>() (1x)
       49 ( 0.00%)      }
       28 ( 0.00%)      ~RecordManagerSet() {
        .                   //std::cout<<"recordmanager set destructor started for object type "<<typeid(First).name()<<std::endl;
       98 ( 0.00%)          delete mgr;
    6,627 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<DelNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::~record_manager_single_type() (1x)
      163 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
        .                   //std::cout<<"recordmanager set destructor finished for object type "<<typeid(First).name()<<std::endl;
        .                   // note: should automatically call the parent class' destructor afterwards
       33 ( 0.00%)      }
   71,399 ( 0.01%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, InsNode, PredecessorNode, NotifyNode>::~RecordManagerSet() (1x)
        .               // note: the compiled code for get() should be a single read and return statement
        .               template<typename T>
5,204,355 ( 0.82%)      inline record_manager_single_type<T, Reclaim, Alloc, Pool> * get(T * const recordType) {
7,286,097 ( 1.15%)          if (typeid(First) == typeid(T)) {
1,940,256 ( 0.31%)  => /usr/include/c++/13.2.1/typeinfo:std::type_info::operator==(std::type_info const&) const (26,948x)
        .                       //cout<<"MATCH: typeid(First)="<<typeid(First).name()<<" typeid(T)="<<typeid(T).name()<<std::endl;
2,377,230 ( 0.37%)              return (record_manager_single_type<T, Reclaim, Alloc, Pool> *) mgr;
        .                   } else {
        .                       //cout<<"NO MATCH: typeid(First)="<<typeid(First).name()<<" typeid(T)="<<typeid(T).name()<<std::endl;
1,490,766 ( 0.23%)              return ((RecordManagerSet<Reclaim, Alloc, Pool, Rest...> *) this)->get(recordType);
1,077,920 ( 0.17%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, NotifyNode>::get<NotifyNode>(NotifyNode*) (26,948x)
        .                   }
2,081,742 ( 0.33%)      }
        .               // note: recursion should be compiled out
        .               void clearCounters(void) {
        .                   mgr->clearCounters();
        .                   ((RecordManagerSet<Reclaim, Alloc, Pool, Rest...> *) this)->clearCounters();
        .               }
      140 ( 0.00%)      void registerThread(const int tid) {
      168 ( 0.00%)          mgr->initThread(tid);
    9,497 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<PredecessorNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::initThread(int) (4x)
      140 ( 0.00%)          ((RecordManagerSet<Reclaim, Alloc, Pool, Rest...> *) this)->registerThread(tid);
    9,759 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, NotifyNode>::registerThread(int) (4x)
       84 ( 0.00%)      }
      140 ( 0.00%)      void unregisterThread(const int tid) {
      168 ( 0.00%)          mgr->deinitThread(tid);
  118,535 ( 0.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<RU_ALL_INS_DescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::deinitThread(int) (4x)
      140 ( 0.00%)          ((RecordManagerSet<Reclaim, Alloc, Pool, Rest...> *) this)->unregisterThread(tid);
7,854,860 ( 1.24%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, NotifyDescNode>::unregisterThread(int) (4x)
       84 ( 0.00%)      }
        .               void printStatus() {
        .                   mgr->printStatus();
        .                   ((RecordManagerSet<Reclaim, Alloc, Pool, Rest...> *) this)->printStatus();
        .               }
        .               inline void qUnprotectAll(const int tid) {
        .                   mgr->qUnprotectAll(tid);
        .                   ((RecordManagerSet<Reclaim, Alloc, Pool, Rest...> *) this)->qUnprotectAll(tid);
        .               }
2,626,421 ( 0.41%)      inline void getReclaimers(const int tid, void ** const reclaimers, int index) {
3,376,827 ( 0.53%)          reclaimers[index] = mgr->reclaim;
2,626,421 ( 0.41%)          ((RecordManagerSet <Reclaim, Alloc, Pool, Rest...> *) this)->getReclaimers(tid, reclaimers, 1+index);
2,117,570 ( 0.33%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, NotifyDescNode>::getReclaimers(int, void**, int) (60,502x)
1,125,609 ( 0.18%)      }
        .               inline void endOp(const int tid) {
        .                   mgr->endOp(tid);
        .                   ((RecordManagerSet<Reclaim, Alloc, Pool, Rest...> *) this)->endOp(tid);
        .               }
        .               inline void leaveQuiescentStateForEach(const int tid, const bool readOnly = false) {
        .                   mgr->template startOp<First, Rest...>(tid, NULL, 0, readOnly);
        .                   ((RecordManagerSet <Reclaim, Alloc, Pool, Rest...> *) this)->leaveQuiescentStateForEach(tid, readOnly);
        .               }
2,141,645 ( 0.34%)      inline void startOp(const int tid, const bool callForEach, const bool readOnly = false) {
  389,390 ( 0.06%)          if (callForEach) {
        .                       leaveQuiescentStateForEach(tid, readOnly);
        .                   } else {
        .                       void * reclaimers[1+sizeof...(Rest)];
1,168,170 ( 0.18%)              getReclaimers(tid, reclaimers, 0);
3,296,685 ( 0.52%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::getReclaimers(int, void**, int) (94,191x)
2,336,340 ( 0.37%)              get((First *) NULL)->template startOp<First, Rest...>(tid, reclaimers, 1+sizeof...(Rest), readOnly);
25,557,608 ( 4.02%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:void record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::startOp<InsertDescNode>(int, void* const*, int, bool) (94,191x)
3,767,640 ( 0.59%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::get<InsertDescNode>(InsertDescNode*) (94,191x)
  194,695 ( 0.03%)              __sync_synchronize(); // memory barrier needed (only) for epoch based schemes at the moment...
        .                   }
1,168,170 ( 0.18%)      }
        .               inline void debugGCSingleThreaded() {
        .                   printf("DEBUG: record_manager::debugGCSingleThreaded() 1+sizeof...(Rest)=%lu\n", 1+sizeof...(Rest));
        .                   void * reclaimers[1+sizeof...(Rest)];
        .                   getReclaimers(0, reclaimers, 0);
        .                   get((First *) NULL)->template debugGCSingleThreaded<First, Rest...>(reclaimers, 1+sizeof...(Rest));
        .                   __sync_synchronize(); // memory barrier needed (only) for epoch based schemes at the moment...
        .               }
        .           };
        .           
        .           template <class Reclaim, class Alloc, class Pool, typename First, typename... Rest>
       30 ( 0.00%)  class RecordManagerSetPostPadded : public RecordManagerSet<Reclaim, Alloc, Pool, First, Rest...> {
  999,829 ( 0.16%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::~RecordManagerSet() (1x)
        .               PAD;
        .           public:
       18 ( 0.00%)      RecordManagerSetPostPadded(const int numProcesses, RecoveryMgr<void *> * const _recoveryMgr)
       18 ( 0.00%)          : RecordManagerSet<Reclaim, Alloc, Pool, First, Rest...>(numProcesses, _recoveryMgr)
    6,482 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::RecordManagerSet(int, RecoveryMgr<void*>*) (1x)
        9 ( 0.00%)      {}
        .           };
        .           
        .           class padded_bool {
        .           public:
        .               union {
        .                   bool v;
        .                   char padding[128];
        .               };
    1,152 ( 0.00%)      padded_bool() {
      768 ( 0.00%)          v = 0;
    1,152 ( 0.00%)      }
        .           };
        .           
        .           template <class Reclaim, class Alloc, class Pool, typename RecordTypesFirst, typename... RecordTypesRest>
        .           class record_manager {
        .           protected:
        .               typedef record_manager<Reclaim,Alloc,Pool,RecordTypesFirst,RecordTypesRest...> SelfType;
        .               PAD;
        .               RecordManagerSetPostPadded<Reclaim,Alloc,Pool,RecordTypesFirst,RecordTypesRest...> * rmset;
-- line 170 ----------------------------------------
-- line 173 ----------------------------------------
        .              padded_bool init[MAX_THREADS_POW2];
        .           
        .           public:
        .           //    PAD;
        .               const int NUM_PROCESSES;
        .               RecoveryMgr<SelfType> * const recoveryMgr;
        .               PAD;
        .           
       27 ( 0.00%)      record_manager(const int numProcesses, const int _neutralizeSignal = -1 /* unused except in conjunction with special DEBRA+ memory reclamation */)
        9 ( 0.00%)              : NUM_PROCESSES(numProcesses)
    2,364 ( 0.00%)              , recoveryMgr(new RecoveryMgr<SelfType>(numProcesses, _neutralizeSignal, this))
    1,024 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:padded_bool::padded_bool() (128x)
      201 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
       37 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/recovery_manager.h:RecoveryMgr<record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode> >::RecoveryMgr(int, int, record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>*) (1x)
        .               {
       39 ( 0.00%)          rmset = new RecordManagerSetPostPadded<Reclaim, Alloc, Pool, RecordTypesFirst, RecordTypesRest...>(numProcesses, (RecoveryMgr<void *> *) recoveryMgr);
   27,730 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSetPostPadded<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::RecordManagerSetPostPadded(int, RecoveryMgr<void*>*) (1x)
      185 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long) (1x)
       21 ( 0.00%)      }
       15 ( 0.00%)      ~record_manager() {
       42 ( 0.00%)              delete recoveryMgr;
       80 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
       20 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/recovery_manager.h:RecoveryMgr<record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode> >::~RecoveryMgr() (1x)
       30 ( 0.00%)              delete rmset;
   15,847 ( 0.00%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSetPostPadded<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::~RecordManagerSetPostPadded() (1x)
       80 ( 0.00%)  => /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc:operator delete(void*, unsigned long) (1x)
       12 ( 0.00%)      }
  973,475 ( 0.15%)      void initThread(const int tid) {
2,141,849 ( 0.34%)          if (init[tid].v) return; else init[tid].v = !init[tid].v;
        .           
       84 ( 0.00%)          rmset->registerThread(tid);
   41,287 ( 0.01%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::registerThread(int) (4x)
       84 ( 0.00%)          recoveryMgr->initThread(tid);
      116 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/recovery_manager.h:RecoveryMgr<record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode> >::initThread(int) (4x)
        .           //        endOp(tid);
  389,390 ( 0.06%)      }
      120 ( 0.00%)      void deinitThread(const int tid) {
      492 ( 0.00%)          if (!init[tid].v) return; else init[tid].v = !init[tid].v;
        .           
       72 ( 0.00%)          recoveryMgr->deinitThread(tid);
       28 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/recovery_manager.h:RecoveryMgr<record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode> >::deinitThread(int) (4x)
       96 ( 0.00%)          rmset->unregisterThread(tid);
6,470,273 ( 1.02%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::unregisterThread(int) (4x)
       48 ( 0.00%)      }
        .               void clearCounters() {
        .                   rmset->clearCounters();
        .               }
        .               void printStatus(void) {
        .                   rmset->printStatus();
        .               }
        .               template <typename T>
        .               debugInfo * getDebugInfo(T * const recordType) {
-- line 211 ----------------------------------------
-- line 247 ----------------------------------------
        .               }
        .           
        .               inline void qUnprotectAll(const int tid) {
        .                   assert(!Reclaim::supportsCrashRecovery() || isQuiescent(tid));
        .                   rmset->qUnprotectAll(tid);
        .               }
        .           
        .               // for epoch based reclamation
  973,475 ( 0.15%)      inline bool isQuiescent(const int tid) {
1,946,950 ( 0.31%)          return rmset->get((RecordTypesFirst *) NULL)->isQuiescent(tid); // warning: if quiescence information is logically shared between all types, with the actual data being associated only with the first type (as it is here), then isQuiescent will return inconsistent results if called in functions that recurse on the template argument list in this class.
6,781,752 ( 1.07%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::isQuiescent(int) (94,191x)
3,767,640 ( 0.59%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::get<InsertDescNode>(InsertDescNode*) (94,191x)
  389,390 ( 0.06%)      }
  973,475 ( 0.15%)      inline void endOp(const int tid) {
1,946,950 ( 0.31%)          assert(init[tid].v && "must call record_manager initThread before endOp");
        .           //        VERBOSE DEBUG2 COUTATOMIC("record_manager_single_type::endOp(tid="<<tid<<")"<<std::endl);
  584,085 ( 0.09%)          if (Reclaim::quiescenceIsPerRecordType()) {
  470,955 ( 0.07%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >::quiescenceIsPerRecordType() (94,191x)
        .           //            std::cout<<"setting quiescent state for all record types\n";
        .                       rmset->endOp(tid);
        .                   } else {
        .                       // only call endOp for one object type
        .           //            std::cout<<"setting quiescent state for just one record type: "<<typeid(RecordTypesFirst).name()<<"\n";
1,946,950 ( 0.31%)              rmset->get((RecordTypesFirst *) NULL)->endOp(tid);
9,136,527 ( 1.44%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::endOp(int) (94,191x)
3,767,640 ( 0.59%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<InsertDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::get<InsertDescNode>(InsertDescNode*) (94,191x)
        .                   }
  584,085 ( 0.09%)      }
1,752,255 ( 0.28%)      inline void startOp(const int tid, const bool readOnly = false) {
1,946,950 ( 0.31%)          assert(init[tid].v && "must call record_manager initThread before startOp");
1,362,865 ( 0.21%)          assert(isQuiescent(tid));
5,160,258 ( 0.81%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::isQuiescent(int) (40,002x)
        .           //        VERBOSE DEBUG2 COUTATOMIC("record_manager_single_type::startOp(tid="<<tid<<")"<<std::endl);
        .                   // for some types of reclaimers, different types of records retired in the same
        .                   // epoch can be reclaimed together (by aggregating their epochs), so we don't actually need
        .                   // separate calls to startOp for each object type.
        .                   // if appropriate, we make a single call to startOp,
        .                   // and it takesf care of all record types managed by this record manager.
        .                   //cout<<"quiescenceIsPerRecordType = "<<Reclaim::quiescenceIsPerRecordType()<<std::endl;
2,141,645 ( 0.34%)          rmset->startOp(tid, Reclaim::quiescenceIsPerRecordType(), readOnly);
17,827,347 ( 2.81%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::startOp(int, bool, bool) (40,002x)
  200,010 ( 0.03%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_debra.h:reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >::quiescenceIsPerRecordType() (40,002x)
1,168,170 ( 0.18%)      }
        .           
        .               // for all schemes
        .               template <typename T>
  523,890 ( 0.08%)      inline void retire(const int tid, T * const p) {
  873,150 ( 0.14%)          assert(init[tid].v && "must call record_manager initThread before retire");
  349,260 ( 0.05%)          assert(!Reclaim::supportsCrashRecovery() || isQuiescent(tid));
   33,685 ( 0.01%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<long, pool_interface<long, allocator_interface<long> > >::supportsCrashRecovery() (6,737x)
  960,465 ( 0.15%)          rmset->get((T *) NULL)->retire(tid, p);
2,128,892 ( 0.34%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >* RecordManagerSet<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::get<NotifyNode>(NotifyNode*) (6,737x)
  761,428 ( 0.12%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:record_manager_single_type<NotifyNode, reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> > >::retire(int, NotifyNode*) (6,737x)
  261,945 ( 0.04%)      }
        .           
        .               template <typename T, typename... Types>
  786,709 ( 0.12%)      inline T * allocate(const int tid, Types... args) {
1,210,100 ( 0.19%)          assert(init[tid].v && "must call record_manager initThread before allocate");
  484,040 ( 0.08%)          assert(!Reclaim::supportsCrashRecovery() || isQuiescent(tid));
  167,750 ( 0.03%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<void, pool_interface<void, allocator_interface<void> > >::supportsCrashRecovery() (33,550x)
        .           //        GSTATS_ADD_IX(tid, num_prop_epoch_allocations, 1, GSTATS_GET(tid, thread_announced_epoch));
1,418,699 ( 0.22%)          return rmset->get((T *) NULL)->allocate(tid, args...);
6,527,656 ( 1.03%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/record_manager_single_type.h:NotifyDescNode* record_manager_single_type<NotifyDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >::allocate<PredecessorNode*>(int, PredecessorNode*) (33,550x)
4,428,600 ( 0.70%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager_single_type<NotifyDescNode, reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> > >* RecordManagerSet<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, RU_ALL_INS_DescNode, NotifyDescNode>::get<NotifyDescNode>(NotifyDescNode*) (33,550x)
  242,020 ( 0.04%)      }
        .           
        .               // optional function which can be used if it is safe to call free()
        .               template <typename T>
        .               inline void deallocate(const int tid, T * const p) {
        .                   assert(init[tid].v && "must call record_manager initThread before deallocate");
        .                   assert(!Reclaim::supportsCrashRecovery() || isQuiescent(tid));
        .                   rmset->get((T *) NULL)->deallocate(tid, p);
        .               }
        .           
        .               inline static bool shouldHelp() { // FOR DEBUGGING PURPOSES
        .                   return Reclaim::shouldHelp();
        .               }
       36 ( 0.00%)      inline static bool supportsCrashRecovery() {
       18 ( 0.00%)          return Reclaim::supportsCrashRecovery();
       30 ( 0.00%)  => /home/jakjm/Desktop/JeremyTrie/Implementations/FomitchevRuppert/../setbench/common/recordmgr/reclaimer_interface.h:reclaimer_interface<long, pool_interface<long, allocator_interface<long> > >::supportsCrashRecovery() (6x)
       36 ( 0.00%)      }
        .           
        .               class MemoryReclamationGuard {
        .                   const int tid;
        .                   record_manager<Reclaim, Alloc, Pool, RecordTypesFirst, RecordTypesRest...> * recmgr;
        .               public:
1,557,552 ( 0.25%)          MemoryReclamationGuard(const int _tid, record_manager<Reclaim, Alloc, Pool, RecordTypesFirst, RecordTypesRest...> * _recmgr, const bool readOnly = false)
1,168,164 ( 0.18%)          : tid(_tid), recmgr(_recmgr) {
1,557,552 ( 0.25%)              recmgr->startOp(tid, readOnly);
24,904,903 ( 3.92%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::startOp(int, bool) (40,001x)
  584,082 ( 0.09%)          }
  778,776 ( 0.12%)          ~MemoryReclamationGuard() {
1,362,858 ( 0.21%)              recmgr->endOp(tid);
16,295,043 ( 2.56%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<void, pool_interface<void, allocator_interface<void> > >, allocator_new<void>, pool_none<void, allocator_interface<void> >, InsertDescNode>::endOp(int) (94,191x)
  584,082 ( 0.09%)          }
        .                   void end() {
        .                       recmgr->endOp(tid);
        .                   }
        .               };
        .           
1,557,552 ( 0.25%)      inline MemoryReclamationGuard getGuard(const int tid, const bool readOnly = false) {
        .                   SOFTWARE_BARRIER;
1,168,164 ( 0.18%)          return MemoryReclamationGuard(tid, this, readOnly);
25,904,928 ( 4.08%)  => FomitchevRuppert/../setbench/common/recordmgr/record_manager.h:record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>::MemoryReclamationGuard::MemoryReclamationGuard(int, record_manager<reclaimer_debra<long, pool_interface<long, allocator_interface<long> > >, allocator_new<long>, pool_none<long, allocator_interface<long> >, DelNode, InsNode, PredecessorNode, NotifyNode>*, bool) (40,001x)
  584,082 ( 0.09%)      }
        .           
        .               void debugGCSingleThreaded() {
        .                   rmset->debugGCSingleThreaded();
        .               }
        .           };
        .           
        .           #endif

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_op.cc
  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/del_ops.cc
  /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/new_op.cc
  /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++98/tree.cc
  /usr/src/debug/glibc/glibc/elf/../sysdeps/generic/dl-new-hash.h
  /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-machine.h
  /usr/src/debug/glibc/glibc/elf/dl-lookup.c
  /usr/src/debug/glibc/glibc/elf/dl-reloc.c
  /usr/src/debug/glibc/glibc/elf/do-rel.h

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
573,767,878 (90.31%)  events annotated

